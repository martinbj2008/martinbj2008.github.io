<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://martinbj2008.github.io/atom.xml" rel="self"/>
  <link href="http://martinbj2008.github.io/"/>
  <updated>2015-05-21T16:26:25+08:00</updated>
  <id>http://martinbj2008.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ftrace Study]]></title>
    <link href="http://martinbj2008.github.io/blog/2014/10/21/ftrace-study/"/>
    <updated>2014-10-21T14:45:00+08:00</updated>
    <id>http://martinbj2008.github.io/blog/2014/10/21/ftrace-study</id>
    <content type="html"><![CDATA[<h3>test case</h3>

<p>We found ixgbe  rx softirq  poll function <code>ixgbe_poll</code> was called even without pkt coming.
how to prove it and who call it?</p>

<h3>analysis</h3>

<p>By browse source <code>ixgbe_poll</code> is called, it should be done by napi schedule.
If this is true, <code>__napi_schedule</code> should be called.</p>

<!-- more -->


<h3>use ftrace to locate:</h3>

<h5>prepare debugfs</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">mount</span> <span class="o">-</span><span class="n">t</span> <span class="n">debugfs</span> <span class="n">none</span> <span class="o">/</span><span class="n">sys</span><span class="o">/</span><span class="n">kernel</span><span class="o">/</span><span class="n">debug</span><span class="o">/</span>
</span><span class='line'><span class="n">cd</span>  <span class="o">/</span><span class="n">sys</span><span class="o">/</span><span class="n">kernel</span><span class="o">/</span><span class="n">debug</span><span class="o">/</span><span class="n">tracing</span>
</span></code></pre></td></tr></table></div></figure>


<h4>step1: who call <code>__napi_schedule</code></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">echo</span> <span class="n">function</span> <span class="o">&gt;</span> <span class="n">current_tracer</span>
</span><span class='line'><span class="n">echo</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="n">options</span><span class="o">/</span><span class="n">func_stack_trace</span>
</span><span class='line'><span class="n">echo</span> <span class="n">__napi_schedule</span> <span class="o">&gt;</span> <span class="n">set_ftrace_filter</span>
</span><span class='line'><span class="n">cat</span> <span class="n">set_ftrace_filter</span>
</span><span class='line'><span class="n">cat</span> <span class="n">trace</span>  <span class="o">&gt;</span> <span class="o">~/</span><span class="n">a</span>
</span></code></pre></td></tr></table></div></figure>


<h4>step2: who call <code>ixgbe_msix_clean_rings</code></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">echo</span> <span class="n">function</span> <span class="o">&gt;</span> <span class="n">current_tracer</span>
</span><span class='line'><span class="n">echo</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="n">options</span><span class="o">/</span><span class="n">func_stack_trace</span>
</span><span class='line'><span class="n">echo</span> <span class="n">ixgbe_msix_clean_rings</span> <span class="o">&gt;</span> <span class="n">set_ftrace_filter</span>
</span><span class='line'><span class="n">cat</span> <span class="n">set_ftrace_filter</span>
</span><span class='line'><span class="n">cat</span> <span class="n">trace</span>  <span class="o">&gt;</span> <span class="o">~/</span><span class="n">a</span>
</span></code></pre></td></tr></table></div></figure>


<h4>ftrace document</h4>

<p>Debugging the kernel using Ftrace
part 1
<a href="http://lwn.net/Articles/365835/">http://lwn.net/Articles/365835/</a></p>

<p>part 2
<a href="http://lwn.net/Articles/366796/">http://lwn.net/Articles/366796/</a></p>

<p>Secrets of the Ftrace function tracer
<a href="http://lwn.net/Articles/370423/">http://lwn.net/Articles/370423/</a></p>

<p>Debugging Linux Kernel by Ftrace by AceLan Kao
<a href="http://people.canonical.com/~acelan/coscup-2010/Debugging%20Linux%20Kernel%20by%20Ftrace.pdf">http://people.canonical.com/~acelan/coscup-2010/Debugging%20Linux%20Kernel%20by%20Ftrace.pdf</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Netdevice Watchdog Cause Tx Queue Schedule]]></title>
    <link href="http://martinbj2008.github.io/blog/2014/09/17/netdevice-watchdog-cause-tx-queue-schedule/"/>
    <updated>2014-09-17T15:38:00+08:00</updated>
    <id>http://martinbj2008.github.io/blog/2014/09/17/netdevice-watchdog-cause-tx-queue-schedule</id>
    <content type="html"><![CDATA[<h3>test case</h3>

<p>For ixgbe nic, we want to assign a tx hardware qeueue to each cpu,
and the tx softirq should use the corresponding hardware queue.</p>

<p>each packet will select a softqueue in <code>dev_queue_xmit</code>,
we rewrite ixgbe driver <code>ndo_select_queue</code>(<code>ixgbe_select_queue</code>),
which will return current cpu index(based 0) when packet select queue.
thus for each cpu use its own tx queue.</p>

<p>but, we found some packet had unmatched queue index when send
on specific cpu.</p>

<p>for example, a packet&rsquo;s queue index is 5 but is sent by cpu3,
thus, cpu3 will operate tx hw queue5, which should only be done by cpu5.</p>

<!-- more -->


<h3>Analysis</h3>

<p>When watchdog is start, it first <code>freeze</code> all subqueues,
and the do the check.
At the end, it resume the subqueues,
and reschedule them.</p>

<p>Because the watchdog is handled in a timer,
so the reschedule the queue will be done on a different cpu,
which is different the packets&rsquo;s queue index.</p>

<p>for example:
packet rung select queue on CPU1, while CPU2 run the watchdog,
this packet will be store in the queue1, but not sent.
when cpu2 finish the watchdog, queue1 is rescheduled.
NOTE here the queue1 start run on cpu2 not cpu1.
which is not expected and safe.
it will cause the tx ring buffer hang.</p>

<h3>related source</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>232 static void dev_watchdog(unsigned long arg)
</span><span class='line'>233 {
</span><span class='line'>234         struct net_device *dev = (struct net_device *)arg;
</span><span class='line'>235
</span><span class='line'>236         netif_tx_lock(dev);
</span><span class='line'>237         if (!qdisc_tx_is_noop(dev)) {
</span><span class='line'>238                 if (netif_device_present(dev) &&
</span><span class='line'>239                     netif_running(dev) &&
</span><span class='line'>240                     netif_carrier_ok(dev)) {
</span><span class='line'>241                         int some_queue_timedout = 0;
</span><span class='line'>242                         unsigned int i;
</span><span class='line'>243                         unsigned long trans_start;
</span><span class='line'>244
</span><span class='line'>245                         for (i = 0; i &lt; dev-&gt;num_tx_queues; i++) {
</span><span class='line'>246                                 struct netdev_queue *txq;
</span><span class='line'>247
</span><span class='line'>248                                 txq = netdev_get_tx_queue(dev, i);
</span><span class='line'>249                                 /*
</span><span class='line'>250                                  * old device drivers set dev-&gt;trans_start
</span><span class='line'>251                                  */
</span><span class='line'>252                                 trans_start = txq-&gt;trans_start ? : dev-&gt;trans_start;
</span><span class='line'>253                                 if (netif_xmit_stopped(txq) &&
</span><span class='line'>254                                     time_after(jiffies, (trans_start +
</span><span class='line'>255                                                          dev-&gt;watchdog_timeo))) {
</span><span class='line'>256                                         some_queue_timedout = 1;
</span><span class='line'>257                                         txq-&gt;trans_timeout++;
</span><span class='line'>258                                         break;
</span><span class='line'>259                                 }
</span><span class='line'>260                         }
</span><span class='line'>261
</span><span class='line'>262                         if (some_queue_timedout) {
</span><span class='line'>263                                 WARN_ONCE(1, KERN_INFO "NETDEV WATCHDOG: %s (%s): transmit queue %u timed out\n",
</span><span class='line'>264                                        dev-&gt;name, netdev_drivername(dev), i);
</span><span class='line'>265                                 dev-&gt;netdev_ops-&gt;ndo_tx_timeout(dev);
</span><span class='line'>266                         }
</span><span class='line'>267                         if (!mod_timer(&dev-&gt;watchdog_timer,
</span><span class='line'>268                                        round_jiffies(jiffies +
</span><span class='line'>269                                                      dev-&gt;watchdog_timeo)))
</span><span class='line'>270                                 dev_hold(dev);
</span><span class='line'>271                 }
</span><span class='line'>272         }
</span><span class='line'>273         netif_tx_unlock(dev);
</span><span class='line'>274
</span><span class='line'>275         dev_put(dev);
</span><span class='line'>276 }</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2985 static inline void netif_tx_lock(struct net_device *dev)
</span><span class='line'>2986 {
</span><span class='line'>2987         unsigned int i;
</span><span class='line'>2988         int cpu;
</span><span class='line'>2989
</span><span class='line'>2990         spin_lock(&dev-&gt;tx_global_lock);
</span><span class='line'>2991         cpu = smp_processor_id();
</span><span class='line'>2992         for (i = 0; i &lt; dev-&gt;num_tx_queues; i++) {
</span><span class='line'>2993                 struct netdev_queue *txq = netdev_get_tx_queue(dev, i);
</span><span class='line'>2994
</span><span class='line'>2995                 /* We are the only thread of execution doing a
</span><span class='line'>2996                  * freeze, but we have to grab the _xmit_lock in
</span><span class='line'>2997                  * order to synchronize with threads which are in
</span><span class='line'>2998                  * the -&gt;hard_start_xmit() handler and already
</span><span class='line'>2999                  * checked the frozen bit.
</span><span class='line'>3000                  */
</span><span class='line'>3001                 __netif_tx_lock(txq, cpu);
</span><span class='line'>3002                 set_bit(__QUEUE_STATE_FROZEN, &txq-&gt;state);
</span><span class='line'>3003                 __netif_tx_unlock(txq);
</span><span class='line'>3004         }
</span><span class='line'>3005 }</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>3013 static inline void netif_tx_unlock(struct net_device *dev)
</span><span class='line'>3014 {
</span><span class='line'>3015         unsigned int i;
</span><span class='line'>3016
</span><span class='line'>3017         for (i = 0; i &lt; dev-&gt;num_tx_queues; i++) {
</span><span class='line'>3018                 struct netdev_queue *txq = netdev_get_tx_queue(dev, i);
</span><span class='line'>3019
</span><span class='line'>3020                 /* No need to grab the _xmit_lock here.  If the
</span><span class='line'>3021                  * queue is not stopped for another reason, we
</span><span class='line'>3022                  * force a schedule.
</span><span class='line'>3023                  */
</span><span class='line'>3024                 clear_bit(__QUEUE_STATE_FROZEN, &txq-&gt;state);
</span><span class='line'>3025                 netif_schedule_queue(txq);
</span><span class='line'>3026         }
</span><span class='line'>3027         spin_unlock(&dev-&gt;tx_global_lock);
</span><span class='line'>3028 }</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2265 static inline void netif_schedule_queue(struct netdev_queue *txq)
</span><span class='line'>2266 {
</span><span class='line'>2267         if (!(txq-&gt;state & QUEUE_STATE_ANY_XOFF))
</span><span class='line'>2268                 __netif_schedule(txq-&gt;qdisc);
</span><span class='line'>2269 }</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2150 static inline void __netif_reschedule(struct Qdisc *q)
</span><span class='line'>2151 {
</span><span class='line'>2152         struct softnet_data *sd;
</span><span class='line'>2153         unsigned long flags;
</span><span class='line'>2154
</span><span class='line'>2155         local_irq_save(flags);
</span><span class='line'>2156         sd = &__get_cpu_var(softnet_data);
</span><span class='line'>2157         q-&gt;next_sched = NULL;
</span><span class='line'>2158         *sd-&gt;output_queue_tailp = q;
</span><span class='line'>2159         sd-&gt;output_queue_tailp = &q-&gt;next_sched;
</span><span class='line'>2160         raise_softirq_irqoff(NET_TX_SOFTIRQ);
</span><span class='line'>2161         local_irq_restore(flags);
</span><span class='line'>2162 }
</span><span class='line'>2163
</span><span class='line'>2164 void __netif_schedule(struct Qdisc *q)
</span><span class='line'>2165 {
</span><span class='line'>2166         if (!test_and_set_bit(__QDISC_STATE_SCHED, &q-&gt;state))
</span><span class='line'>2167                 __netif_reschedule(q);
</span><span class='line'>2168 }
</span><span class='line'>2169 EXPORT_SYMBOL(__netif_schedule);</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Does Ixgbe Use Queue Index]]></title>
    <link href="http://martinbj2008.github.io/blog/2014/09/16/ixgbe-queue-index/"/>
    <updated>2014-09-16T10:58:00+08:00</updated>
    <id>http://martinbj2008.github.io/blog/2014/09/16/ixgbe-queue-index</id>
    <content type="html"><![CDATA[<h3>data structure</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>7913 static const struct net_device_ops ixgbe_netdev_ops = {
</span><span class='line'>...
</span><span class='line'>7916         .ndo_start_xmit         = ixgbe_xmit_frame,
</span><span class='line'>7917         .ndo_select_queue       = ixgbe_select_queue,
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<h3>receive skb: record receive queue index</h3>

<p>record <code>queue_index +1</code>, 0 is used as NOT record.</p>

<h4>call trace</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; ixgbe_poll
</span><span class='line'>&gt; &gt; ixgbe_clean_rx_irq
</span><span class='line'>&gt; &gt; &gt; ixgbe_process_skb_fields
</span><span class='line'>&gt; &gt; &gt; &gt; skb_record_rx_queue</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1675 static void ixgbe_process_skb_fields(struct ixgbe_ring *rx_ring,
</span><span class='line'>1676                                      union ixgbe_adv_rx_desc *rx_desc,
</span><span class='line'>1677                                      struct sk_buff *skb)
</span><span class='line'>1678 {
</span><span class='line'>1679         struct net_device *dev = rx_ring-&gt;netdev;
</span><span class='line'>1680
</span><span class='line'>1681         ixgbe_update_rsc_stats(rx_ring, skb);
</span><span class='line'>1682
</span><span class='line'>1683         ixgbe_rx_hash(rx_ring, rx_desc, skb);
</span><span class='line'>1684
</span><span class='line'>1685         ixgbe_rx_checksum(rx_ring, rx_desc, skb);
</span><span class='line'>1686
</span><span class='line'>1687         if (unlikely(ixgbe_test_staterr(rx_desc, IXGBE_RXDADV_STAT_TS)))
</span><span class='line'>1688                 ixgbe_ptp_rx_hwtstamp(rx_ring-&gt;q_vector-&gt;adapter, skb);
</span><span class='line'>1689
</span><span class='line'>1690         if ((dev-&gt;features & NETIF_F_HW_VLAN_CTAG_RX) &&
</span><span class='line'>1691             ixgbe_test_staterr(rx_desc, IXGBE_RXD_STAT_VP)) {
</span><span class='line'>1692                 u16 vid = le16_to_cpu(rx_desc-&gt;wb.upper.vlan);
</span><span class='line'>1693                 __vlan_hwaccel_put_tag(skb, htons(ETH_P_8021Q), vid);
</span><span class='line'>1694         }
</span><span class='line'>1695
</span><span class='line'>1696         skb_record_rx_queue(skb, rx_ring-&gt;queue_index);
</span><span class='line'>1697
</span><span class='line'>1698         skb-&gt;protocol = eth_type_trans(skb, dev);
</span><span class='line'>1699 }</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>3004 static inline void skb_record_rx_queue(struct sk_buff *skb, u16 rx_queue)
</span><span class='line'>3005 {
</span><span class='line'>3006         skb-&gt;queue_mapping = rx_queue + 1;
</span><span class='line'>3007 }</span></code></pre></td></tr></table></div></figure>


<h3><code>dev_queue_xmit</code> select queue</h3>

<p>KEY: ixgbe driver will first check if queue index is recorded(<code>skb-&gt;queue_mapping != 0</code>),
if record, return turn queue index value(<code>skb-&gt;queue_mapping -1</code>).
the queue index value is stored again to <code>skb-&gt;queue_mapping</code> by <code>skb_set_queue_mapping</code> in function <code>netdev_pick_tx</code>.</p>

<h4>call trace</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; dev_queue_xmit
</span><span class='line'>&gt; &gt; __dev_queue_xmit
</span><span class='line'>&gt; &gt; &gt; netdev_pick_tx
</span><span class='line'>&gt; &gt; &gt; &gt; ops-&gt;ndo_select_queue
</span><span class='line'>&gt; &gt; &gt; &gt; ixgbe_select_queue
</span><span class='line'>&gt; &gt; &gt; &gt; &gt; skb_rx_queue_recorded(skb) ? skb_get_rx_queue(skb) : smp_processor_id();
</span><span class='line'>&gt; &gt; &gt; &gt; skb_set_queue_mapping</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>398 struct netdev_queue *netdev_pick_tx(struct net_device *dev,
</span><span class='line'>399                                     struct sk_buff *skb,
</span><span class='line'>400                                     void *accel_priv)
</span><span class='line'>401 {
</span><span class='line'>402         int queue_index = 0;
</span><span class='line'>403
</span><span class='line'>404         if (dev-&gt;real_num_tx_queues != 1) {
</span><span class='line'>405                 const struct net_device_ops *ops = dev-&gt;netdev_ops;
</span><span class='line'>406                 if (ops-&gt;ndo_select_queue)
</span><span class='line'>407                         queue_index = ops-&gt;ndo_select_queue(dev, skb, accel_priv,
</span><span class='line'>408                                                             __netdev_pick_tx);
</span><span class='line'>409                 else
</span><span class='line'>410                         queue_index = __netdev_pick_tx(dev, skb);
</span><span class='line'>411
</span><span class='line'>412                 if (!accel_priv)
</span><span class='line'>413                         queue_index = netdev_cap_txqueue(dev, queue_index);
</span><span class='line'>414         }
</span><span class='line'>415
</span><span class='line'>416         skb_set_queue_mapping(skb, queue_index);
</span><span class='line'>417         return netdev_get_tx_queue(dev, queue_index);
</span><span class='line'>418 }</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>7096 static u16 ixgbe_select_queue(struct net_device *dev, struct sk_buff *skb,
</span><span class='line'>7097                               void *accel_priv, select_queue_fallback_t fallback)
</span><span class='line'>7098 {
</span><span class='line'>7099         struct ixgbe_fwd_adapter *fwd_adapter = accel_priv;
</span><span class='line'>7100 #ifdef IXGBE_FCOE
</span><span class='line'>7101         struct ixgbe_adapter *adapter;
</span><span class='line'>7102         struct ixgbe_ring_feature *f;
</span><span class='line'>7103         int txq;
</span><span class='line'>7104 #endif
</span><span class='line'>7105
</span><span class='line'>7106         if (fwd_adapter)
</span><span class='line'>7107                 return skb-&gt;queue_mapping + fwd_adapter-&gt;tx_base_queue;
</span><span class='line'>7108
</span><span class='line'>7109 #ifdef IXGBE_FCOE
</span><span class='line'>7110
</span><span class='line'>7111         /*
</span><span class='line'>7112          * only execute the code below if protocol is FCoE
</span><span class='line'>7113          * or FIP and we have FCoE enabled on the adapter
</span><span class='line'>7114          */
</span><span class='line'>7115         switch (vlan_get_protocol(skb)) {
</span><span class='line'>7116         case htons(ETH_P_FCOE):
</span><span class='line'>7117         case htons(ETH_P_FIP):
</span><span class='line'>7118                 adapter = netdev_priv(dev);
</span><span class='line'>7119
</span><span class='line'>7120                 if (adapter-&gt;flags & IXGBE_FLAG_FCOE_ENABLED)
</span><span class='line'>7121                         break;
</span><span class='line'>7122         default:
</span><span class='line'>7123                 return fallback(dev, skb);
</span><span class='line'>7124         }
</span><span class='line'>7125
</span><span class='line'>7126         f = &adapter-&gt;ring_feature[RING_F_FCOE];
</span><span class='line'>7127
</span><span class='line'>7128         txq = skb_rx_queue_recorded(skb) ? skb_get_rx_queue(skb) :
</span><span class='line'>7129                                            smp_processor_id();
</span><span class='line'>7130
</span><span class='line'>7131         while (txq &gt;= f-&gt;indices)
</span><span class='line'>7132                 txq -= f-&gt;indices;
</span><span class='line'>7133
</span><span class='line'>7134         return txq + f-&gt;offset;
</span><span class='line'>7135 #else
</span><span class='line'>7136         return fallback(dev, skb);
</span><span class='line'>7137 #endif
</span><span class='line'>7138 }</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2989 static inline void skb_set_queue_mapping(struct sk_buff *skb, u16 queue_mapping)
</span><span class='line'>2990 {
</span><span class='line'>2991         skb-&gt;queue_mapping = queue_mapping;
</span><span class='line'>2992 }</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>3014 static inline bool skb_rx_queue_recorded(const struct sk_buff *skb)
</span><span class='line'>3015 {
</span><span class='line'>3016         return skb-&gt;queue_mapping != 0;
</span><span class='line'>3017 }</span></code></pre></td></tr></table></div></figure>


<h3>xmit skb use selected queue</h3>

<p>use the corresponding queue by the queue index <code>skb-&gt;queue_mapping</code> which is based on 0.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>7298 static netdev_tx_t ixgbe_xmit_frame(struct sk_buff *skb,
</span><span class='line'>7299                                     struct net_device *netdev)
</span><span class='line'>7300 {
</span><span class='line'>7301         return __ixgbe_xmit_frame(skb, netdev, NULL);
</span><span class='line'>7302 }</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>7275 static netdev_tx_t __ixgbe_xmit_frame(struct sk_buff *skb,
</span><span class='line'>7276                                       struct net_device *netdev,
</span><span class='line'>7277                                       struct ixgbe_ring *ring)
</span><span class='line'>7278 {
</span><span class='line'>7279         struct ixgbe_adapter *adapter = netdev_priv(netdev);
</span><span class='line'>7280         struct ixgbe_ring *tx_ring;
</span><span class='line'>7281 
</span><span class='line'>7282         /*
</span><span class='line'>7283          * The minimum packet size for olinfo paylen is 17 so pad the skb
</span><span class='line'>7284          * in order to meet this minimum size requirement.
</span><span class='line'>7285          */
</span><span class='line'>7286         if (unlikely(skb-&gt;len &lt; 17)) {
</span><span class='line'>7287                 if (skb_pad(skb, 17 - skb-&gt;len))
</span><span class='line'>7288                         return NETDEV_TX_OK;
</span><span class='line'>7289                 skb-&gt;len = 17;
</span><span class='line'>7290                 skb_set_tail_pointer(skb, 17);
</span><span class='line'>7291         }
</span><span class='line'>7292 
</span><span class='line'>7293         tx_ring = ring ? ring : adapter-&gt;tx_ring[skb-&gt;queue_mapping];
</span><span class='line'>7294 
</span><span class='line'>7295         return ixgbe_xmit_frame_ring(skb, adapter, tx_ring);
</span><span class='line'>7296 }</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tcpdump Work With Bonding Interface]]></title>
    <link href="http://martinbj2008.github.io/blog/2014/09/14/tcpdump-work-with-bonding-interface/"/>
    <updated>2014-09-14T08:12:00+08:00</updated>
    <id>http://martinbj2008.github.io/blog/2014/09/14/tcpdump-work-with-bonding-interface</id>
    <content type="html"><![CDATA[<h3>test case</h3>

<h4>On redhat5, Why tcpdump could not work on bonding work.</h4>

<p>OS: redhat 5.
There are two 82599 interfaces eth0 and eth1.
These two interfaces are used as slave of bond0,
eth1 is backup of eth0.</p>

<p>We ping the default gateway on test machine.
ping work OK, and tcpdump on bond0 show the icmp request and icmp require packets.
while on eth0 only icmp request, and eth1 has no any packet.</p>

<!-- more -->


<p>It is impossible there is no incoming packet on any physical interface.
Why tcpdump could not capture the packets on eth0.</p>

<h3>analysis</h3>

<p>tcpdump is <code>pf_socket</code> which is based on <code>ptye_all</code>.</p>

<h4>linux V2.6.32</h4>

<p>In linux v2.6.32, there is bond process before <code>ptye_all</code>,
and thus the <code>skb-&gt;dev</code> will be change to <code>bond0</code> from <code>eth0</code>.
so when packet arrive <code>ptye_all</code>, ony match incoming dev <code>bond0</code>.
we has no chance to capture packet on physical interface eth0.</p>

<h4>upstream linux v3.17-rc4</h4>

<p>bond related process is moved to <code>dev-&gt;rx_handler</code>,
Just like the bridge or openvswitch.</p>

<p>Packet will first be processed by <code>ptype_all</code> with <code>skb-&gt;dev</code> is eth0
and then <code>rx_handler</code>(bond handler for eth0,eth1).
if the rx handler return <code>RX_HANDLER_ANOTHER</code>,
the packet arrive by <code>ptye_all</code> again with different<code>skb-&gt;dev</code> (bond0).</p>

<h4>related patch</h4>

<p><a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=5b2c4d">https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=5b2c4d</a>
<a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=63d8ea">https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=63d8ea</a>
<a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=5b2c4dd">https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=5b2c4dd</a></p>

<h5>TODO:</h5>

<p>Test with upstream kernel.</p>

<h3>Redhat source</h3>

<p>redhat source is based on 2.6.32</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2616 int __netif_receive_skb(struct sk_buff *skb)
</span><span class='line'>2617 {
</span><span class='line'>...
</span><span class='line'>2636         if (!skb-&gt;iif)
</span><span class='line'>2637                 skb-&gt;iif = skb-&gt;dev-&gt;ifindex;
</span><span class='line'>2638 
</span><span class='line'>2639         /*
</span><span class='line'>2640          * bonding note: skbs received on inactive slaves should only
</span><span class='line'>2641          * be delivered to pkt handlers that are exact matches.  Also
</span><span class='line'>2642          * the deliver_no_wcard flag will be set.  If packet handlers
</span><span class='line'>2643          * are sensitive to duplicate packets these skbs will need to
</span><span class='line'>2644          * be dropped at the handler.  The vlan accel path may have
</span><span class='line'>2645          * already set the deliver_no_wcard flag.
</span><span class='line'>2646          */
</span><span class='line'>2647 
</span><span class='line'>2648         null_or_orig = NULL;
</span><span class='line'>2649         orig_dev = skb-&gt;dev;
</span><span class='line'>2650         if (skb-&gt;deliver_no_wcard)
</span><span class='line'>2651                 null_or_orig = orig_dev;
</span><span class='line'>2652         else if (orig_dev-&gt;master) {
</span><span class='line'>2653                 if (skb_bond_should_drop(skb)) {
</span><span class='line'>2654                         skb-&gt;deliver_no_wcard = 1;
</span><span class='line'>2655                         null_or_orig = orig_dev; /* deliver only exact match */
</span><span class='line'>2656                 } else
</span><span class='line'>2657                         skb-&gt;dev = orig_dev-&gt;master;
</span><span class='line'>2658         }
</span><span class='line'>...
</span><span class='line'>2677         list_for_each_entry_rcu(ptype, &ptype_all, list) {
</span><span class='line'>2678                 if (ptype-&gt;dev == null_or_orig || ptype-&gt;dev == skb-&gt;dev ||
</span><span class='line'>2679                     ptype-&gt;dev == orig_dev) {
</span><span class='line'>2680                         if (pt_prev)
</span><span class='line'>2681                                 ret = deliver_skb(skb, pt_prev, orig_dev);
</span><span class='line'>2682                         pt_prev = ptype;
</span><span class='line'>2683                 }
</span><span class='line'>2684         }</span></code></pre></td></tr></table></div></figure>


<h4>upstream linux V3.16</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>3579 static int __netif_receive_skb_core(struct sk_buff *skb, bool pfmemalloc)
</span><span class='line'>3580 {
</span><span class='line'>...
</span><span class='line'>3604 another_round:
</span><span class='line'>...
</span><span class='line'>3626         list_for_each_entry_rcu(ptype, &ptype_all, list) {
</span><span class='line'>3627                 if (!ptype-&gt;dev || ptype-&gt;dev == skb-&gt;dev) {
</span><span class='line'>3628                         if (pt_prev)
</span><span class='line'>3629                                 ret = deliver_skb(skb, pt_prev, orig_dev);
</span><span class='line'>3630                         pt_prev = ptype;
</span><span class='line'>3631                 }
</span><span class='line'>3632         }
</span><span class='line'>3633
</span><span class='line'>3634 skip_taps:
</span><span class='line'>3635 #ifdef CONFIG_NET_CLS_ACT
</span><span class='line'>3636         skb = handle_ing(skb, &pt_prev, &ret, orig_dev);
</span><span class='line'>3637         if (!skb)
</span><span class='line'>3638                 goto unlock;
</span><span class='line'>3639 ncls:
</span><span class='line'>3640 #endif
</span><span class='line'>3641
</span><span class='line'>...
</span><span class='line'>3656         rx_handler = rcu_dereference(skb-&gt;dev-&gt;rx_handler);
</span><span class='line'>3657         if (rx_handler) {
</span><span class='line'>3658                 if (pt_prev) {
</span><span class='line'>3659                         ret = deliver_skb(skb, pt_prev, orig_dev);
</span><span class='line'>3660                         pt_prev = NULL;
</span><span class='line'>3661                 }
</span><span class='line'>3662                 switch (rx_handler(&skb)) {
</span><span class='line'>3663                 case RX_HANDLER_CONSUMED:
</span><span class='line'>3664                         ret = NET_RX_SUCCESS;
</span><span class='line'>3665                         goto unlock;
</span><span class='line'>3666                 case RX_HANDLER_ANOTHER:
</span><span class='line'>3667                         goto another_round;
</span><span class='line'>3668                 case RX_HANDLER_EXACT:
</span><span class='line'>3669                         deliver_exact = true;
</span><span class='line'>3670                 case RX_HANDLER_PASS:
</span><span class='line'>3671                         break;
</span><span class='line'>3672                 default:
</span><span class='line'>3673                         BUG();
</span><span class='line'>3674                 }
</span><span class='line'>3675         }</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Select Source Ip for a Tcp Socket]]></title>
    <link href="http://martinbj2008.github.io/blog/2014/07/31/how-to-select-source-ip-for-a-tcp-socket/"/>
    <updated>2014-07-31T09:06:00+08:00</updated>
    <id>http://martinbj2008.github.io/blog/2014/07/31/how-to-select-source-ip-for-a-tcp-socket</id>
    <content type="html"><![CDATA[<h1>#</h1>

<p>This question should be divided into two parts.</p>

<h3>Part 1: adding a route</h3>

<h4>Add a direct(link) route</h4>

<h4>Add a route with gateway</h4>

<h3>create a socket</h3>

<h4>for example &lsquo;connect&rsquo; system call</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Register Irq Handler]]></title>
    <link href="http://martinbj2008.github.io/blog/2014/07/17/register-irq-handler/"/>
    <updated>2014-07-17T11:41:00+08:00</updated>
    <id>http://martinbj2008.github.io/blog/2014/07/17/register-irq-handler</id>
    <content type="html"><![CDATA[<h3>call trace</h3>

<p>以<code>handle_level_irq</code>为例说明.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>===&gt; handle_level_irq
</span><span class='line'>==&gt; ==&gt; handle_irq_event
</span><span class='line'>==&gt; ==&gt; ==&gt; handle_irq_event_percpu
</span><span class='line'>==&gt; ==&gt; ==&gt; ==&gt;action-&gt;handler</span></code></pre></td></tr></table></div></figure>


<h4>where handler is registered</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>127 static inline int __must_check
</span><span class='line'>128 request_irq(unsigned int irq, irq_handler_t handler, unsigned long flags,
</span><span class='line'>129             const char *name, void *dev)
</span><span class='line'>130 {
</span><span class='line'>131         return request_threaded_irq(irq, handler, NULL, flags, name, dev);
</span><span class='line'>132 }</span></code></pre></td></tr></table></div></figure>


<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1473 int request_threaded_irq(unsigned int irq, irq_handler_t handler,
</span><span class='line'>1474                          irq_handler_t thread_fn, unsigned long irqflags,
</span><span class='line'>1475                          const char *devname, void *dev_id)
</span><span class='line'>1476 {
</span><span class='line'>1477         struct irqaction *action;
</span><span class='line'>1478         struct irq_desc *desc;
</span><span class='line'>1479         int retval;
</span><span class='line'>1480
</span><span class='line'>1481         /*
</span><span class='line'>1482          * Sanity-check: shared interrupts must pass in a real dev-ID,
</span><span class='line'>1483          * otherwise we'll have trouble later trying to figure out
</span><span class='line'>1484          * which interrupt is which (messes up the interrupt freeing
</span><span class='line'>1485          * logic etc).
</span><span class='line'>1486          */
</span><span class='line'>1487         if ((irqflags & IRQF_SHARED) && !dev_id)
</span><span class='line'>1488                 return -EINVAL;
</span><span class='line'>1489
</span><span class='line'>1490         desc = irq_to_desc(irq);
</span><span class='line'>1491         if (!desc)
</span><span class='line'>1492                 return -EINVAL;
</span><span class='line'>1493
</span><span class='line'>1494         if (!irq_settings_can_request(desc) ||
</span><span class='line'>1495             WARN_ON(irq_settings_is_per_cpu_devid(desc)))
</span><span class='line'>1496                 return -EINVAL;
</span><span class='line'>1497
</span><span class='line'>1498         if (!handler) {
</span><span class='line'>1499                 if (!thread_fn)
</span><span class='line'>1500                         return -EINVAL;
</span><span class='line'>1501                 handler = irq_default_primary_handler;
</span><span class='line'>1502         }
</span><span class='line'>1503
</span><span class='line'>1504         action = kzalloc(sizeof(struct irqaction), GFP_KERNEL);
</span><span class='line'>1505         if (!action)
</span><span class='line'>1506                 return -ENOMEM;
</span><span class='line'>1507
</span><span class='line'>1508         action-&gt;handler = handler;
</span><span class='line'>1509         action-&gt;thread_fn = thread_fn;
</span><span class='line'>1510         action-&gt;flags = irqflags;
</span><span class='line'>1511         action-&gt;name = devname;
</span><span class='line'>1512         action-&gt;dev_id = dev_id;
</span><span class='line'>1513
</span><span class='line'>1514         chip_bus_lock(desc);
</span><span class='line'>1515         retval = __setup_irq(irq, desc, action);
</span><span class='line'>1516         chip_bus_sync_unlock(desc);
</span><span class='line'>1517
</span><span class='line'>1518         if (retval)
</span><span class='line'>1519                 kfree(action);
</span><span class='line'>1520
</span><span class='line'>1521 #ifdef CONFIG_DEBUG_SHIRQ_FIXME
</span><span class='line'>1522         if (!retval && (irqflags & IRQF_SHARED)) {
</span><span class='line'>1523                 /*
</span><span class='line'>1524                  * It's a shared IRQ -- the driver ought to be prepared for it
</span><span class='line'>1525                  * to happen immediately, so let's make sure....
</span><span class='line'>1526                  * We disable the irq to make sure that a 'real' IRQ doesn't
</span><span class='line'>1527                  * run in parallel with our fake.
</span><span class='line'>1528                  */
</span><span class='line'>1529                 unsigned long flags;
</span><span class='line'>1530
</span><span class='line'>1531                 disable_irq(irq);
</span><span class='line'>1532                 local_irq_save(flags);
</span><span class='line'>1533
</span><span class='line'>1534                 handler(irq, dev_id);
</span><span class='line'>1535
</span><span class='line'>1536                 local_irq_restore(flags);
</span><span class='line'>1537                 enable_irq(irq);
</span><span class='line'>1538         }
</span><span class='line'>1539 #endif
</span><span class='line'>1540         return retval;
</span><span class='line'>1541 }
</span><span class='line'>1542 EXPORT_SYMBOL(request_threaded_irq);
</span></code></pre></td></tr></table></div></figure>


<h4>how to call the handler function</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>409 void
</span><span class='line'>410 handle_level_irq(unsigned int irq, struct irq_desc *desc)
</span><span class='line'>411 {
</span><span class='line'>412         raw_spin_lock(&desc-&gt;lock);
</span><span class='line'>413         mask_ack_irq(desc);
</span><span class='line'>414
</span><span class='line'>415         if (unlikely(irqd_irq_inprogress(&desc-&gt;irq_data)))
</span><span class='line'>416                 if (!irq_check_poll(desc))
</span><span class='line'>417                         goto out_unlock;
</span><span class='line'>418
</span><span class='line'>419         desc-&gt;istate &= ~(IRQS_REPLAY | IRQS_WAITING);
</span><span class='line'>420         kstat_incr_irqs_this_cpu(irq, desc);
</span><span class='line'>421
</span><span class='line'>422         /*
</span><span class='line'>423          * If its disabled or no action available
</span><span class='line'>424          * keep it masked and get out of here
</span><span class='line'>425          */
</span><span class='line'>426         if (unlikely(!desc-&gt;action || irqd_irq_disabled(&desc-&gt;irq_data))) {
</span><span class='line'>427                 desc-&gt;istate |= IRQS_PENDING;
</span><span class='line'>428                 goto out_unlock;
</span><span class='line'>429         }
</span><span class='line'>430
</span><span class='line'>431         handle_irq_event(desc);
</span><span class='line'>432
</span><span class='line'>433         cond_unmask_irq(desc);
</span><span class='line'>434
</span><span class='line'>435 out_unlock:
</span><span class='line'>436         raw_spin_unlock(&desc-&gt;lock);
</span><span class='line'>437 }
</span><span class='line'>438 EXPORT_SYMBOL_GPL(handle_level_irq);</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>183 irqreturn_t handle_irq_event(struct irq_desc *desc)
</span><span class='line'>184 {
</span><span class='line'>185         struct irqaction *action = desc-&gt;action;
</span><span class='line'>186         irqreturn_t ret;
</span><span class='line'>187
</span><span class='line'>188         desc-&gt;istate &= ~IRQS_PENDING;
</span><span class='line'>189         irqd_set(&desc-&gt;irq_data, IRQD_IRQ_INPROGRESS);
</span><span class='line'>190         raw_spin_unlock(&desc-&gt;lock);
</span><span class='line'>191
</span><span class='line'>192         ret = handle_irq_event_percpu(desc, action);
</span><span class='line'>193
</span><span class='line'>194         raw_spin_lock(&desc-&gt;lock);
</span><span class='line'>195         irqd_clear(&desc-&gt;irq_data, IRQD_IRQ_INPROGRESS);
</span><span class='line'>196         return ret;
</span><span class='line'>197 }</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>133 irqreturn_t
</span><span class='line'>134 handle_irq_event_percpu(struct irq_desc *desc, struct irqaction *action)
</span><span class='line'>135 {
</span><span class='line'>136         irqreturn_t retval = IRQ_NONE;
</span><span class='line'>137         unsigned int flags = 0, irq = desc-&gt;irq_data.irq;
</span><span class='line'>138
</span><span class='line'>139         do {
</span><span class='line'>140                 irqreturn_t res;
</span><span class='line'>141
</span><span class='line'>142                 trace_irq_handler_entry(irq, action);
</span><span class='line'>143                 res = action-&gt;handler(irq, action-&gt;dev_id);
</span><span class='line'>144                 trace_irq_handler_exit(irq, action, res);
</span><span class='line'>145
</span><span class='line'>146                 if (WARN_ONCE(!irqs_disabled(),"irq %u handler %pF enabled interrupts\n",
</span><span class='line'>147                               irq, action-&gt;handler))
</span><span class='line'>148                         local_irq_disable();
</span><span class='line'>149
</span><span class='line'>150                 switch (res) {
</span><span class='line'>151                 case IRQ_WAKE_THREAD:
</span><span class='line'>152                         /*
</span><span class='line'>153                          * Catch drivers which return WAKE_THREAD but
</span><span class='line'>154                          * did not set up a thread function
</span><span class='line'>155                          */
</span><span class='line'>156                         if (unlikely(!action-&gt;thread_fn)) {
</span><span class='line'>157                                 warn_no_thread(irq, action);
</span><span class='line'>158                                 break;
</span><span class='line'>159                         }
</span><span class='line'>160
</span><span class='line'>161                         __irq_wake_thread(desc, action);
</span><span class='line'>162
</span><span class='line'>163                         /* Fall through to add to randomness */
</span><span class='line'>164                 case IRQ_HANDLED:
</span><span class='line'>165                         flags |= action-&gt;flags;
</span><span class='line'>166                         break;
</span><span class='line'>167
</span><span class='line'>168                 default:
</span><span class='line'>169                         break;
</span><span class='line'>170                 }
</span><span class='line'>171
</span><span class='line'>172                 retval |= res;
</span><span class='line'>173                 action = action-&gt;next;
</span><span class='line'>174         } while (action);
</span><span class='line'>175
</span><span class='line'>176         add_interrupt_randomness(irq, flags);
</span><span class='line'>177
</span><span class='line'>178         if (!noirqdebug)
</span><span class='line'>179                 note_interrupt(irq, desc, retval);
</span><span class='line'>180         return retval;
</span><span class='line'>181 }</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Irq Vector]]></title>
    <link href="http://martinbj2008.github.io/blog/2014/07/17/irq-study/"/>
    <updated>2014-07-17T10:35:00+08:00</updated>
    <id>http://martinbj2008.github.io/blog/2014/07/17/irq-study</id>
    <content type="html"><![CDATA[<h3>中断处理过程：</h3>

<p>reg value&ndash;>irq(int) &mdash;> struct irq_desc</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>==&gt; 中断时的有一个寄存器会保存中断源的vector值.
</span><span class='line'>==&gt; ==&gt; `arch/x86/kernel/entry_64.S`调用函数`do_IRQ`.
</span><span class='line'>==&gt; ==&gt; ==&gt; `do_IRQ`依据`vector_irq`和vector值, 找到对应的中断号,并调用`handle_irq`.
</span><span class='line'>==&gt; ==&gt; ==&gt; ==&gt; `handle_irq`通过函数irq_to_descdesc,可将中断号转化为`struct irq_desc`.
</span><span class='line'>==&gt; ==&gt; ==&gt; ==&gt; generic_handle_irq_desc(irq, desc);
</span><span class='line'>==&gt; ==&gt; ==&gt; ==&gt; ==&gt; `generic_handle_irq_desc`调用 desc-&gt;handle_irq(irq, desc);</span></code></pre></td></tr></table></div></figure>


<p>注:这里的handle_irq不是真正的中断处理函数,而是几大类中断控制器处理函数.
如82599, msi等.</p>

<h4>`do_IRQ(struct pt_regs *regs)</h4>

<p>File: arch/x86/kernel/irq.c</p>

<p>arch/x86/kernel/entry_64.S
will call do_IRQ</p>

<!-- more -->


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>187 __visible unsigned int __irq_entry do_IRQ(struct pt_regs *regs)
</span><span class='line'>188 {
</span><span class='line'>189         struct pt_regs *old_regs = set_irq_regs(regs);
</span><span class='line'>190
</span><span class='line'>191         /* high bit used in ret_from_ code  */
</span><span class='line'>192         unsigned vector = ~regs-&gt;orig_ax;
</span><span class='line'>193         unsigned irq;
</span><span class='line'>194
</span><span class='line'>195         irq_enter();
</span><span class='line'>196         exit_idle();
</span><span class='line'>197
</span><span class='line'>198         irq = __this_cpu_read(vector_irq[vector]);
</span><span class='line'>199
</span><span class='line'>200         if (!handle_irq(irq, regs)) {
</span><span class='line'>201                 ack_APIC_irq();
</span><span class='line'>202
</span><span class='line'>203                 if (irq != VECTOR_RETRIGGERED) {
</span><span class='line'>204                         pr_emerg_ratelimited("%s: %d.%d No irq handler for vector (irq %d)\n",
</span><span class='line'>205                                              __func__, smp_processor_id(),
</span><span class='line'>206                                              vector, irq);
</span><span class='line'>207                 } else {
</span><span class='line'>208                         __this_cpu_write(vector_irq[vector], VECTOR_UNDEFINED);
</span><span class='line'>209                 }
</span><span class='line'>210         }
</span><span class='line'>211
</span><span class='line'>212         irq_exit();
</span><span class='line'>213
</span><span class='line'>214         set_irq_regs(old_regs);
</span><span class='line'>215         return 1;
</span><span class='line'>216 }</span></code></pre></td></tr></table></div></figure>


<h4><code>bool handle_irq(unsigned irq, struct pt_regs *regs)</code></h4>

<p>arch/x86/kernel/irq_64.c</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> 77 bool handle_irq(unsigned irq, struct pt_regs *regs)
</span><span class='line'> 78 {
</span><span class='line'> 79         struct irq_desc *desc;
</span><span class='line'> 80
</span><span class='line'> 81         stack_overflow_check(regs);
</span><span class='line'> 82
</span><span class='line'> 83         desc = irq_to_desc(irq);
</span><span class='line'> 84         if (unlikely(!desc))
</span><span class='line'> 85                 return false;
</span><span class='line'> 86
</span><span class='line'> 87         generic_handle_irq_desc(irq, desc);
</span><span class='line'> 88         return true;
</span><span class='line'> 89 }</span></code></pre></td></tr></table></div></figure>


<h4><code>generic_handle_irq_desc</code></h4>

<p>include/linux/irqdesc.h</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>114 static inline void generic_handle_irq_desc(unsigned int irq, struct irq_desc *desc)
</span><span class='line'>115 {
</span><span class='line'>116         desc-&gt;handle_irq(irq, desc);
</span><span class='line'>117 }</span></code></pre></td></tr></table></div></figure>


<h3>desc里的<code>handle_irq</code>对应哪些函数?</h3>

<p><code>handle_level_irq</code>和<code>handle_edge_irq</code>等</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>arch/x86/kernel/i8259.c:    irq_set_chip_and_handler_name(irq, &i8259A_chip, handle_level_irq,
</span><span class='line'>arch/x86/kernel/apic/io_apic.c:   irq_set_chip_and_handler_name(irq, chip, hdl,
</span><span class='line'>arch/x86/kernel/apic/io_apic.c:   irq_set_chip_and_handler_name(0, &ioapic_chip, handle_edge_irq,
</span><span class='line'>arch/x86/kernel/apic/io_apic.c:   irq_set_chip_and_handler_name(irq, &lapic_chip, handle_edge_irq,
</span><span class='line'>arch/x86/kernel/apic/io_apic.c:   irq_set_chip_and_handler_name(irq, chip, handle_edge_irq, "edge");
</span><span class='line'>arch/x86/kernel/apic/io_apic.c:   irq_set_chip_and_handler_name(irq, &dmar_msi_type, handle_edge_irq,
</span><span class='line'>arch/x86/kernel/apic/io_apic.c:   irq_set_chip_and_handler_name(irq, chip, handle_edge_irq, "edge");
</span><span class='line'>arch/x86/kernel/apic/io_apic.c:   irq_set_chip_and_handler_name(irq, &ht_irq_chip,
</span><span class='line'>arch/x86/kernel/apic/io_apic.c:   irq_set_chip_and_handler_name(0, &ioapic_chip, handle_edge_irq,
</span><span class='line'>arch/x86/kernel/irqinit.c:    irq_set_chip_and_handler_name(i, chip, handle_level_irq, name);</span></code></pre></td></tr></table></div></figure>


<h4>for example:  8259A</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>==&gt; make_8259A_irq
</span><span class='line'>==&gt; ==&gt; irq_set_chip_and_handler
</span><span class='line'>==&gt; ==&gt; ==&gt; irq_set_chip_and_handler_name
</span><span class='line'>==&gt; ==&gt; ==&gt; ==&gt; irq_set_chip
</span><span class='line'>==&gt; ==&gt; ==&gt; ==&gt; ==&gt; desc = irq_get_desc_buslock
</span><span class='line'>==&gt; ==&gt; ==&gt; ==&gt; __irq_set_handler
</span><span class='line'>==&gt; ==&gt; ==&gt; ==&gt; ==&gt; desc = irq_get_desc_buslock
</span><span class='line'>==&gt; ==&gt; ==&gt; ==&gt; ==&gt; desc-&gt;handle_irq = handle</span></code></pre></td></tr></table></div></figure>


<h5><code>make_8259A_irq</code></h5>

<p>arch/x86/kernel/i8259.c</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>107 void make_8259A_irq(unsigned int irq)
</span><span class='line'>108 {
</span><span class='line'>109         disable_irq_nosync(irq);
</span><span class='line'>110         irq_set_chip_and_handler(irq, &i8259A_chip, handle_level_irq);
</span><span class='line'>111         enable_irq(irq);
</span><span class='line'>112 }</span></code></pre></td></tr></table></div></figure>


<h4><code>irq_set_chip_and_handler</code></h4>

<p>include/linux/irq.h</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>452 static inline void irq_set_chip_and_handler(unsigned int irq, struct irq_chip *chip,
</span><span class='line'>453                                             irq_flow_handler_t handle)
</span><span class='line'>454 {
</span><span class='line'>455         irq_set_chip_and_handler_name(irq, chip, handle, NULL);
</span><span class='line'>456 }</span></code></pre></td></tr></table></div></figure>


<h4><code>irq_set_chip_and_handler_name</code></h4>

<p>kernel/irq/chip.c</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>726 void
</span><span class='line'>727 irq_set_chip_and_handler_name(unsigned int irq, struct irq_chip *chip,
</span><span class='line'>728                               irq_flow_handler_t handle, const char *name)
</span><span class='line'>729 {
</span><span class='line'>730         irq_set_chip(irq, chip);
</span><span class='line'>731         __irq_set_handler(irq, handle, 0, name);
</span><span class='line'>732 }
</span><span class='line'>733 EXPORT_SYMBOL_GPL(irq_set_chip_and_handler_name);</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> 23 /**
</span><span class='line'> 24  *      irq_set_chip - set the irq chip for an irq
</span><span class='line'> 25  *      @irq:   irq number
</span><span class='line'> 26  *      @chip:  pointer to irq chip description structure
</span><span class='line'> 27  */
</span><span class='line'> 28 int irq_set_chip(unsigned int irq, struct irq_chip *chip)
</span><span class='line'> 29 {
</span><span class='line'> 30         unsigned long flags;
</span><span class='line'> 31         struct irq_desc *desc = irq_get_desc_lock(irq, &flags, 0);
</span><span class='line'> 32 
</span><span class='line'> 33         if (!desc)
</span><span class='line'> 34                 return -EINVAL;
</span><span class='line'> 35 
</span><span class='line'> 36         if (!chip)
</span><span class='line'> 37                 chip = &no_irq_chip;
</span><span class='line'> 38 
</span><span class='line'> 39         desc-&gt;irq_data.chip = chip;
</span><span class='line'> 40         irq_put_desc_unlock(desc, flags);
</span><span class='line'> 41         /*
</span><span class='line'> 42          * For !CONFIG_SPARSE_IRQ make the irq show up in
</span><span class='line'> 43          * allocated_irqs.
</span><span class='line'> 44          */
</span><span class='line'> 45         irq_mark_irq(irq);
</span><span class='line'> 46         return 0;
</span><span class='line'> 47 }  
</span><span class='line'> 48 EXPORT_SYMBOL(irq_set_chip);</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>688 void
</span><span class='line'>689 __irq_set_handler(unsigned int irq, irq_flow_handler_t handle, int is_chained,
</span><span class='line'>690                   const char *name)
</span><span class='line'>691 {
</span><span class='line'>692         unsigned long flags;
</span><span class='line'>693         struct irq_desc *desc = irq_get_desc_buslock(irq, &flags, 0);
</span><span class='line'>694
</span><span class='line'>695         if (!desc)
</span><span class='line'>696                 return;
</span><span class='line'>697
</span><span class='line'>698         if (!handle) {
</span><span class='line'>699                 handle = handle_bad_irq;
</span><span class='line'>700         } else {
</span><span class='line'>701                 if (WARN_ON(desc-&gt;irq_data.chip == &no_irq_chip))
</span><span class='line'>702                         goto out;
</span><span class='line'>703         }
</span><span class='line'>704
</span><span class='line'>705         /* Uninstall? */
</span><span class='line'>706         if (handle == handle_bad_irq) {
</span><span class='line'>707                 if (desc-&gt;irq_data.chip != &no_irq_chip)
</span><span class='line'>708                         mask_ack_irq(desc);
</span><span class='line'>709                 irq_state_set_disabled(desc);
</span><span class='line'>710                 desc-&gt;depth = 1;
</span><span class='line'>711         }
</span><span class='line'>712         desc-&gt;handle_irq = handle;
</span><span class='line'>713         desc-&gt;name = name;
</span><span class='line'>714
</span><span class='line'>715         if (handle != handle_bad_irq && is_chained) {
</span><span class='line'>716                 irq_settings_set_noprobe(desc);
</span><span class='line'>717                 irq_settings_set_norequest(desc);
</span><span class='line'>718                 irq_settings_set_nothread(desc);
</span><span class='line'>719                 irq_startup(desc, true);
</span><span class='line'>720         }
</span><span class='line'>721 out:
</span><span class='line'>722         irq_put_desc_busunlock(desc, flags);
</span><span class='line'>723 }
</span><span class='line'>724 EXPORT_SYMBOL_GPL(__irq_set_handler);</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Irq Framework]]></title>
    <link href="http://martinbj2008.github.io/blog/2014/07/17/irq-framework/"/>
    <updated>2014-07-17T10:35:00+08:00</updated>
    <id>http://martinbj2008.github.io/blog/2014/07/17/irq-framework</id>
    <content type="html"><![CDATA[<h3>中断处理过程：</h3>

<h4>硬件中断到中断控制器</h4>

<p>reg value&ndash;>irq(int) &mdash;> struct irq_desc</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>==&gt; 中断时的有一个寄存器会保存中断源的vector值.
</span><span class='line'>==&gt; ==&gt; `arch/x86/kernel/entry_64.S`调用函数`do_IRQ`.
</span><span class='line'>==&gt; ==&gt; ==&gt; `do_IRQ`依据`vector_irq`和vector值, 找到对应的中断号,并调用`handle_irq`.
</span><span class='line'>==&gt; ==&gt; ==&gt; ==&gt; `handle_irq`通过函数irq_to_descdesc,可将中断号转化为`struct irq_desc`.
</span><span class='line'>==&gt; ==&gt; ==&gt; ==&gt; generic_handle_irq_desc(irq, desc);
</span><span class='line'>==&gt; ==&gt; ==&gt; ==&gt; ==&gt; `generic_handle_irq_desc`调用 desc-&gt;handle_irq(irq, desc);</span></code></pre></td></tr></table></div></figure>


<p>注:这里的handle_irq不是真正的中断处理函数,而是几大类中断控制器处理函数.
如82599, msi等.
具体分析见:<a href="http://martinbj2008.github.io/blog/2014/07/17/irq-study">irq study1</a></p>

<h4>中断控制器到具体的中断处理函数</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>==&gt; handle_level_irq
</span><span class='line'>==&gt; ==&gt; irqreturn_t handle_irq_event(struct irq_desc *desc)
</span><span class='line'>==&gt; ==&gt; ==&gt; struct irqaction *action = desc-&gt;action
</span><span class='line'>==&gt; ==&gt; ==&gt; ret = handle_irq_event_percpu(desc, action);
</span><span class='line'>==&gt; ==&gt; ==&gt; ==&gt; action-&gt;handler(irq, action-&gt;dev_id);</span></code></pre></td></tr></table></div></figure>


<p>这里的<code>action-&gt;handler</code>才是我们使用<code>request_irq</code>注册的中断处理函数.
具体分析见:
具体分析见:<a href="http://martinbj2008.github.io/blog/2014/07/17/register-irq-handler">irq study2</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Delayed Work: Dst_gc_work]]></title>
    <link href="http://martinbj2008.github.io/blog/2014/02/18/dst-gc-work/"/>
    <updated>2014-02-18T15:26:00+08:00</updated>
    <id>http://martinbj2008.github.io/blog/2014/02/18/dst-gc-work</id>
    <content type="html"><![CDATA[<h3>summary</h3>

<p>A delayed work will first start a timer,
and when timeout, the delayed work will be put a <code>worker_pool</code>&rsquo;s
<code>worklist</code> or a <code>pool_workqueue</code>&rsquo;s <code>delayed_works</code></p>

<h3>how to use delayed work</h3>

<h4>data structure</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">113</span> <span class="k">struct</span> <span class="n">delayed_work</span> <span class="p">{</span>
</span><span class='line'><span class="mi">114</span>         <span class="k">struct</span> <span class="n">work_struct</span> <span class="n">work</span><span class="p">;</span>
</span><span class='line'><span class="mi">115</span>         <span class="k">struct</span> <span class="n">timer_list</span> <span class="n">timer</span><span class="p">;</span>
</span><span class='line'><span class="mi">116</span>
</span><span class='line'><span class="mi">117</span>         <span class="cm">/* target workqueue and CPU -&gt;timer uses to queue -&gt;work */</span>
</span><span class='line'><span class="mi">118</span>         <span class="k">struct</span> <span class="n">workqueue_struct</span> <span class="o">*</span><span class="n">wq</span><span class="p">;</span>
</span><span class='line'><span class="mi">119</span>         <span class="kt">int</span> <span class="n">cpu</span><span class="p">;</span>
</span><span class='line'><span class="mi">120</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">157</span> <span class="err">#</span><span class="n">define</span> <span class="n">__WORK_INITIALIZER</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span> <span class="p">{</span>                                      \
</span><span class='line'><span class="mi">158</span>         <span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">WORK_DATA_STATIC_INIT</span><span class="p">(),</span>                                \
</span><span class='line'><span class="mi">159</span>         <span class="p">.</span><span class="n">entry</span>  <span class="o">=</span> <span class="p">{</span> <span class="o">&amp;</span><span class="p">(</span><span class="n">n</span><span class="p">).</span><span class="n">entry</span><span class="p">,</span> <span class="o">&amp;</span><span class="p">(</span><span class="n">n</span><span class="p">).</span><span class="n">entry</span> <span class="p">},</span>                           \
</span><span class='line'><span class="mi">160</span>         <span class="p">.</span><span class="n">func</span> <span class="o">=</span> <span class="p">(</span><span class="n">f</span><span class="p">),</span>                                                    \
</span><span class='line'><span class="mi">161</span>         <span class="n">__WORK_INIT_LOCKDEP_MAP</span><span class="p">(</span><span class="err">#</span><span class="n">n</span><span class="p">,</span> <span class="o">&amp;</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>                               \
</span><span class='line'><span class="mi">162</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">163</span>
</span><span class='line'><span class="mi">164</span> <span class="err">#</span><span class="n">define</span> <span class="n">__DELAYED_WORK_INITIALIZER</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">tflags</span><span class="p">)</span> <span class="p">{</span>                      \
</span><span class='line'><span class="mi">165</span>         <span class="p">.</span><span class="n">work</span> <span class="o">=</span> <span class="n">__WORK_INITIALIZER</span><span class="p">((</span><span class="n">n</span><span class="p">).</span><span class="n">work</span><span class="p">,</span> <span class="p">(</span><span class="n">f</span><span class="p">)),</span>                      \
</span><span class='line'><span class="mi">166</span>         <span class="p">.</span><span class="n">timer</span> <span class="o">=</span> <span class="n">__TIMER_INITIALIZER</span><span class="p">(</span><span class="n">delayed_work_timer_fn</span><span class="p">,</span>             \
</span><span class='line'><span class="mi">167</span>                                      <span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="o">&amp;</span><span class="p">(</span><span class="n">n</span><span class="p">),</span>            \
</span><span class='line'><span class="mi">168</span>                                      <span class="p">(</span><span class="n">tflags</span><span class="p">)</span> <span class="o">|</span> <span class="n">TIMER_IRQSAFE</span><span class="p">),</span>         \
</span><span class='line'><span class="mi">169</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">170</span>
</span><span class='line'><span class="mi">171</span> <span class="err">#</span><span class="n">define</span> <span class="n">DECLARE_WORK</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>                                              \
</span><span class='line'><span class="mi">172</span>         <span class="k">struct</span> <span class="n">work_struct</span> <span class="n">n</span> <span class="o">=</span> <span class="n">__WORK_INITIALIZER</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
</span><span class='line'><span class="mi">173</span>
</span><span class='line'><span class="mi">174</span> <span class="err">#</span><span class="n">define</span> <span class="n">DECLARE_DELAYED_WORK</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>                                      \
</span><span class='line'><span class="mi">175</span>         <span class="k">struct</span> <span class="n">delayed_work</span> <span class="n">n</span> <span class="o">=</span> <span class="n">__DELAYED_WORK_INITIALIZER</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>defination</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="mi">52</span> <span class="k">static</span> <span class="kt">void</span> <span class="nf">dst_gc_task</span><span class="p">(</span><span class="k">struct</span> <span class="n">work_struct</span> <span class="o">*</span><span class="n">work</span><span class="p">);</span>
</span><span class='line'> <span class="mi">55</span> <span class="k">static</span> <span class="nf">DECLARE_DELAYED_WORK</span><span class="p">(</span><span class="n">dst_gc_work</span><span class="p">,</span> <span class="n">dst_gc_task</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="mi">63</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">dst_gc_task</span><span class="p">(</span><span class="k">struct</span> <span class="n">work_struct</span> <span class="o">*</span><span class="n">work</span><span class="p">)</span>
</span><span class='line'> <span class="mi">64</span> <span class="p">{</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<h4>api to schedule workqueue.</h4>

<p><code>schedule_delayed_work</code> will put the work into a <code>struct work_pool</code>&rsquo;s <code>worklist</code>
or a <code>pool_workqueue</code>&rsquo;s <code>delayed_works</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">586</span> <span class="cm">/**</span>
</span><span class='line'><span class="cm">587  * schedule_delayed_work - put work task in global workqueue after delay</span>
</span><span class='line'><span class="cm">588  * @dwork: job to be done</span>
</span><span class='line'><span class="cm">589  * @delay: number of jiffies to wait or 0 for immediate execution</span>
</span><span class='line'><span class="cm">590  *</span>
</span><span class='line'><span class="cm">591  * After waiting for a given time this puts a job in the kernel-global</span>
</span><span class='line'><span class="cm">592  * workqueue.</span>
</span><span class='line'><span class="cm">593  */</span>
</span><span class='line'><span class="mi">594</span> <span class="k">static</span> <span class="kr">inline</span> <span class="kt">bool</span> <span class="n">schedule_delayed_work</span><span class="p">(</span><span class="k">struct</span> <span class="n">delayed_work</span> <span class="o">*</span><span class="n">dwork</span><span class="p">,</span>
</span><span class='line'><span class="mi">595</span>                                          <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">delay</span><span class="p">)</span>
</span><span class='line'><span class="mi">596</span> <span class="p">{</span>
</span><span class='line'><span class="mi">597</span>         <span class="k">return</span> <span class="n">queue_delayed_work</span><span class="p">(</span><span class="n">system_wq</span><span class="p">,</span> <span class="n">dwork</span><span class="p">,</span> <span class="n">delay</span><span class="p">);</span>
</span><span class='line'><span class="mi">598</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="mi">138</span>                 <span class="n">schedule_delayed_work</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dst_gc_work</span><span class="p">,</span> <span class="n">expires</span><span class="p">);</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<h4>call trace</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&gt;</span> <span class="n">schedule_delayed_work</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">queue_delayed_work</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">queue_delayed_work_on</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">__queue_delayed_work</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">start</span> <span class="n">a</span> <span class="n">timer</span> <span class="n">with</span> <span class="n">timer</span> <span class="n">function</span> <span class="n">delayed_work_timer_fn</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">delayed_work_timer_fn</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">__queue_work</span>
</span></code></pre></td></tr></table></div></figure>


<h4>core function <code>__queue_work</code></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">1314</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">__queue_work</span><span class="p">(</span><span class="kt">int</span> <span class="n">cpu</span><span class="p">,</span> <span class="k">struct</span> <span class="n">workqueue_struct</span> <span class="o">*</span><span class="n">wq</span><span class="p">,</span>
</span><span class='line'><span class="mi">1315</span>                          <span class="k">struct</span> <span class="n">work_struct</span> <span class="o">*</span><span class="n">work</span><span class="p">)</span>
</span><span class='line'><span class="mi">1316</span> <span class="p">{</span>
</span><span class='line'><span class="mi">1317</span>         <span class="k">struct</span> <span class="n">pool_workqueue</span> <span class="o">*</span><span class="n">pwq</span><span class="p">;</span>
</span><span class='line'><span class="mi">1318</span>         <span class="k">struct</span> <span class="n">worker_pool</span> <span class="o">*</span><span class="n">last_pool</span><span class="p">;</span>
</span><span class='line'><span class="mi">1319</span>         <span class="k">struct</span> <span class="n">list_head</span> <span class="o">*</span><span class="n">worklist</span><span class="p">;</span>
</span><span class='line'><span class="mi">1320</span>         <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">work_flags</span><span class="p">;</span>
</span><span class='line'><span class="mi">1321</span>         <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">req_cpu</span> <span class="o">=</span> <span class="n">cpu</span><span class="p">;</span>
</span><span class='line'><span class="mi">1322</span>
</span><span class='line'><span class="mi">1323</span>         <span class="cm">/*</span>
</span><span class='line'><span class="cm">1324          * While a work item is PENDING &amp;&amp; off queue, a task trying to</span>
</span><span class='line'><span class="cm">1325          * steal the PENDING will busy-loop waiting for it to either get</span>
</span><span class='line'><span class="cm">1326          * queued or lose PENDING.  Grabbing PENDING and queueing should</span>
</span><span class='line'><span class="cm">1327          * happen with IRQ disabled.</span>
</span><span class='line'><span class="cm">1328          */</span>
</span><span class='line'><span class="mi">1329</span>         <span class="n">WARN_ON_ONCE</span><span class="p">(</span><span class="o">!</span><span class="n">irqs_disabled</span><span class="p">());</span>
</span><span class='line'><span class="mi">1330</span>
</span><span class='line'><span class="mi">1331</span>         <span class="nf">debug_work_activate</span><span class="p">(</span><span class="n">work</span><span class="p">);</span>
</span><span class='line'><span class="mi">1332</span>
</span><span class='line'><span class="mi">1333</span>         <span class="cm">/* if draining, only works from the same workqueue are allowed */</span>
</span><span class='line'><span class="mi">1334</span>         <span class="k">if</span> <span class="p">(</span><span class="n">unlikely</span><span class="p">(</span><span class="n">wq</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">__WQ_DRAINING</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'><span class="mi">1335</span>             <span class="n">WARN_ON_ONCE</span><span class="p">(</span><span class="o">!</span><span class="n">is_chained_work</span><span class="p">(</span><span class="n">wq</span><span class="p">)))</span>
</span><span class='line'><span class="mi">1336</span>                 <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="mi">1337</span> <span class="nl">retry</span><span class="p">:</span>
</span><span class='line'><span class="mi">1338</span>         <span class="k">if</span> <span class="p">(</span><span class="n">req_cpu</span> <span class="o">==</span> <span class="n">WORK_CPU_UNBOUND</span><span class="p">)</span>
</span><span class='line'><span class="mi">1339</span>                 <span class="n">cpu</span> <span class="o">=</span> <span class="n">raw_smp_processor_id</span><span class="p">();</span>
</span><span class='line'><span class="mi">1340</span>
</span><span class='line'><span class="mi">1341</span>         <span class="cm">/* pwq which will be used unless @work is executing elsewhere */</span>
</span><span class='line'><span class="mi">1342</span>         <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">wq</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">WQ_UNBOUND</span><span class="p">))</span>
</span><span class='line'><span class="mi">1343</span>                 <span class="n">pwq</span> <span class="o">=</span> <span class="n">per_cpu_ptr</span><span class="p">(</span><span class="n">wq</span><span class="o">-&gt;</span><span class="n">cpu_pwqs</span><span class="p">,</span> <span class="n">cpu</span><span class="p">);</span>
</span><span class='line'><span class="mi">1344</span>         <span class="k">else</span>
</span><span class='line'><span class="mi">1345</span>                 <span class="n">pwq</span> <span class="o">=</span> <span class="n">unbound_pwq_by_node</span><span class="p">(</span><span class="n">wq</span><span class="p">,</span> <span class="n">cpu_to_node</span><span class="p">(</span><span class="n">cpu</span><span class="p">));</span>
</span><span class='line'><span class="mi">1346</span>
</span><span class='line'><span class="mi">1347</span>         <span class="cm">/*</span>
</span><span class='line'><span class="cm">1348          * If @work was previously on a different pool, it might still be</span>
</span><span class='line'><span class="cm">1349          * running there, in which case the work needs to be queued on that</span>
</span><span class='line'><span class="cm">1350          * pool to guarantee non-reentrancy.</span>
</span><span class='line'><span class="cm">1351          */</span>
</span><span class='line'><span class="mi">1352</span>         <span class="n">last_pool</span> <span class="o">=</span> <span class="n">get_work_pool</span><span class="p">(</span><span class="n">work</span><span class="p">);</span>
</span><span class='line'><span class="mi">1353</span>         <span class="nf">if</span> <span class="p">(</span><span class="n">last_pool</span> <span class="o">&amp;&amp;</span> <span class="n">last_pool</span> <span class="o">!=</span> <span class="n">pwq</span><span class="o">-&gt;</span><span class="n">pool</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="mi">1354</span>                 <span class="k">struct</span> <span class="n">worker</span> <span class="o">*</span><span class="n">worker</span><span class="p">;</span>
</span><span class='line'><span class="mi">1355</span>
</span><span class='line'><span class="mi">1356</span>                 <span class="n">spin_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">last_pool</span><span class="o">-&gt;</span><span class="n">lock</span><span class="p">);</span>
</span><span class='line'><span class="mi">1357</span>
</span><span class='line'><span class="mi">1358</span>                 <span class="n">worker</span> <span class="o">=</span> <span class="n">find_worker_executing_work</span><span class="p">(</span><span class="n">last_pool</span><span class="p">,</span> <span class="n">work</span><span class="p">);</span>
</span><span class='line'><span class="mi">1359</span>
</span><span class='line'><span class="mi">1360</span>                 <span class="k">if</span> <span class="p">(</span><span class="n">worker</span> <span class="o">&amp;&amp;</span> <span class="n">worker</span><span class="o">-&gt;</span><span class="n">current_pwq</span><span class="o">-&gt;</span><span class="n">wq</span> <span class="o">==</span> <span class="n">wq</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="mi">1361</span>                         <span class="n">pwq</span> <span class="o">=</span> <span class="n">worker</span><span class="o">-&gt;</span><span class="n">current_pwq</span><span class="p">;</span>
</span><span class='line'><span class="mi">1362</span>                 <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'><span class="mi">1363</span>                         <span class="cm">/* meh... not running there, queue here */</span>
</span><span class='line'><span class="mi">1364</span>                         <span class="n">spin_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">last_pool</span><span class="o">-&gt;</span><span class="n">lock</span><span class="p">);</span>
</span><span class='line'><span class="mi">1365</span>                         <span class="n">spin_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pwq</span><span class="o">-&gt;</span><span class="n">pool</span><span class="o">-&gt;</span><span class="n">lock</span><span class="p">);</span>
</span><span class='line'><span class="mi">1366</span>                 <span class="p">}</span>
</span><span class='line'><span class="mi">1367</span>         <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'><span class="mi">1368</span>                 <span class="n">spin_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pwq</span><span class="o">-&gt;</span><span class="n">pool</span><span class="o">-&gt;</span><span class="n">lock</span><span class="p">);</span>
</span><span class='line'><span class="mi">1369</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">1370</span>
</span><span class='line'><span class="mi">1371</span>         <span class="cm">/*</span>
</span><span class='line'><span class="cm">1372          * pwq is determined and locked.  For unbound pools, we could have</span>
</span><span class='line'><span class="cm">1373          * raced with pwq release and it could already be dead.  If its</span>
</span><span class='line'><span class="cm">1374          * refcnt is zero, repeat pwq selection.  Note that pwqs never die</span>
</span><span class='line'><span class="cm">1375          * without another pwq replacing it in the numa_pwq_tbl or while</span>
</span><span class='line'><span class="cm">1376          * work items are executing on it, so the retrying is guaranteed to</span>
</span><span class='line'><span class="cm">1377          * make forward-progress.</span>
</span><span class='line'><span class="cm">1378          */</span>
</span><span class='line'><span class="mi">1379</span>         <span class="k">if</span> <span class="p">(</span><span class="n">unlikely</span><span class="p">(</span><span class="o">!</span><span class="n">pwq</span><span class="o">-&gt;</span><span class="n">refcnt</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'><span class="mi">1380</span>                 <span class="k">if</span> <span class="p">(</span><span class="n">wq</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">WQ_UNBOUND</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="mi">1381</span>                         <span class="n">spin_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pwq</span><span class="o">-&gt;</span><span class="n">pool</span><span class="o">-&gt;</span><span class="n">lock</span><span class="p">);</span>
</span><span class='line'><span class="mi">1382</span>                         <span class="nf">cpu_relax</span><span class="p">();</span>
</span><span class='line'><span class="mi">1383</span>                         <span class="k">goto</span> <span class="n">retry</span><span class="p">;</span>
</span><span class='line'><span class="mi">1384</span>                 <span class="p">}</span>
</span><span class='line'><span class="mi">1385</span>                 <span class="cm">/* oops */</span>
</span><span class='line'><span class="mi">1386</span>                 <span class="n">WARN_ONCE</span><span class="p">(</span><span class="nb">true</span><span class="p">,</span> <span class="s">&quot;workqueue: per-cpu pwq for %s on cpu%d has 0 refcnt&quot;</span><span class="p">,</span>
</span><span class='line'><span class="mi">1387</span>                           <span class="n">wq</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">,</span> <span class="n">cpu</span><span class="p">);</span>
</span><span class='line'><span class="mi">1388</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">1389</span>
</span><span class='line'><span class="mi">1390</span>         <span class="cm">/* pwq determined, queue */</span>
</span><span class='line'><span class="mi">1391</span>         <span class="n">trace_workqueue_queue_work</span><span class="p">(</span><span class="n">req_cpu</span><span class="p">,</span> <span class="n">pwq</span><span class="p">,</span> <span class="n">work</span><span class="p">);</span>
</span><span class='line'><span class="mi">1392</span>
</span><span class='line'><span class="mi">1393</span>         <span class="nf">if</span> <span class="p">(</span><span class="n">WARN_ON</span><span class="p">(</span><span class="o">!</span><span class="n">list_empty</span><span class="p">(</span><span class="o">&amp;</span><span class="n">work</span><span class="o">-&gt;</span><span class="n">entry</span><span class="p">)))</span> <span class="p">{</span>
</span><span class='line'><span class="mi">1394</span>                 <span class="n">spin_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pwq</span><span class="o">-&gt;</span><span class="n">pool</span><span class="o">-&gt;</span><span class="n">lock</span><span class="p">);</span>
</span><span class='line'><span class="mi">1395</span>                 <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="mi">1396</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">1397</span>
</span><span class='line'><span class="mi">1398</span>         <span class="n">pwq</span><span class="o">-&gt;</span><span class="n">nr_in_flight</span><span class="p">[</span><span class="n">pwq</span><span class="o">-&gt;</span><span class="n">work_color</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="mi">1399</span>         <span class="n">work_flags</span> <span class="o">=</span> <span class="n">work_color_to_flags</span><span class="p">(</span><span class="n">pwq</span><span class="o">-&gt;</span><span class="n">work_color</span><span class="p">);</span>
</span><span class='line'><span class="mi">1400</span>
</span><span class='line'><span class="mi">1401</span>         <span class="nf">if</span> <span class="p">(</span><span class="n">likely</span><span class="p">(</span><span class="n">pwq</span><span class="o">-&gt;</span><span class="n">nr_active</span> <span class="o">&lt;</span> <span class="n">pwq</span><span class="o">-&gt;</span><span class="n">max_active</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'><span class="mi">1402</span>                 <span class="n">trace_workqueue_activate_work</span><span class="p">(</span><span class="n">work</span><span class="p">);</span>
</span><span class='line'><span class="mi">1403</span>                 <span class="n">pwq</span><span class="o">-&gt;</span><span class="n">nr_active</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="mi">1404</span>                 <span class="n">worklist</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">pwq</span><span class="o">-&gt;</span><span class="n">pool</span><span class="o">-&gt;</span><span class="n">worklist</span><span class="p">;</span>
</span><span class='line'><span class="mi">1405</span>         <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'><span class="mi">1406</span>                 <span class="n">work_flags</span> <span class="o">|=</span> <span class="n">WORK_STRUCT_DELAYED</span><span class="p">;</span>
</span><span class='line'><span class="mi">1407</span>                 <span class="n">worklist</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">pwq</span><span class="o">-&gt;</span><span class="n">delayed_works</span><span class="p">;</span>
</span><span class='line'><span class="mi">1408</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">1409</span>
</span><span class='line'><span class="mi">1410</span>         <span class="n">insert_work</span><span class="p">(</span><span class="n">pwq</span><span class="p">,</span> <span class="n">work</span><span class="p">,</span> <span class="n">worklist</span><span class="p">,</span> <span class="n">work_flags</span><span class="p">);</span>
</span><span class='line'><span class="mi">1411</span>
</span><span class='line'><span class="mi">1412</span>         <span class="nf">spin_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pwq</span><span class="o">-&gt;</span><span class="n">pool</span><span class="o">-&gt;</span><span class="n">lock</span><span class="p">);</span>
</span><span class='line'><span class="mi">1413</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Struct Worker_pool->nr_running]]></title>
    <link href="http://martinbj2008.github.io/blog/2014/02/18/struct-worker-pool-%3Enr-running/"/>
    <updated>2014-02-18T15:15:00+08:00</updated>
    <id>http://martinbj2008.github.io/blog/2014/02/18/struct-worker-pool->nr-running</id>
    <content type="html"><![CDATA[<h3>Defination</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="mi">141</span> <span class="cm">/* struct worker is defined in workqueue_internal.h */</span>
</span><span class='line'> <span class="mi">142</span>
</span><span class='line'> <span class="mi">143</span> <span class="k">struct</span> <span class="n">worker_pool</span> <span class="p">{</span>
</span><span class='line'> <span class="p">...</span>
</span><span class='line'> <span class="mi">173</span>         <span class="cm">/*</span>
</span><span class='line'><span class="cm"> 174          * The current concurrency level.  As it&#39;s likely to be accessed</span>
</span><span class='line'><span class="cm"> 175          * from other CPUs during try_to_wake_up(), put it in a separate</span>
</span><span class='line'><span class="cm"> 176          * cacheline.</span>
</span><span class='line'><span class="cm"> 177          */</span>
</span><span class='line'> <span class="mi">178</span>         <span class="kt">atomic_t</span>                <span class="n">nr_running</span> <span class="n">____cacheline_aligned_in_smp</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Increase</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="mi">813</span> <span class="cm">/**</span>
</span><span class='line'><span class="cm"> 814  * wq_worker_waking_up - a worker is waking up</span>
</span><span class='line'><span class="cm"> 815  * @task: task waking up</span>
</span><span class='line'><span class="cm"> 816  * @cpu: CPU @task is waking up to</span>
</span><span class='line'><span class="cm"> 817  *</span>
</span><span class='line'><span class="cm"> 818  * This function is called during try_to_wake_up() when a worker is</span>
</span><span class='line'><span class="cm"> 819  * being awoken.</span>
</span><span class='line'><span class="cm"> 820  *</span>
</span><span class='line'><span class="cm"> 821  * CONTEXT:</span>
</span><span class='line'><span class="cm"> 822  * spin_lock_irq(rq-&gt;lock)</span>
</span><span class='line'><span class="cm"> 823  */</span>
</span><span class='line'> <span class="mi">824</span> <span class="kt">void</span> <span class="n">wq_worker_waking_up</span><span class="p">(</span><span class="k">struct</span> <span class="n">task_struct</span> <span class="o">*</span><span class="n">task</span><span class="p">,</span> <span class="kt">int</span> <span class="n">cpu</span><span class="p">)</span>
</span><span class='line'> <span class="mi">825</span> <span class="p">{</span>
</span><span class='line'> <span class="mi">826</span>         <span class="k">struct</span> <span class="n">worker</span> <span class="o">*</span><span class="n">worker</span> <span class="o">=</span> <span class="n">kthread_data</span><span class="p">(</span><span class="n">task</span><span class="p">);</span>
</span><span class='line'> <span class="mi">827</span>
</span><span class='line'> <span class="mi">828</span>         <span class="nf">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">worker</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">WORKER_NOT_RUNNING</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'> <span class="mi">829</span>                 <span class="n">WARN_ON_ONCE</span><span class="p">(</span><span class="n">worker</span><span class="o">-&gt;</span><span class="n">pool</span><span class="o">-&gt;</span><span class="n">cpu</span> <span class="o">!=</span> <span class="n">cpu</span><span class="p">);</span>
</span><span class='line'> <span class="mi">830</span>                 <span class="n">atomic_inc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">worker</span><span class="o">-&gt;</span><span class="n">pool</span><span class="o">-&gt;</span><span class="n">nr_running</span><span class="p">);</span>
</span><span class='line'> <span class="mi">831</span>         <span class="p">}</span>
</span><span class='line'> <span class="mi">832</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="mi">923</span> <span class="cm">/**</span>
</span><span class='line'><span class="cm"> 924  * worker_clr_flags - clear worker flags and adjust nr_running accordingly</span>
</span><span class='line'><span class="cm"> 925  * @worker: self</span>
</span><span class='line'><span class="cm"> 926  * @flags: flags to clear</span>
</span><span class='line'><span class="cm"> 927  *</span>
</span><span class='line'><span class="cm"> 928  * Clear @flags in @worker-&gt;flags and adjust nr_running accordingly.</span>
</span><span class='line'><span class="cm"> 929  *</span>
</span><span class='line'><span class="cm"> 930  * CONTEXT:</span>
</span><span class='line'><span class="cm"> 931  * spin_lock_irq(pool-&gt;lock)</span>
</span><span class='line'><span class="cm"> 932  */</span>
</span><span class='line'> <span class="mi">933</span> <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">worker_clr_flags</span><span class="p">(</span><span class="k">struct</span> <span class="n">worker</span> <span class="o">*</span><span class="n">worker</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">)</span>
</span><span class='line'> <span class="mi">934</span> <span class="p">{</span>
</span><span class='line'> <span class="mi">935</span>         <span class="k">struct</span> <span class="n">worker_pool</span> <span class="o">*</span><span class="n">pool</span> <span class="o">=</span> <span class="n">worker</span><span class="o">-&gt;</span><span class="n">pool</span><span class="p">;</span>
</span><span class='line'> <span class="mi">936</span>         <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">oflags</span> <span class="o">=</span> <span class="n">worker</span><span class="o">-&gt;</span><span class="n">flags</span><span class="p">;</span>
</span><span class='line'> <span class="mi">937</span>
</span><span class='line'> <span class="mi">938</span>         <span class="nf">WARN_ON_ONCE</span><span class="p">(</span><span class="n">worker</span><span class="o">-&gt;</span><span class="n">task</span> <span class="o">!=</span> <span class="n">current</span><span class="p">);</span>
</span><span class='line'> <span class="mi">939</span>
</span><span class='line'> <span class="mi">940</span>         <span class="n">worker</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">flags</span><span class="p">;</span>
</span><span class='line'> <span class="mi">941</span>
</span><span class='line'> <span class="mi">942</span>         <span class="cm">/*</span>
</span><span class='line'><span class="cm"> 943          * If transitioning out of NOT_RUNNING, increment nr_running.  Note</span>
</span><span class='line'><span class="cm"> 944          * that the nested NOT_RUNNING is not a noop.  NOT_RUNNING is mask</span>
</span><span class='line'><span class="cm"> 945          * of multiple flags, not a single flag.</span>
</span><span class='line'><span class="cm"> 946          */</span>
</span><span class='line'> <span class="mi">947</span>         <span class="k">if</span> <span class="p">((</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">WORKER_NOT_RUNNING</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">oflags</span> <span class="o">&amp;</span> <span class="n">WORKER_NOT_RUNNING</span><span class="p">))</span>
</span><span class='line'> <span class="mi">948</span>                 <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">worker</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">WORKER_NOT_RUNNING</span><span class="p">))</span>
</span><span class='line'> <span class="mi">949</span>                         <span class="n">atomic_inc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pool</span><span class="o">-&gt;</span><span class="n">nr_running</span><span class="p">);</span>
</span><span class='line'> <span class="mi">950</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Decrease</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="mi">885</span> <span class="cm">/**</span>
</span><span class='line'><span class="cm"> 886  * worker_set_flags - set worker flags and adjust nr_running accordingly</span>
</span><span class='line'><span class="cm"> 887  * @worker: self</span>
</span><span class='line'><span class="cm"> 888  * @flags: flags to set</span>
</span><span class='line'><span class="cm"> 889  * @wakeup: wakeup an idle worker if necessary</span>
</span><span class='line'><span class="cm"> 890  *</span>
</span><span class='line'><span class="cm"> 891  * Set @flags in @worker-&gt;flags and adjust nr_running accordingly.  If</span>
</span><span class='line'><span class="cm"> 892  * nr_running becomes zero and @wakeup is %true, an idle worker is</span>
</span><span class='line'><span class="cm"> 893  * woken up.</span>
</span><span class='line'><span class="cm"> 894  *</span>
</span><span class='line'><span class="cm"> 895  * CONTEXT:</span>
</span><span class='line'><span class="cm"> 896  * spin_lock_irq(pool-&gt;lock)</span>
</span><span class='line'><span class="cm"> 897  */</span>
</span><span class='line'> <span class="mi">898</span> <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">worker_set_flags</span><span class="p">(</span><span class="k">struct</span> <span class="n">worker</span> <span class="o">*</span><span class="n">worker</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">,</span>
</span><span class='line'> <span class="mi">899</span>                                     <span class="kt">bool</span> <span class="n">wakeup</span><span class="p">)</span>
</span><span class='line'> <span class="mi">900</span> <span class="p">{</span>
</span><span class='line'> <span class="mi">901</span>         <span class="k">struct</span> <span class="n">worker_pool</span> <span class="o">*</span><span class="n">pool</span> <span class="o">=</span> <span class="n">worker</span><span class="o">-&gt;</span><span class="n">pool</span><span class="p">;</span>
</span><span class='line'> <span class="mi">902</span>
</span><span class='line'> <span class="mi">903</span>         <span class="nf">WARN_ON_ONCE</span><span class="p">(</span><span class="n">worker</span><span class="o">-&gt;</span><span class="n">task</span> <span class="o">!=</span> <span class="n">current</span><span class="p">);</span>
</span><span class='line'> <span class="mi">904</span>
</span><span class='line'> <span class="mi">905</span>         <span class="cm">/*</span>
</span><span class='line'><span class="cm"> 906          * If transitioning into NOT_RUNNING, adjust nr_running and</span>
</span><span class='line'><span class="cm"> 907          * wake up an idle worker as necessary if requested by</span>
</span><span class='line'><span class="cm"> 908          * @wakeup.</span>
</span><span class='line'><span class="cm"> 909          */</span>
</span><span class='line'> <span class="mi">910</span>         <span class="k">if</span> <span class="p">((</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">WORKER_NOT_RUNNING</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'> <span class="mi">911</span>             <span class="o">!</span><span class="p">(</span><span class="n">worker</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">WORKER_NOT_RUNNING</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'> <span class="mi">912</span>                 <span class="k">if</span> <span class="p">(</span><span class="n">wakeup</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'> <span class="mi">913</span>                         <span class="k">if</span> <span class="p">(</span><span class="n">atomic_dec_and_test</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pool</span><span class="o">-&gt;</span><span class="n">nr_running</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'> <span class="mi">914</span>                             <span class="o">!</span><span class="n">list_empty</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pool</span><span class="o">-&gt;</span><span class="n">worklist</span><span class="p">))</span>
</span><span class='line'> <span class="mi">915</span>                                 <span class="n">wake_up_worker</span><span class="p">(</span><span class="n">pool</span><span class="p">);</span>
</span><span class='line'> <span class="mi">916</span>                 <span class="p">}</span> <span class="k">else</span>
</span><span class='line'> <span class="mi">917</span>                         <span class="n">atomic_dec</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pool</span><span class="o">-&gt;</span><span class="n">nr_running</span><span class="p">);</span>
</span><span class='line'> <span class="mi">918</span>         <span class="p">}</span>
</span><span class='line'> <span class="mi">919</span>
</span><span class='line'> <span class="mi">920</span>         <span class="n">worker</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">|=</span> <span class="n">flags</span><span class="p">;</span>
</span><span class='line'> <span class="mi">921</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="mi">834</span> <span class="cm">/**</span>
</span><span class='line'><span class="cm"> 835  * wq_worker_sleeping - a worker is going to sleep</span>
</span><span class='line'><span class="cm"> 836  * @task: task going to sleep</span>
</span><span class='line'><span class="cm"> 837  * @cpu: CPU in question, must be the current CPU number</span>
</span><span class='line'><span class="cm"> 838  *</span>
</span><span class='line'><span class="cm"> 839  * This function is called during schedule() when a busy worker is</span>
</span><span class='line'><span class="cm"> 840  * going to sleep.  Worker on the same cpu can be woken up by</span>
</span><span class='line'><span class="cm"> 841  * returning pointer to its task.</span>
</span><span class='line'><span class="cm"> 842  *</span>
</span><span class='line'><span class="cm"> 843  * CONTEXT:</span>
</span><span class='line'><span class="cm"> 844  * spin_lock_irq(rq-&gt;lock)</span>
</span><span class='line'><span class="cm"> 845  *</span>
</span><span class='line'><span class="cm"> 846  * Return:</span>
</span><span class='line'><span class="cm"> 847  * Worker task on @cpu to wake up, %NULL if none.</span>
</span><span class='line'><span class="cm"> 848  */</span>
</span><span class='line'> <span class="mi">849</span> <span class="k">struct</span> <span class="n">task_struct</span> <span class="o">*</span><span class="n">wq_worker_sleeping</span><span class="p">(</span><span class="k">struct</span> <span class="n">task_struct</span> <span class="o">*</span><span class="n">task</span><span class="p">,</span> <span class="kt">int</span> <span class="n">cpu</span><span class="p">)</span>
</span><span class='line'> <span class="mi">850</span> <span class="p">{</span>
</span><span class='line'> <span class="mi">851</span>         <span class="k">struct</span> <span class="n">worker</span> <span class="o">*</span><span class="n">worker</span> <span class="o">=</span> <span class="n">kthread_data</span><span class="p">(</span><span class="n">task</span><span class="p">),</span> <span class="o">*</span><span class="n">to_wakeup</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'> <span class="mi">852</span>         <span class="k">struct</span> <span class="n">worker_pool</span> <span class="o">*</span><span class="n">pool</span><span class="p">;</span>
</span><span class='line'> <span class="mi">853</span>
</span><span class='line'> <span class="mi">854</span>         <span class="cm">/*</span>
</span><span class='line'><span class="cm"> 855          * Rescuers, which may not have all the fields set up like normal</span>
</span><span class='line'><span class="cm"> 856          * workers, also reach here, let&#39;s not access anything before</span>
</span><span class='line'><span class="cm"> 857          * checking NOT_RUNNING.</span>
</span><span class='line'><span class="cm"> 858          */</span>
</span><span class='line'> <span class="mi">859</span>         <span class="k">if</span> <span class="p">(</span><span class="n">worker</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">WORKER_NOT_RUNNING</span><span class="p">)</span>
</span><span class='line'> <span class="mi">860</span>                 <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'> <span class="mi">861</span>
</span><span class='line'> <span class="mi">862</span>         <span class="n">pool</span> <span class="o">=</span> <span class="n">worker</span><span class="o">-&gt;</span><span class="n">pool</span><span class="p">;</span>
</span><span class='line'> <span class="mi">863</span>
</span><span class='line'> <span class="mi">864</span>         <span class="cm">/* this can only happen on the local cpu */</span>
</span><span class='line'> <span class="mi">865</span>         <span class="k">if</span> <span class="p">(</span><span class="n">WARN_ON_ONCE</span><span class="p">(</span><span class="n">cpu</span> <span class="o">!=</span> <span class="n">raw_smp_processor_id</span><span class="p">()))</span>
</span><span class='line'> <span class="mi">866</span>                 <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'> <span class="mi">867</span>
</span><span class='line'> <span class="mi">868</span>         <span class="cm">/*</span>
</span><span class='line'><span class="cm"> 869          * The counterpart of the following dec_and_test, implied mb,</span>
</span><span class='line'><span class="cm"> 870          * worklist not empty test sequence is in insert_work().</span>
</span><span class='line'><span class="cm"> 871          * Please read comment there.</span>
</span><span class='line'><span class="cm"> 872          *</span>
</span><span class='line'><span class="cm"> 873          * NOT_RUNNING is clear.  This means that we&#39;re bound to and</span>
</span><span class='line'><span class="cm"> 874          * running on the local cpu w/ rq lock held and preemption</span>
</span><span class='line'><span class="cm"> 875          * disabled, which in turn means that none else could be</span>
</span><span class='line'><span class="cm"> 876          * manipulating idle_list, so dereferencing idle_list without pool</span>
</span><span class='line'><span class="cm"> 877          * lock is safe.</span>
</span><span class='line'><span class="cm"> 878          */</span>
</span><span class='line'> <span class="mi">879</span>         <span class="k">if</span> <span class="p">(</span><span class="n">atomic_dec_and_test</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pool</span><span class="o">-&gt;</span><span class="n">nr_running</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'> <span class="mi">880</span>             <span class="o">!</span><span class="n">list_empty</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pool</span><span class="o">-&gt;</span><span class="n">worklist</span><span class="p">))</span>
</span><span class='line'> <span class="mi">881</span>                 <span class="n">to_wakeup</span> <span class="o">=</span> <span class="n">first_worker</span><span class="p">(</span><span class="n">pool</span><span class="p">);</span>
</span><span class='line'> <span class="mi">882</span>         <span class="k">return</span> <span class="n">to_wakeup</span> <span class="o">?</span> <span class="n">to_wakeup</span><span class="o">-&gt;</span><span class="nl">task</span> <span class="p">:</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'> <span class="mi">883</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Worker and Worker_thread]]></title>
    <link href="http://martinbj2008.github.io/blog/2014/02/18/worker-and-worker-thread/"/>
    <updated>2014-02-18T11:40:00+08:00</updated>
    <id>http://martinbj2008.github.io/blog/2014/02/18/worker-and-worker-thread</id>
    <content type="html"><![CDATA[<h3>Summary</h3>

<p>The <code>struct worker</code> is the really scheudle unit in workqueue.
Each <code>struct worker</code> has a corresponding thread(task) by <code>worker-&gt;task</code>.
A <code>struct worker</code> is linked to <code>struct worker_pool-&gt;idle_list</code> when work is idle.
and moved to <code>struct worker_pool-&gt;busy_hash</code>.</p>

<h3><code>worker_thread</code></h3>

<ol>
<li>move <code>worker</code> from <code>pool-&gt;idle_list</code> and clear <code>worker</code> &rsquo;s <code>WORKER_IDLE</code> flag.</li>
<li>check the <code>pool</code> and manage the workers(create/destory)</li>
<li>Iterate all the <code>struct work_struct *work</code> in the <code>struct worker_pool-&gt;worklist</code>,
and run them in sequence with <code>process_one_work(worker, work);</code>.</li>
<li>move <code>worker</code> into idle list again.</li>
<li>schedule();</li>
</ol>


<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">2270</span> <span class="cm">/**</span>
</span><span class='line'><span class="cm">2271  * worker_thread - the worker thread function</span>
</span><span class='line'><span class="cm">2272  * @__worker: self</span>
</span><span class='line'><span class="cm">2273  *</span>
</span><span class='line'><span class="cm">2274  * The worker thread function.  All workers belong to a worker_pool -</span>
</span><span class='line'><span class="cm">2275  * either a per-cpu one or dynamic unbound one.  These workers process all</span>
</span><span class='line'><span class="cm">2276  * work items regardless of their specific target workqueue.  The only</span>
</span><span class='line'><span class="cm">2277  * exception is work items which belong to workqueues with a rescuer which</span>
</span><span class='line'><span class="cm">2278  * will be explained in rescuer_thread().</span>
</span><span class='line'><span class="cm">2279  *</span>
</span><span class='line'><span class="cm">2280  * Return: 0</span>
</span><span class='line'><span class="cm">2281  */</span>
</span><span class='line'><span class="mi">2282</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">worker_thread</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">__worker</span><span class="p">)</span>
</span><span class='line'><span class="mi">2283</span> <span class="p">{</span>
</span><span class='line'><span class="mi">2284</span>         <span class="k">struct</span> <span class="n">worker</span> <span class="o">*</span><span class="n">worker</span> <span class="o">=</span> <span class="n">__worker</span><span class="p">;</span>
</span><span class='line'><span class="mi">2285</span>         <span class="k">struct</span> <span class="n">worker_pool</span> <span class="o">*</span><span class="n">pool</span> <span class="o">=</span> <span class="n">worker</span><span class="o">-&gt;</span><span class="n">pool</span><span class="p">;</span>
</span><span class='line'><span class="mi">2286</span>
</span><span class='line'><span class="mi">2287</span>         <span class="cm">/* tell the scheduler that this is a workqueue worker */</span>
</span><span class='line'><span class="mi">2288</span>         <span class="n">worker</span><span class="o">-&gt;</span><span class="n">task</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">|=</span> <span class="n">PF_WQ_WORKER</span><span class="p">;</span>
</span><span class='line'><span class="mi">2289</span> <span class="nl">woke_up</span><span class="p">:</span>
</span><span class='line'><span class="mi">2290</span>         <span class="n">spin_lock_irq</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pool</span><span class="o">-&gt;</span><span class="n">lock</span><span class="p">);</span>
</span><span class='line'><span class="mi">2291</span>
</span><span class='line'><span class="mi">2292</span>         <span class="cm">/* am I supposed to die? */</span>
</span><span class='line'><span class="mi">2293</span>         <span class="k">if</span> <span class="p">(</span><span class="n">unlikely</span><span class="p">(</span><span class="n">worker</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">WORKER_DIE</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'><span class="mi">2294</span>                 <span class="n">spin_unlock_irq</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pool</span><span class="o">-&gt;</span><span class="n">lock</span><span class="p">);</span>
</span><span class='line'><span class="mi">2295</span>                 <span class="nf">WARN_ON_ONCE</span><span class="p">(</span><span class="o">!</span><span class="n">list_empty</span><span class="p">(</span><span class="o">&amp;</span><span class="n">worker</span><span class="o">-&gt;</span><span class="n">entry</span><span class="p">));</span>
</span><span class='line'><span class="mi">2296</span>                 <span class="n">worker</span><span class="o">-&gt;</span><span class="n">task</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">PF_WQ_WORKER</span><span class="p">;</span>
</span><span class='line'><span class="mi">2297</span>                 <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="mi">2298</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">2299</span>
</span><span class='line'><span class="mi">2300</span>         <span class="n">worker_leave_idle</span><span class="p">(</span><span class="n">worker</span><span class="p">);</span>
</span><span class='line'><span class="mi">2301</span> <span class="nl">recheck</span><span class="p">:</span>
</span><span class='line'><span class="mi">2302</span>         <span class="cm">/* no more worker necessary? */</span>
</span><span class='line'><span class="mi">2303</span>         <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">need_more_worker</span><span class="p">(</span><span class="n">pool</span><span class="p">))</span>
</span><span class='line'><span class="mi">2304</span>                 <span class="k">goto</span> <span class="n">sleep</span><span class="p">;</span>
</span><span class='line'><span class="mi">2305</span>
</span><span class='line'><span class="mi">2306</span>         <span class="cm">/* do we need to manage? */</span>
</span><span class='line'><span class="mi">2307</span>         <span class="k">if</span> <span class="p">(</span><span class="n">unlikely</span><span class="p">(</span><span class="o">!</span><span class="n">may_start_working</span><span class="p">(</span><span class="n">pool</span><span class="p">))</span> <span class="o">&amp;&amp;</span> <span class="n">manage_workers</span><span class="p">(</span><span class="n">worker</span><span class="p">))</span>
</span><span class='line'><span class="mi">2308</span>                 <span class="k">goto</span> <span class="n">recheck</span><span class="p">;</span>
</span><span class='line'><span class="mi">2309</span>
</span><span class='line'><span class="mi">2310</span>         <span class="cm">/*</span>
</span><span class='line'><span class="cm">2311          * -&gt;scheduled list can only be filled while a worker is</span>
</span><span class='line'><span class="cm">2312          * preparing to process a work or actually processing it.</span>
</span><span class='line'><span class="cm">2313          * Make sure nobody diddled with it while I was sleeping.</span>
</span><span class='line'><span class="cm">2314          */</span>
</span><span class='line'><span class="mi">2315</span>         <span class="n">WARN_ON_ONCE</span><span class="p">(</span><span class="o">!</span><span class="n">list_empty</span><span class="p">(</span><span class="o">&amp;</span><span class="n">worker</span><span class="o">-&gt;</span><span class="n">scheduled</span><span class="p">));</span>
</span><span class='line'><span class="mi">2316</span>
</span><span class='line'><span class="mi">2317</span>         <span class="cm">/*</span>
</span><span class='line'><span class="cm">2318          * Finish PREP stage.  We&#39;re guaranteed to have at least one idle</span>
</span><span class='line'><span class="cm">2319          * worker or that someone else has already assumed the manager</span>
</span><span class='line'><span class="cm">2320          * role.  This is where @worker starts participating in concurrency</span>
</span><span class='line'><span class="cm">2321          * management if applicable and concurrency management is restored</span>
</span><span class='line'><span class="cm">2322          * after being rebound.  See rebind_workers() for details.</span>
</span><span class='line'><span class="cm">2323          */</span>
</span><span class='line'><span class="mi">2324</span>         <span class="n">worker_clr_flags</span><span class="p">(</span><span class="n">worker</span><span class="p">,</span> <span class="n">WORKER_PREP</span> <span class="o">|</span> <span class="n">WORKER_REBOUND</span><span class="p">);</span>
</span><span class='line'><span class="mi">2325</span>
</span><span class='line'><span class="mi">2326</span>         <span class="k">do</span> <span class="p">{</span>
</span><span class='line'><span class="mi">2327</span>                 <span class="k">struct</span> <span class="n">work_struct</span> <span class="o">*</span><span class="n">work</span> <span class="o">=</span>
</span><span class='line'><span class="mi">2328</span>                         <span class="n">list_first_entry</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pool</span><span class="o">-&gt;</span><span class="n">worklist</span><span class="p">,</span>
</span><span class='line'><span class="mi">2329</span>                                          <span class="k">struct</span> <span class="n">work_struct</span><span class="p">,</span> <span class="n">entry</span><span class="p">);</span>
</span><span class='line'><span class="mi">2330</span>
</span><span class='line'><span class="mi">2331</span>                 <span class="nf">if</span> <span class="p">(</span><span class="n">likely</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="o">*</span><span class="n">work_data_bits</span><span class="p">(</span><span class="n">work</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">WORK_STRUCT_LINKED</span><span class="p">)))</span> <span class="p">{</span>
</span><span class='line'><span class="mi">2332</span>                         <span class="cm">/* optimization path, not strictly necessary */</span>
</span><span class='line'><span class="mi">2333</span>                         <span class="n">process_one_work</span><span class="p">(</span><span class="n">worker</span><span class="p">,</span> <span class="n">work</span><span class="p">);</span>
</span><span class='line'><span class="mi">2334</span>                         <span class="k">if</span> <span class="p">(</span><span class="n">unlikely</span><span class="p">(</span><span class="o">!</span><span class="n">list_empty</span><span class="p">(</span><span class="o">&amp;</span><span class="n">worker</span><span class="o">-&gt;</span><span class="n">scheduled</span><span class="p">)))</span>
</span><span class='line'><span class="mi">2335</span>                                 <span class="n">process_scheduled_works</span><span class="p">(</span><span class="n">worker</span><span class="p">);</span>
</span><span class='line'><span class="mi">2336</span>                 <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'><span class="mi">2337</span>                         <span class="n">move_linked_works</span><span class="p">(</span><span class="n">work</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">worker</span><span class="o">-&gt;</span><span class="n">scheduled</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="mi">2338</span>                         <span class="nf">process_scheduled_works</span><span class="p">(</span><span class="n">worker</span><span class="p">);</span>
</span><span class='line'><span class="mi">2339</span>                 <span class="p">}</span>
</span><span class='line'><span class="mi">2340</span>         <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">keep_working</span><span class="p">(</span><span class="n">pool</span><span class="p">));</span>
</span><span class='line'><span class="mi">2341</span>
</span><span class='line'><span class="mi">2342</span>         <span class="nf">worker_set_flags</span><span class="p">(</span><span class="n">worker</span><span class="p">,</span> <span class="n">WORKER_PREP</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>
</span><span class='line'><span class="mi">2343</span> <span class="nl">sleep</span><span class="p">:</span>
</span><span class='line'><span class="mi">2344</span>         <span class="k">if</span> <span class="p">(</span><span class="n">unlikely</span><span class="p">(</span><span class="n">need_to_manage_workers</span><span class="p">(</span><span class="n">pool</span><span class="p">))</span> <span class="o">&amp;&amp;</span> <span class="n">manage_workers</span><span class="p">(</span><span class="n">worker</span><span class="p">))</span>
</span><span class='line'><span class="mi">2345</span>                 <span class="k">goto</span> <span class="n">recheck</span><span class="p">;</span>
</span><span class='line'><span class="mi">2346</span>
</span><span class='line'><span class="mi">2347</span>         <span class="cm">/*</span>
</span><span class='line'><span class="cm">2348          * pool-&gt;lock is held and there&#39;s no work to process and no need to</span>
</span><span class='line'><span class="cm">2349          * manage, sleep.  Workers are woken up only while holding</span>
</span><span class='line'><span class="cm">2350          * pool-&gt;lock or from local cpu, so setting the current state</span>
</span><span class='line'><span class="cm">2351          * before releasing pool-&gt;lock is enough to prevent losing any</span>
</span><span class='line'><span class="cm">2352          * event.</span>
</span><span class='line'><span class="cm">2353          */</span>
</span><span class='line'><span class="mi">2354</span>         <span class="n">worker_enter_idle</span><span class="p">(</span><span class="n">worker</span><span class="p">);</span>
</span><span class='line'><span class="mi">2355</span>         <span class="nf">__set_current_state</span><span class="p">(</span><span class="n">TASK_INTERRUPTIBLE</span><span class="p">);</span>
</span><span class='line'><span class="mi">2356</span>         <span class="nf">spin_unlock_irq</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pool</span><span class="o">-&gt;</span><span class="n">lock</span><span class="p">);</span>
</span><span class='line'><span class="mi">2357</span>         <span class="nf">schedule</span><span class="p">();</span>
</span><span class='line'><span class="mi">2358</span>         <span class="k">goto</span> <span class="n">woke_up</span><span class="p">;</span>
</span><span class='line'><span class="mi">2359</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>process_one_work</code></h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">2114</span> <span class="cm">/**</span>
</span><span class='line'><span class="cm">2115  * process_one_work - process single work</span>
</span><span class='line'><span class="cm">2116  * @worker: self</span>
</span><span class='line'><span class="cm">2117  * @work: work to process</span>
</span><span class='line'><span class="cm">2118  *</span>
</span><span class='line'><span class="cm">2119  * Process @work.  This function contains all the logics necessary to</span>
</span><span class='line'><span class="cm">2120  * process a single work including synchronization against and</span>
</span><span class='line'><span class="cm">2121  * interaction with other workers on the same cpu, queueing and</span>
</span><span class='line'><span class="cm">2122  * flushing.  As long as context requirement is met, any worker can</span>
</span><span class='line'><span class="cm">2123  * call this function to process a work.</span>
</span><span class='line'><span class="cm">2124  *</span>
</span><span class='line'><span class="cm">2125  * CONTEXT:</span>
</span><span class='line'><span class="cm">2126  * spin_lock_irq(pool-&gt;lock) which is released and regrabbed.</span>
</span><span class='line'><span class="cm">2127  */</span>
</span><span class='line'><span class="mi">2128</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">process_one_work</span><span class="p">(</span><span class="k">struct</span> <span class="n">worker</span> <span class="o">*</span><span class="n">worker</span><span class="p">,</span> <span class="k">struct</span> <span class="n">work_struct</span> <span class="o">*</span><span class="n">work</span><span class="p">)</span>
</span><span class='line'><span class="mi">2129</span> <span class="n">__releases</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pool</span><span class="o">-&gt;</span><span class="n">lock</span><span class="p">)</span>
</span><span class='line'><span class="mi">2130</span> <span class="n">__acquires</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pool</span><span class="o">-&gt;</span><span class="n">lock</span><span class="p">)</span>
</span><span class='line'><span class="mi">2131</span> <span class="p">{</span>
</span><span class='line'><span class="mi">2132</span>         <span class="k">struct</span> <span class="n">pool_workqueue</span> <span class="o">*</span><span class="n">pwq</span> <span class="o">=</span> <span class="n">get_work_pwq</span><span class="p">(</span><span class="n">work</span><span class="p">);</span>
</span><span class='line'><span class="mi">2133</span>         <span class="k">struct</span> <span class="n">worker_pool</span> <span class="o">*</span><span class="n">pool</span> <span class="o">=</span> <span class="n">worker</span><span class="o">-&gt;</span><span class="n">pool</span><span class="p">;</span>
</span><span class='line'><span class="mi">2134</span>         <span class="kt">bool</span> <span class="n">cpu_intensive</span> <span class="o">=</span> <span class="n">pwq</span><span class="o">-&gt;</span><span class="n">wq</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">WQ_CPU_INTENSIVE</span><span class="p">;</span>
</span><span class='line'><span class="mi">2135</span>         <span class="kt">int</span> <span class="n">work_color</span><span class="p">;</span>
</span><span class='line'><span class="mi">2136</span>         <span class="k">struct</span> <span class="n">worker</span> <span class="o">*</span><span class="n">collision</span><span class="p">;</span>
</span><span class='line'><span class="mi">2137</span> <span class="err">#</span><span class="n">ifdef</span> <span class="n">CONFIG_LOCKDEP</span>
</span><span class='line'><span class="mi">2138</span>         <span class="cm">/*</span>
</span><span class='line'><span class="cm">2139          * It is permissible to free the struct work_struct from</span>
</span><span class='line'><span class="cm">2140          * inside the function that is called from it, this we need to</span>
</span><span class='line'><span class="cm">2141          * take into account for lockdep too.  To avoid bogus &quot;held</span>
</span><span class='line'><span class="cm">2142          * lock freed&quot; warnings as well as problems when looking into</span>
</span><span class='line'><span class="cm">2143          * work-&gt;lockdep_map, make a copy and use that here.</span>
</span><span class='line'><span class="cm">2144          */</span>
</span><span class='line'><span class="mi">2145</span>         <span class="k">struct</span> <span class="n">lockdep_map</span> <span class="n">lockdep_map</span><span class="p">;</span>
</span><span class='line'><span class="mi">2146</span>
</span><span class='line'><span class="mi">2147</span>         <span class="nf">lockdep_copy_map</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lockdep_map</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">work</span><span class="o">-&gt;</span><span class="n">lockdep_map</span><span class="p">);</span>
</span><span class='line'><span class="mi">2148</span> <span class="err">#</span><span class="n">endif</span>
</span><span class='line'><span class="mi">2149</span>         <span class="cm">/*</span>
</span><span class='line'><span class="cm">2150          * Ensure we&#39;re on the correct CPU.  DISASSOCIATED test is</span>
</span><span class='line'><span class="cm">2151          * necessary to avoid spurious warnings from rescuers servicing the</span>
</span><span class='line'><span class="cm">2152          * unbound or a disassociated pool.</span>
</span><span class='line'><span class="cm">2153          */</span>
</span><span class='line'><span class="mi">2154</span>         <span class="n">WARN_ON_ONCE</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">worker</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">WORKER_UNBOUND</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'><span class="mi">2155</span>                      <span class="o">!</span><span class="p">(</span><span class="n">pool</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">POOL_DISASSOCIATED</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'><span class="mi">2156</span>                      <span class="n">raw_smp_processor_id</span><span class="p">()</span> <span class="o">!=</span> <span class="n">pool</span><span class="o">-&gt;</span><span class="n">cpu</span><span class="p">);</span>
</span><span class='line'><span class="mi">2157</span>
</span><span class='line'><span class="mi">2158</span>         <span class="cm">/*</span>
</span><span class='line'><span class="cm">2159          * A single work shouldn&#39;t be executed concurrently by</span>
</span><span class='line'><span class="cm">2160          * multiple workers on a single cpu.  Check whether anyone is</span>
</span><span class='line'><span class="cm">2161          * already processing the work.  If so, defer the work to the</span>
</span><span class='line'><span class="cm">2162          * currently executing one.</span>
</span><span class='line'><span class="cm">2163          */</span>
</span><span class='line'><span class="mi">2164</span>         <span class="n">collision</span> <span class="o">=</span> <span class="n">find_worker_executing_work</span><span class="p">(</span><span class="n">pool</span><span class="p">,</span> <span class="n">work</span><span class="p">);</span>
</span><span class='line'><span class="mi">2165</span>         <span class="nf">if</span> <span class="p">(</span><span class="n">unlikely</span><span class="p">(</span><span class="n">collision</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'><span class="mi">2166</span>                 <span class="n">move_linked_works</span><span class="p">(</span><span class="n">work</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">collision</span><span class="o">-&gt;</span><span class="n">scheduled</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="mi">2167</span>                 <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="mi">2168</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">2169</span>
</span><span class='line'><span class="mi">2170</span>         <span class="cm">/* claim and dequeue */</span>
</span><span class='line'><span class="mi">2171</span>         <span class="n">debug_work_deactivate</span><span class="p">(</span><span class="n">work</span><span class="p">);</span>
</span><span class='line'><span class="mi">2172</span>         <span class="nf">hash_add</span><span class="p">(</span><span class="n">pool</span><span class="o">-&gt;</span><span class="n">busy_hash</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">worker</span><span class="o">-&gt;</span><span class="n">hentry</span><span class="p">,</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="n">work</span><span class="p">);</span>
</span><span class='line'><span class="mi">2173</span>         <span class="n">worker</span><span class="o">-&gt;</span><span class="n">current_work</span> <span class="o">=</span> <span class="n">work</span><span class="p">;</span>
</span><span class='line'><span class="mi">2174</span>         <span class="n">worker</span><span class="o">-&gt;</span><span class="n">current_func</span> <span class="o">=</span> <span class="n">work</span><span class="o">-&gt;</span><span class="n">func</span><span class="p">;</span>
</span><span class='line'><span class="mi">2174</span>         <span class="n">worker</span><span class="o">-&gt;</span><span class="n">current_func</span> <span class="o">=</span> <span class="n">work</span><span class="o">-&gt;</span><span class="n">func</span><span class="p">;</span>
</span><span class='line'><span class="mi">2175</span>         <span class="n">worker</span><span class="o">-&gt;</span><span class="n">current_pwq</span> <span class="o">=</span> <span class="n">pwq</span><span class="p">;</span>
</span><span class='line'><span class="mi">2176</span>         <span class="n">work_color</span> <span class="o">=</span> <span class="n">get_work_color</span><span class="p">(</span><span class="n">work</span><span class="p">);</span>
</span><span class='line'><span class="mi">2177</span>
</span><span class='line'><span class="mi">2178</span>         <span class="nf">list_del_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">work</span><span class="o">-&gt;</span><span class="n">entry</span><span class="p">);</span>
</span><span class='line'><span class="mi">2179</span>
</span><span class='line'><span class="mi">2180</span>         <span class="cm">/*</span>
</span><span class='line'><span class="cm">2181          * CPU intensive works don&#39;t participate in concurrency</span>
</span><span class='line'><span class="cm">2182          * management.  They&#39;re the scheduler&#39;s responsibility.</span>
</span><span class='line'><span class="cm">2183          */</span>
</span><span class='line'><span class="mi">2184</span>         <span class="k">if</span> <span class="p">(</span><span class="n">unlikely</span><span class="p">(</span><span class="n">cpu_intensive</span><span class="p">))</span>
</span><span class='line'><span class="mi">2185</span>                 <span class="n">worker_set_flags</span><span class="p">(</span><span class="n">worker</span><span class="p">,</span> <span class="n">WORKER_CPU_INTENSIVE</span><span class="p">,</span> <span class="nb">true</span><span class="p">);</span>
</span><span class='line'><span class="mi">2186</span>
</span><span class='line'><span class="mi">2187</span>         <span class="cm">/*</span>
</span><span class='line'><span class="cm">2188          * Unbound pool isn&#39;t concurrency managed and work items should be</span>
</span><span class='line'><span class="cm">2189          * executed ASAP.  Wake up another worker if necessary.</span>
</span><span class='line'><span class="cm">2190          */</span>
</span><span class='line'><span class="mi">2191</span>         <span class="k">if</span> <span class="p">((</span><span class="n">worker</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">WORKER_UNBOUND</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">need_more_worker</span><span class="p">(</span><span class="n">pool</span><span class="p">))</span>
</span><span class='line'><span class="mi">2192</span>                 <span class="n">wake_up_worker</span><span class="p">(</span><span class="n">pool</span><span class="p">);</span>
</span><span class='line'><span class="mi">2193</span>
</span><span class='line'><span class="mi">2194</span>         <span class="cm">/*</span>
</span><span class='line'><span class="cm">2195          * Record the last pool and clear PENDING which should be the last</span>
</span><span class='line'><span class="cm">2196          * update to @work.  Also, do this inside @pool-&gt;lock so that</span>
</span><span class='line'><span class="cm">2197          * PENDING and queued state changes happen together while IRQ is</span>
</span><span class='line'><span class="cm">2198          * disabled.</span>
</span><span class='line'><span class="cm">2199          */</span>
</span><span class='line'><span class="mi">2200</span>         <span class="n">set_work_pool_and_clear_pending</span><span class="p">(</span><span class="n">work</span><span class="p">,</span> <span class="n">pool</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">);</span>
</span><span class='line'><span class="mi">2201</span>
</span><span class='line'><span class="mi">2202</span>         <span class="nf">spin_unlock_irq</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pool</span><span class="o">-&gt;</span><span class="n">lock</span><span class="p">);</span>
</span><span class='line'><span class="mi">2203</span>
</span><span class='line'><span class="mi">2204</span>         <span class="nf">lock_map_acquire_read</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pwq</span><span class="o">-&gt;</span><span class="n">wq</span><span class="o">-&gt;</span><span class="n">lockdep_map</span><span class="p">);</span>
</span><span class='line'><span class="mi">2205</span>         <span class="nf">lock_map_acquire</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lockdep_map</span><span class="p">);</span>
</span><span class='line'><span class="mi">2206</span>         <span class="nf">trace_workqueue_execute_start</span><span class="p">(</span><span class="n">work</span><span class="p">);</span>
</span><span class='line'><span class="mi">2207</span>         <span class="n">worker</span><span class="o">-&gt;</span><span class="n">current_func</span><span class="p">(</span><span class="n">work</span><span class="p">);</span>
</span><span class='line'><span class="mi">2208</span>         <span class="cm">/*</span>
</span><span class='line'><span class="cm">2209          * While we must be careful to not use &quot;work&quot; after this, the trace</span>
</span><span class='line'><span class="cm">2210          * point will only record its address.</span>
</span><span class='line'><span class="cm">2211          */</span>
</span><span class='line'><span class="mi">2212</span>         <span class="n">trace_workqueue_execute_end</span><span class="p">(</span><span class="n">work</span><span class="p">);</span>
</span><span class='line'><span class="mi">2213</span>         <span class="nf">lock_map_release</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lockdep_map</span><span class="p">);</span>
</span><span class='line'><span class="mi">2214</span>         <span class="nf">lock_map_release</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pwq</span><span class="o">-&gt;</span><span class="n">wq</span><span class="o">-&gt;</span><span class="n">lockdep_map</span><span class="p">);</span>
</span><span class='line'><span class="mi">2215</span>
</span><span class='line'><span class="mi">2216</span>         <span class="nf">if</span> <span class="p">(</span><span class="n">unlikely</span><span class="p">(</span><span class="n">in_atomic</span><span class="p">()</span> <span class="o">||</span> <span class="n">lockdep_depth</span><span class="p">(</span><span class="n">current</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'><span class="mi">2217</span>                 <span class="n">pr_err</span><span class="p">(</span><span class="s">&quot;BUG: workqueue leaked lock or atomic: %s/0x%08x/%d</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'><span class="mi">2218</span>                        <span class="s">&quot;     last function: %pf</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'><span class="mi">2219</span>                        <span class="n">current</span><span class="o">-&gt;</span><span class="n">comm</span><span class="p">,</span> <span class="n">preempt_count</span><span class="p">(),</span> <span class="n">task_pid_nr</span><span class="p">(</span><span class="n">current</span><span class="p">),</span>
</span><span class='line'><span class="mi">2220</span>                        <span class="n">worker</span><span class="o">-&gt;</span><span class="n">current_func</span><span class="p">);</span>
</span><span class='line'><span class="mi">2221</span>                 <span class="n">debug_show_held_locks</span><span class="p">(</span><span class="n">current</span><span class="p">);</span>
</span><span class='line'><span class="mi">2222</span>                 <span class="n">dump_stack</span><span class="p">();</span>
</span><span class='line'><span class="mi">2223</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">2224</span>
</span><span class='line'><span class="mi">2225</span>         <span class="cm">/*</span>
</span><span class='line'><span class="cm">2226          * The following prevents a kworker from hogging CPU on !PREEMPT</span>
</span><span class='line'><span class="cm">2227          * kernels, where a requeueing work item waiting for something to</span>
</span><span class='line'><span class="cm">2228          * happen could deadlock with stop_machine as such work item could</span>
</span><span class='line'><span class="cm">2229          * indefinitely requeue itself while all other CPUs are trapped in</span>
</span><span class='line'><span class="cm">2230          * stop_machine.</span>
</span><span class='line'><span class="cm">2231          */</span>
</span><span class='line'><span class="mi">2232</span>         <span class="n">cond_resched</span><span class="p">();</span>
</span><span class='line'><span class="mi">2233</span>
</span><span class='line'><span class="mi">2234</span>         <span class="nf">spin_lock_irq</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pool</span><span class="o">-&gt;</span><span class="n">lock</span><span class="p">);</span>
</span><span class='line'><span class="mi">2235</span>
</span><span class='line'><span class="mi">2236</span>         <span class="cm">/* clear cpu intensive status */</span>
</span><span class='line'><span class="mi">2237</span>         <span class="k">if</span> <span class="p">(</span><span class="n">unlikely</span><span class="p">(</span><span class="n">cpu_intensive</span><span class="p">))</span>
</span><span class='line'><span class="mi">2238</span>                 <span class="n">worker_clr_flags</span><span class="p">(</span><span class="n">worker</span><span class="p">,</span> <span class="n">WORKER_CPU_INTENSIVE</span><span class="p">);</span>
</span><span class='line'><span class="mi">2239</span>
</span><span class='line'><span class="mi">2240</span>         <span class="cm">/* we&#39;re done with it, release */</span>
</span><span class='line'><span class="mi">2241</span>         <span class="n">hash_del</span><span class="p">(</span><span class="o">&amp;</span><span class="n">worker</span><span class="o">-&gt;</span><span class="n">hentry</span><span class="p">);</span>
</span><span class='line'><span class="mi">2242</span>         <span class="n">worker</span><span class="o">-&gt;</span><span class="n">current_work</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="mi">2243</span>         <span class="n">worker</span><span class="o">-&gt;</span><span class="n">current_func</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="mi">2244</span>         <span class="n">worker</span><span class="o">-&gt;</span><span class="n">current_pwq</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="mi">2245</span>         <span class="n">worker</span><span class="o">-&gt;</span><span class="n">desc_valid</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'><span class="mi">2246</span>         <span class="nf">pwq_dec_nr_in_flight</span><span class="p">(</span><span class="n">pwq</span><span class="p">,</span> <span class="n">work_color</span><span class="p">);</span>
</span><span class='line'><span class="mi">2247</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Workqueue Basic Structure]]></title>
    <link href="http://martinbj2008.github.io/blog/2014/02/12/workqueue-basic-structure/"/>
    <updated>2014-02-12T18:19:00+08:00</updated>
    <id>http://martinbj2008.github.io/blog/2014/02/12/workqueue-basic-structure</id>
    <content type="html"><![CDATA[<h3>summary</h3>

<!-- more-->


<h4><code>worker</code></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="mi">15</span> <span class="cm">/*</span>
</span><span class='line'><span class="cm"> 16  * The poor guys doing the actual heavy lifting.  All on-duty workers are</span>
</span><span class='line'><span class="cm"> 17  * either serving the manager role, on idle list or on busy hash.  For</span>
</span><span class='line'><span class="cm"> 18  * details on the locking annotation (L, I, X...), refer to workqueue.c.</span>
</span><span class='line'><span class="cm"> 19  *</span>
</span><span class='line'><span class="cm"> 20  * Only to be used in workqueue and async.</span>
</span><span class='line'><span class="cm"> 21  */</span>
</span><span class='line'> <span class="mi">22</span> <span class="k">struct</span> <span class="n">worker</span> <span class="p">{</span>
</span><span class='line'> <span class="mi">23</span>         <span class="cm">/* on idle list while idle, on busy hash table while busy */</span>
</span><span class='line'> <span class="mi">24</span>         <span class="k">union</span> <span class="p">{</span>
</span><span class='line'> <span class="mi">25</span>                 <span class="k">struct</span> <span class="n">list_head</span>        <span class="n">entry</span><span class="p">;</span>  <span class="cm">/* L: while idle */</span>
</span><span class='line'> <span class="mi">26</span>                 <span class="k">struct</span> <span class="n">hlist_node</span>       <span class="n">hentry</span><span class="p">;</span> <span class="cm">/* L: while busy */</span>
</span><span class='line'> <span class="mi">27</span>         <span class="p">};</span>
</span><span class='line'> <span class="mi">28</span>
</span><span class='line'> <span class="mi">29</span>         <span class="k">struct</span> <span class="n">work_struct</span>      <span class="o">*</span><span class="n">current_work</span><span class="p">;</span>  <span class="cm">/* L: work being processed */</span>
</span><span class='line'> <span class="mi">30</span>         <span class="kt">work_func_t</span>             <span class="n">current_func</span><span class="p">;</span>   <span class="cm">/* L: current_work&#39;s fn */</span>
</span><span class='line'> <span class="mi">31</span>         <span class="k">struct</span> <span class="n">pool_workqueue</span>   <span class="o">*</span><span class="n">current_pwq</span><span class="p">;</span> <span class="cm">/* L: current_work&#39;s pwq */</span>
</span><span class='line'> <span class="mi">32</span>         <span class="kt">bool</span>                    <span class="n">desc_valid</span><span class="p">;</span>     <span class="cm">/* -&gt;desc is valid */</span>
</span><span class='line'> <span class="mi">33</span>         <span class="k">struct</span> <span class="n">list_head</span>        <span class="n">scheduled</span><span class="p">;</span>      <span class="cm">/* L: scheduled works */</span>
</span><span class='line'> <span class="mi">34</span>
</span><span class='line'> <span class="mi">35</span>         <span class="cm">/* 64 bytes boundary on 64bit, 32 on 32bit */</span>
</span><span class='line'> <span class="mi">36</span>
</span><span class='line'> <span class="mi">37</span>         <span class="k">struct</span> <span class="n">task_struct</span>      <span class="o">*</span><span class="n">task</span><span class="p">;</span>          <span class="cm">/* I: worker task */</span>
</span><span class='line'> <span class="mi">38</span>         <span class="k">struct</span> <span class="n">worker_pool</span>      <span class="o">*</span><span class="n">pool</span><span class="p">;</span>          <span class="cm">/* I: the associated pool */</span>
</span><span class='line'> <span class="mi">39</span>                                                 <span class="cm">/* L: for rescuers */</span>
</span><span class='line'> <span class="mi">40</span>
</span><span class='line'> <span class="mi">41</span>         <span class="kt">unsigned</span> <span class="kt">long</span>           <span class="n">last_active</span><span class="p">;</span>    <span class="cm">/* L: last active timestamp */</span>
</span><span class='line'> <span class="mi">42</span>         <span class="kt">unsigned</span> <span class="kt">int</span>            <span class="n">flags</span><span class="p">;</span>          <span class="cm">/* X: flags */</span>
</span><span class='line'> <span class="mi">43</span>         <span class="kt">int</span>                     <span class="n">id</span><span class="p">;</span>             <span class="cm">/* I: worker id */</span>
</span><span class='line'> <span class="mi">44</span>
</span><span class='line'> <span class="mi">45</span>         <span class="cm">/*</span>
</span><span class='line'><span class="cm"> 46          * Opaque string set with work_set_desc().  Printed out with task</span>
</span><span class='line'><span class="cm"> 47          * dump for debugging - WARN, BUG, panic or sysrq.</span>
</span><span class='line'><span class="cm"> 48          */</span>
</span><span class='line'> <span class="mi">49</span>         <span class="kt">char</span>                    <span class="n">desc</span><span class="p">[</span><span class="n">WORKER_DESC_LEN</span><span class="p">];</span>
</span><span class='line'> <span class="mi">50</span>
</span><span class='line'> <span class="mi">51</span>         <span class="cm">/* used only by rescuers to point to the target workqueue */</span>
</span><span class='line'> <span class="mi">52</span>         <span class="k">struct</span> <span class="n">workqueue_struct</span> <span class="o">*</span><span class="n">rescue_wq</span><span class="p">;</span>     <span class="cm">/* I: the workqueue to rescue */</span>
</span><span class='line'> <span class="mi">53</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h4><code>workqueue_struct</code></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="mi">228</span> <span class="cm">/*</span>
</span><span class='line'><span class="cm"> 229  * The externally visible workqueue.  It relays the issued work items to</span>
</span><span class='line'><span class="cm"> 230  * the appropriate worker_pool through its pool_workqueues.</span>
</span><span class='line'><span class="cm"> 231  */</span>
</span><span class='line'> <span class="mi">232</span> <span class="k">struct</span> <span class="n">workqueue_struct</span> <span class="p">{</span>
</span><span class='line'> <span class="mi">233</span>         <span class="k">struct</span> <span class="n">list_head</span>        <span class="n">pwqs</span><span class="p">;</span>           <span class="cm">/* WR: all pwqs of this wq */</span>
</span><span class='line'> <span class="mi">234</span>         <span class="k">struct</span> <span class="n">list_head</span>        <span class="n">list</span><span class="p">;</span>           <span class="cm">/* PL: list of all workqueues */</span>
</span><span class='line'> <span class="mi">235</span>
</span><span class='line'> <span class="mi">236</span>         <span class="k">struct</span> <span class="n">mutex</span>            <span class="n">mutex</span><span class="p">;</span>          <span class="cm">/* protects this wq */</span>
</span><span class='line'> <span class="mi">237</span>         <span class="kt">int</span>                     <span class="n">work_color</span><span class="p">;</span>     <span class="cm">/* WQ: current work color */</span>
</span><span class='line'> <span class="mi">238</span>         <span class="kt">int</span>                     <span class="n">flush_color</span><span class="p">;</span>    <span class="cm">/* WQ: current flush color */</span>
</span><span class='line'> <span class="mi">239</span>         <span class="kt">atomic_t</span>                <span class="n">nr_pwqs_to_flush</span><span class="p">;</span> <span class="cm">/* flush in progress */</span>
</span><span class='line'> <span class="mi">240</span>         <span class="k">struct</span> <span class="n">wq_flusher</span>       <span class="o">*</span><span class="n">first_flusher</span><span class="p">;</span> <span class="cm">/* WQ: first flusher */</span>
</span><span class='line'> <span class="mi">241</span>         <span class="k">struct</span> <span class="n">list_head</span>        <span class="n">flusher_queue</span><span class="p">;</span>  <span class="cm">/* WQ: flush waiters */</span>
</span><span class='line'> <span class="mi">242</span>         <span class="k">struct</span> <span class="n">list_head</span>        <span class="n">flusher_overflow</span><span class="p">;</span> <span class="cm">/* WQ: flush overflow list */</span>
</span><span class='line'> <span class="mi">243</span>
</span><span class='line'> <span class="mi">244</span>         <span class="k">struct</span> <span class="n">list_head</span>        <span class="n">maydays</span><span class="p">;</span>        <span class="cm">/* MD: pwqs requesting rescue */</span>
</span><span class='line'> <span class="mi">245</span>         <span class="k">struct</span> <span class="n">worker</span>           <span class="o">*</span><span class="n">rescuer</span><span class="p">;</span>       <span class="cm">/* I: rescue worker */</span>
</span><span class='line'> <span class="mi">246</span>
</span><span class='line'> <span class="mi">247</span>         <span class="kt">int</span>                     <span class="n">nr_drainers</span><span class="p">;</span>    <span class="cm">/* WQ: drain in progress */</span>
</span><span class='line'> <span class="mi">248</span>         <span class="kt">int</span>                     <span class="n">saved_max_active</span><span class="p">;</span> <span class="cm">/* WQ: saved pwq max_active */</span>
</span><span class='line'> <span class="mi">249</span>
</span><span class='line'> <span class="mi">250</span>         <span class="k">struct</span> <span class="n">workqueue_attrs</span>  <span class="o">*</span><span class="n">unbound_attrs</span><span class="p">;</span> <span class="cm">/* WQ: only for unbound wqs */</span>
</span><span class='line'> <span class="mi">251</span>         <span class="k">struct</span> <span class="n">pool_workqueue</span>   <span class="o">*</span><span class="n">dfl_pwq</span><span class="p">;</span>       <span class="cm">/* WQ: only for unbound wqs */</span>
</span><span class='line'> <span class="mi">252</span>
</span><span class='line'> <span class="mi">253</span> <span class="err">#</span><span class="n">ifdef</span> <span class="n">CONFIG_SYSFS</span>
</span><span class='line'> <span class="mi">254</span>         <span class="k">struct</span> <span class="n">wq_device</span>        <span class="o">*</span><span class="n">wq_dev</span><span class="p">;</span>        <span class="cm">/* I: for sysfs interface */</span>
</span><span class='line'> <span class="mi">255</span> <span class="err">#</span><span class="n">endif</span>
</span><span class='line'> <span class="mi">256</span> <span class="err">#</span><span class="n">ifdef</span> <span class="n">CONFIG_LOCKDEP</span>
</span><span class='line'> <span class="mi">257</span>         <span class="k">struct</span> <span class="n">lockdep_map</span>      <span class="n">lockdep_map</span><span class="p">;</span>
</span><span class='line'> <span class="mi">258</span> <span class="err">#</span><span class="n">endif</span>
</span><span class='line'> <span class="mi">259</span>         <span class="kt">char</span>                    <span class="n">name</span><span class="p">[</span><span class="n">WQ_NAME_LEN</span><span class="p">];</span> <span class="cm">/* I: workqueue name */</span>
</span><span class='line'> <span class="mi">260</span>
</span><span class='line'> <span class="mi">261</span>         <span class="cm">/* hot fields used during command issue, aligned to cacheline */</span>
</span><span class='line'> <span class="mi">262</span>         <span class="kt">unsigned</span> <span class="kt">int</span>            <span class="n">flags</span> <span class="n">____cacheline_aligned</span><span class="p">;</span> <span class="cm">/* WQ: WQ_* flags */</span>
</span><span class='line'> <span class="mi">263</span>         <span class="k">struct</span> <span class="n">pool_workqueue</span> <span class="n">__percpu</span> <span class="o">*</span><span class="n">cpu_pwqs</span><span class="p">;</span> <span class="cm">/* I: per-cpu pwqs */</span>
</span><span class='line'> <span class="mi">264</span>         <span class="k">struct</span> <span class="n">pool_workqueue</span> <span class="n">__rcu</span> <span class="o">*</span><span class="n">numa_pwq_tbl</span><span class="p">[];</span> <span class="cm">/* FR: unbound pwqs indexed by node */</span>
</span><span class='line'> <span class="mi">265</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h4><code>struct worker_pool</code></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="mi">143</span> <span class="k">struct</span> <span class="n">worker_pool</span> <span class="p">{</span>
</span><span class='line'> <span class="mi">144</span>         <span class="kt">spinlock_t</span>              <span class="n">lock</span><span class="p">;</span>           <span class="cm">/* the pool lock */</span>
</span><span class='line'> <span class="mi">145</span>         <span class="kt">int</span>                     <span class="n">cpu</span><span class="p">;</span>            <span class="cm">/* I: the associated cpu */</span>
</span><span class='line'> <span class="mi">146</span>         <span class="kt">int</span>                     <span class="n">node</span><span class="p">;</span>           <span class="cm">/* I: the associated node ID */</span>
</span><span class='line'> <span class="mi">147</span>         <span class="kt">int</span>                     <span class="n">id</span><span class="p">;</span>             <span class="cm">/* I: pool ID */</span>
</span><span class='line'> <span class="mi">148</span>         <span class="kt">unsigned</span> <span class="kt">int</span>            <span class="n">flags</span><span class="p">;</span>          <span class="cm">/* X: flags */</span>
</span><span class='line'> <span class="mi">149</span>
</span><span class='line'> <span class="mi">150</span>         <span class="k">struct</span> <span class="n">list_head</span>        <span class="n">worklist</span><span class="p">;</span>       <span class="cm">/* L: list of pending works */</span>
</span><span class='line'> <span class="mi">151</span>         <span class="kt">int</span>                     <span class="n">nr_workers</span><span class="p">;</span>     <span class="cm">/* L: total number of workers */</span>
</span><span class='line'> <span class="mi">152</span>
</span><span class='line'> <span class="mi">153</span>         <span class="cm">/* nr_idle includes the ones off idle_list for rebinding */</span>
</span><span class='line'> <span class="mi">154</span>         <span class="kt">int</span>                     <span class="n">nr_idle</span><span class="p">;</span>        <span class="cm">/* L: currently idle ones */</span>
</span><span class='line'> <span class="mi">155</span>
</span><span class='line'> <span class="mi">156</span>         <span class="k">struct</span> <span class="n">list_head</span>        <span class="n">idle_list</span><span class="p">;</span>      <span class="cm">/* X: list of idle workers */</span>
</span><span class='line'> <span class="mi">157</span>         <span class="k">struct</span> <span class="n">timer_list</span>       <span class="n">idle_timer</span><span class="p">;</span>     <span class="cm">/* L: worker idle timeout */</span>
</span><span class='line'> <span class="mi">158</span>         <span class="k">struct</span> <span class="n">timer_list</span>       <span class="n">mayday_timer</span><span class="p">;</span>   <span class="cm">/* L: SOS timer for workers */</span>
</span><span class='line'> <span class="mi">159</span>
</span><span class='line'> <span class="mi">160</span>         <span class="cm">/* a workers is either on busy_hash or idle_list, or the manager */</span>
</span><span class='line'> <span class="mi">161</span>         <span class="n">DECLARE_HASHTABLE</span><span class="p">(</span><span class="n">busy_hash</span><span class="p">,</span> <span class="n">BUSY_WORKER_HASH_ORDER</span><span class="p">);</span>
</span><span class='line'> <span class="mi">162</span>                                                 <span class="cm">/* L: hash of busy workers */</span>
</span><span class='line'> <span class="mi">163</span>
</span><span class='line'> <span class="mi">164</span>         <span class="cm">/* see manage_workers() for details on the two manager mutexes */</span>
</span><span class='line'> <span class="mi">165</span>         <span class="k">struct</span> <span class="n">mutex</span>            <span class="n">manager_arb</span><span class="p">;</span>    <span class="cm">/* manager arbitration */</span>
</span><span class='line'> <span class="mi">166</span>         <span class="k">struct</span> <span class="n">mutex</span>            <span class="n">manager_mutex</span><span class="p">;</span>  <span class="cm">/* manager exclusion */</span>
</span><span class='line'> <span class="mi">167</span>         <span class="k">struct</span> <span class="n">idr</span>              <span class="n">worker_idr</span><span class="p">;</span>     <span class="cm">/* MG: worker IDs and iteration */</span>
</span><span class='line'> <span class="mi">168</span>
</span><span class='line'> <span class="mi">169</span>         <span class="k">struct</span> <span class="n">workqueue_attrs</span>  <span class="o">*</span><span class="n">attrs</span><span class="p">;</span>         <span class="cm">/* I: worker attributes */</span>
</span><span class='line'> <span class="mi">170</span>         <span class="k">struct</span> <span class="n">hlist_node</span>       <span class="n">hash_node</span><span class="p">;</span>      <span class="cm">/* PL: unbound_pool_hash node */</span>
</span><span class='line'> <span class="mi">171</span>         <span class="kt">int</span>                     <span class="n">refcnt</span><span class="p">;</span>         <span class="cm">/* PL: refcnt for unbound pools */</span>
</span><span class='line'> <span class="mi">172</span>
</span><span class='line'> <span class="mi">173</span>         <span class="cm">/*</span>
</span><span class='line'><span class="cm"> 174          * The current concurrency level.  As it&#39;s likely to be accessed</span>
</span><span class='line'><span class="cm"> 175          * from other CPUs during try_to_wake_up(), put it in a separate</span>
</span><span class='line'><span class="cm"> 176          * cacheline.</span>
</span><span class='line'><span class="cm"> 177          */</span>
</span><span class='line'> <span class="mi">178</span>         <span class="kt">atomic_t</span>                <span class="n">nr_running</span> <span class="n">____cacheline_aligned_in_smp</span><span class="p">;</span>
</span><span class='line'> <span class="mi">179</span>
</span><span class='line'> <span class="mi">180</span>         <span class="cm">/*</span>
</span><span class='line'><span class="cm"> 181          * Destruction of pool is sched-RCU protected to allow dereferences</span>
</span><span class='line'><span class="cm"> 182          * from get_work_pool().</span>
</span><span class='line'><span class="cm"> 183          */</span>
</span><span class='line'> <span class="mi">184</span>         <span class="k">struct</span> <span class="n">rcu_head</span>         <span class="n">rcu</span><span class="p">;</span>
</span><span class='line'> <span class="mi">185</span> <span class="p">}</span> <span class="n">____cacheline_aligned_in_smp</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">297</span> <span class="k">static</span> <span class="nf">DEFINE_PER_CPU_SHARED_ALIGNED</span><span class="p">(</span><span class="k">struct</span> <span class="n">worker_pool</span> <span class="p">[</span><span class="n">NR_STD_WORKER_POOLS</span><span class="p">],</span>
</span><span class='line'><span class="mi">298</span>                                      <span class="n">cpu_worker_pools</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4><code>struct pool_workqueue</code></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="mi">193</span> <span class="k">struct</span> <span class="n">pool_workqueue</span> <span class="p">{</span>
</span><span class='line'> <span class="mi">194</span>         <span class="k">struct</span> <span class="n">worker_pool</span>      <span class="o">*</span><span class="n">pool</span><span class="p">;</span>          <span class="cm">/* I: the associated pool */</span>
</span><span class='line'> <span class="mi">195</span>         <span class="k">struct</span> <span class="n">workqueue_struct</span> <span class="o">*</span><span class="n">wq</span><span class="p">;</span>            <span class="cm">/* I: the owning workqueue */</span>
</span><span class='line'> <span class="mi">196</span>         <span class="kt">int</span>                     <span class="n">work_color</span><span class="p">;</span>     <span class="cm">/* L: current color */</span>
</span><span class='line'> <span class="mi">197</span>         <span class="kt">int</span>                     <span class="n">flush_color</span><span class="p">;</span>    <span class="cm">/* L: flushing color */</span>
</span><span class='line'> <span class="mi">198</span>         <span class="kt">int</span>                     <span class="n">refcnt</span><span class="p">;</span>         <span class="cm">/* L: reference count */</span>
</span><span class='line'> <span class="mi">199</span>         <span class="kt">int</span>                     <span class="n">nr_in_flight</span><span class="p">[</span><span class="n">WORK_NR_COLORS</span><span class="p">];</span>
</span><span class='line'> <span class="mi">200</span>                                                 <span class="cm">/* L: nr of in_flight works */</span>
</span><span class='line'> <span class="mi">201</span>         <span class="kt">int</span>                     <span class="n">nr_active</span><span class="p">;</span>      <span class="cm">/* L: nr of active works */</span>
</span><span class='line'> <span class="mi">202</span>         <span class="kt">int</span>                     <span class="n">max_active</span><span class="p">;</span>     <span class="cm">/* L: max active works */</span>
</span><span class='line'> <span class="mi">203</span>         <span class="k">struct</span> <span class="n">list_head</span>        <span class="n">delayed_works</span><span class="p">;</span>  <span class="cm">/* L: delayed works */</span>
</span><span class='line'> <span class="mi">204</span>         <span class="k">struct</span> <span class="n">list_head</span>        <span class="n">pwqs_node</span><span class="p">;</span>      <span class="cm">/* WR: node on wq-&gt;pwqs */</span>
</span><span class='line'> <span class="mi">205</span>         <span class="k">struct</span> <span class="n">list_head</span>        <span class="n">mayday_node</span><span class="p">;</span>    <span class="cm">/* MD: node on wq-&gt;maydays */</span>
</span><span class='line'> <span class="mi">206</span>
</span><span class='line'> <span class="mi">207</span>         <span class="cm">/*</span>
</span><span class='line'><span class="cm"> 208          * Release of unbound pwq is punted to system_wq.  See put_pwq()</span>
</span><span class='line'><span class="cm"> 209          * and pwq_unbound_release_workfn() for details.  pool_workqueue</span>
</span><span class='line'><span class="cm"> 210          * itself is also sched-RCU protected so that the first pwq can be</span>
</span><span class='line'><span class="cm"> 211          * determined without grabbing wq-&gt;mutex.</span>
</span><span class='line'><span class="cm"> 212          */</span>
</span><span class='line'> <span class="mi">213</span>         <span class="k">struct</span> <span class="n">work_struct</span>      <span class="n">unbound_release_work</span><span class="p">;</span>
</span><span class='line'> <span class="mi">214</span>         <span class="k">struct</span> <span class="n">rcu_head</span>         <span class="n">rcu</span><span class="p">;</span>
</span><span class='line'> <span class="mi">215</span> <span class="p">}</span> <span class="n">__aligned</span><span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">WORK_STRUCT_FLAG_BITS</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4><code>work_struct</code></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">100</span> <span class="k">struct</span> <span class="n">work_struct</span> <span class="p">{</span>
</span><span class='line'><span class="mi">101</span>         <span class="kt">atomic_long_t</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'><span class="mi">102</span>         <span class="k">struct</span> <span class="n">list_head</span> <span class="n">entry</span><span class="p">;</span>
</span><span class='line'><span class="mi">103</span>         <span class="kt">work_func_t</span> <span class="n">func</span><span class="p">;</span>
</span><span class='line'><span class="mi">104</span> <span class="err">#</span><span class="n">ifdef</span> <span class="n">CONFIG_LOCKDEP</span>
</span><span class='line'><span class="mi">105</span>         <span class="k">struct</span> <span class="n">lockdep_map</span> <span class="n">lockdep_map</span><span class="p">;</span>
</span><span class='line'><span class="mi">106</span> <span class="err">#</span><span class="n">endif</span>
</span><span class='line'><span class="mi">107</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h4><code>struct delayed_work</code></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">113</span> <span class="k">struct</span> <span class="n">delayed_work</span> <span class="p">{</span>
</span><span class='line'><span class="mi">114</span>         <span class="k">struct</span> <span class="n">work_struct</span> <span class="n">work</span><span class="p">;</span>
</span><span class='line'><span class="mi">115</span>         <span class="k">struct</span> <span class="n">timer_list</span> <span class="n">timer</span><span class="p">;</span>
</span><span class='line'><span class="mi">116</span>
</span><span class='line'><span class="mi">117</span>         <span class="cm">/* target workqueue and CPU -&gt;timer uses to queue -&gt;work */</span>
</span><span class='line'><span class="mi">118</span>         <span class="k">struct</span> <span class="n">workqueue_struct</span> <span class="o">*</span><span class="n">wq</span><span class="p">;</span>
</span><span class='line'><span class="mi">119</span>         <span class="kt">int</span> <span class="n">cpu</span><span class="p">;</span>
</span><span class='line'><span class="mi">120</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Define a delayed worker.</h4>

<p>include two parts:</p>

<ol>
<li><p>timer: to process the &lsquo;delay&rsquo;, define a timer with <code>delayed_work_timer_fn</code>.
 which just call <code>__queue_work</code>.</p></li>
<li><p>all the other parts are done for <code>work</code>.</p></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="nf">DECLARE_DELAYED_WORK</span><span class="p">(</span><span class="n">dst_gc_work</span><span class="p">,</span> <span class="n">dst_gc_task</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">174</span> <span class="err">#</span><span class="n">define</span> <span class="n">DECLARE_DELAYED_WORK</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>                                      \
</span><span class='line'><span class="mi">175</span>         <span class="k">struct</span> <span class="n">delayed_work</span> <span class="n">n</span> <span class="o">=</span> <span class="n">__DELAYED_WORK_INITIALIZER</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">164</span> <span class="err">#</span><span class="n">define</span> <span class="n">__DELAYED_WORK_INITIALIZER</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">tflags</span><span class="p">)</span> <span class="p">{</span>                      \
</span><span class='line'><span class="mi">165</span>         <span class="p">.</span><span class="n">work</span> <span class="o">=</span> <span class="n">__WORK_INITIALIZER</span><span class="p">((</span><span class="n">n</span><span class="p">).</span><span class="n">work</span><span class="p">,</span> <span class="p">(</span><span class="n">f</span><span class="p">)),</span>                      \
</span><span class='line'><span class="mi">166</span>         <span class="p">.</span><span class="n">timer</span> <span class="o">=</span> <span class="n">__TIMER_INITIALIZER</span><span class="p">(</span><span class="n">delayed_work_timer_fn</span><span class="p">,</span>             \
</span><span class='line'><span class="mi">167</span>                                      <span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="o">&amp;</span><span class="p">(</span><span class="n">n</span><span class="p">),</span>            \
</span><span class='line'><span class="mi">168</span>                                      <span class="p">(</span><span class="n">tflags</span><span class="p">)</span> <span class="o">|</span> <span class="n">TIMER_IRQSAFE</span><span class="p">),</span>         \
</span><span class='line'><span class="mi">169</span>         <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">157</span> <span class="err">#</span><span class="n">define</span> <span class="n">__WORK_INITIALIZER</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span> <span class="p">{</span>                                      \
</span><span class='line'><span class="mi">158</span>         <span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">WORK_DATA_STATIC_INIT</span><span class="p">(),</span>                                \
</span><span class='line'><span class="mi">159</span>         <span class="p">.</span><span class="n">entry</span>  <span class="o">=</span> <span class="p">{</span> <span class="o">&amp;</span><span class="p">(</span><span class="n">n</span><span class="p">).</span><span class="n">entry</span><span class="p">,</span> <span class="o">&amp;</span><span class="p">(</span><span class="n">n</span><span class="p">).</span><span class="n">entry</span> <span class="p">},</span>                           \
</span><span class='line'><span class="mi">160</span>         <span class="p">.</span><span class="n">func</span> <span class="o">=</span> <span class="p">(</span><span class="n">f</span><span class="p">),</span>                                                    \
</span><span class='line'><span class="mi">161</span>         <span class="n">__WORK_INIT_LOCKDEP_MAP</span><span class="p">(</span><span class="err">#</span><span class="n">n</span><span class="p">,</span> <span class="o">&amp;</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>                               \
</span><span class='line'><span class="mi">162</span>         <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">109</span> <span class="err">#</span><span class="n">define</span> <span class="n">WORK_DATA_INIT</span><span class="p">()</span>        <span class="n">ATOMIC_LONG_INIT</span><span class="p">(</span><span class="n">WORK_STRUCT_NO_POOL</span><span class="p">)</span>
</span><span class='line'><span class="mi">110</span> <span class="err">#</span><span class="n">define</span> <span class="n">WORK_DATA_STATIC_INIT</span><span class="p">()</span> \
</span><span class='line'><span class="mi">111</span>         <span class="n">ATOMIC_LONG_INIT</span><span class="p">(</span><span class="n">WORK_STRUCT_NO_POOL</span> <span class="o">|</span> <span class="n">WORK_STRUCT_STATIC</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">1444</span> <span class="kt">void</span> <span class="n">delayed_work_timer_fn</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">__data</span><span class="p">)</span>
</span><span class='line'><span class="mi">1445</span> <span class="p">{</span>
</span><span class='line'><span class="mi">1446</span>         <span class="k">struct</span> <span class="n">delayed_work</span> <span class="o">*</span><span class="n">dwork</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">delayed_work</span> <span class="o">*</span><span class="p">)</span><span class="n">__data</span><span class="p">;</span>
</span><span class='line'><span class="mi">1447</span>
</span><span class='line'><span class="mi">1448</span>         <span class="cm">/* should have been called from irqsafe timer with irq already off */</span>
</span><span class='line'><span class="mi">1449</span>         <span class="n">__queue_work</span><span class="p">(</span><span class="n">dwork</span><span class="o">-&gt;</span><span class="n">cpu</span><span class="p">,</span> <span class="n">dwork</span><span class="o">-&gt;</span><span class="n">wq</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">dwork</span><span class="o">-&gt;</span><span class="n">work</span><span class="p">);</span>
</span><span class='line'><span class="mi">1450</span> <span class="p">}</span>
</span><span class='line'><span class="mi">1451</span> <span class="n">EXPORT_SYMBOL</span><span class="p">(</span><span class="n">delayed_work_timer_fn</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>define a work or deferrable work.</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">171</span> <span class="err">#</span><span class="n">define</span> <span class="n">DECLARE_WORK</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>                                              \
</span><span class='line'><span class="mi">172</span>         <span class="k">struct</span> <span class="n">work_struct</span> <span class="n">n</span> <span class="o">=</span> <span class="n">__WORK_INITIALIZER</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
</span><span class='line'><span class="mi">177</span> <span class="err">#</span><span class="n">define</span> <span class="n">DECLARE_DEFERRABLE_WORK</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>                                   \
</span><span class='line'><span class="mi">178</span>         <span class="k">struct</span> <span class="n">delayed_work</span> <span class="n">n</span> <span class="o">=</span> <span class="n">__DELAYED_WORK_INITIALIZER</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">TIMER_DEFERRABLE</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dst Garbage]]></title>
    <link href="http://martinbj2008.github.io/blog/2014/02/11/dst-garbage/"/>
    <updated>2014-02-11T14:22:00+08:00</updated>
    <id>http://martinbj2008.github.io/blog/2014/02/11/dst-garbage</id>
    <content type="html"><![CDATA[<h3>dst garbage summary</h3>

<p><code>garbage collection</code> is a common method used in kernel.
When a object(struct,memeory) become invalid, we need
free them, but the object maybe reference by others.</p>

<p>such as a <code>dst_entry</code> is not invalid, and it is still
referenced(used) by others.</p>

<p>then <code>__dst_free</code> will be called for this case.
It will first set <code>dst</code> to dirty(dead),
and then put it into <code>dst_garbage.list</code> by <code>dst-&gt;next</code>.</p>

<p>Then a workqueue task will check the <code>dst</code>&rsquo;s reference,
and free(destory) it when no reference on it.</p>

<p>Two key struct <strong><code>struct dst_garbage</code></strong> and <strong><code>dst_gc_work</code></strong></p>

<!-- more -->


<h3><code>struct dst_garbage</code></h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="mi">38</span> <span class="cm">/*</span>
</span><span class='line'><span class="cm"> 39  * We want to keep lock &amp; list close together</span>
</span><span class='line'><span class="cm"> 40  * to dirty as few cache lines as possible in __dst_free().</span>
</span><span class='line'><span class="cm"> 41  * As this is not a very strong hint, we dont force an alignment on SMP.</span>
</span><span class='line'><span class="cm"> 42  */</span>
</span><span class='line'> <span class="mi">43</span> <span class="k">static</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'> <span class="mi">44</span>         <span class="kt">spinlock_t</span>              <span class="n">lock</span><span class="p">;</span>
</span><span class='line'> <span class="mi">45</span>         <span class="k">struct</span> <span class="n">dst_entry</span>        <span class="o">*</span><span class="n">list</span><span class="p">;</span>
</span><span class='line'> <span class="mi">46</span>         <span class="kt">unsigned</span> <span class="kt">long</span>           <span class="n">timer_inc</span><span class="p">;</span>
</span><span class='line'> <span class="mi">47</span>         <span class="kt">unsigned</span> <span class="kt">long</span>           <span class="n">timer_expires</span><span class="p">;</span>
</span><span class='line'> <span class="mi">48</span> <span class="p">}</span> <span class="n">dst_garbage</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'> <span class="mi">49</span>         <span class="p">.</span><span class="n">lock</span> <span class="o">=</span> <span class="n">__SPIN_LOCK_UNLOCKED</span><span class="p">(</span><span class="n">dst_garbage</span><span class="p">.</span><span class="n">lock</span><span class="p">),</span>
</span><span class='line'> <span class="mi">50</span>         <span class="p">.</span><span class="n">timer_inc</span> <span class="o">=</span> <span class="n">DST_GC_MAX</span><span class="p">,</span>
</span><span class='line'> <span class="mi">51</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">52</span> <span class="k">static</span> <span class="kt">void</span> <span class="nf">dst_gc_task</span><span class="p">(</span><span class="k">struct</span> <span class="n">work_struct</span> <span class="o">*</span><span class="n">work</span><span class="p">);</span>
</span><span class='line'> <span class="p">...</span>
</span><span class='line'><span class="mi">55</span> <span class="k">static</span> <span class="n">DECLARE_DELAYED_WORK</span><span class="p">(</span><span class="n">dst_gc_work</span><span class="p">,</span> <span class="n">dst_gc_task</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">217</span> <span class="kt">void</span> <span class="nf">__dst_free</span><span class="p">(</span><span class="k">struct</span> <span class="n">dst_entry</span> <span class="o">*</span><span class="n">dst</span><span class="p">)</span>
</span><span class='line'><span class="mi">218</span> <span class="p">{</span>
</span><span class='line'><span class="mi">219</span>         <span class="n">spin_lock_bh</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dst_garbage</span><span class="p">.</span><span class="n">lock</span><span class="p">);</span>
</span><span class='line'><span class="mi">220</span>         <span class="nf">___dst_free</span><span class="p">(</span><span class="n">dst</span><span class="p">);</span>
</span><span class='line'><span class="mi">221</span>         <span class="n">dst</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">dst_garbage</span><span class="p">.</span><span class="n">list</span><span class="p">;</span>
</span><span class='line'><span class="mi">222</span>         <span class="n">dst_garbage</span><span class="p">.</span><span class="n">list</span> <span class="o">=</span> <span class="n">dst</span><span class="p">;</span>
</span><span class='line'><span class="mi">223</span>         <span class="nf">if</span> <span class="p">(</span><span class="n">dst_garbage</span><span class="p">.</span><span class="n">timer_inc</span> <span class="o">&gt;</span> <span class="n">DST_GC_INC</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="mi">224</span>                 <span class="n">dst_garbage</span><span class="p">.</span><span class="n">timer_inc</span> <span class="o">=</span> <span class="n">DST_GC_INC</span><span class="p">;</span>
</span><span class='line'><span class="mi">225</span>                 <span class="n">dst_garbage</span><span class="p">.</span><span class="n">timer_expires</span> <span class="o">=</span> <span class="n">DST_GC_MIN</span><span class="p">;</span>
</span><span class='line'><span class="mi">226</span>                 <span class="n">mod_delayed_work</span><span class="p">(</span><span class="n">system_wq</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">dst_gc_work</span><span class="p">,</span>
</span><span class='line'><span class="mi">227</span>                                  <span class="n">dst_garbage</span><span class="p">.</span><span class="n">timer_expires</span><span class="p">);</span>
</span><span class='line'><span class="mi">228</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">229</span>         <span class="nf">spin_unlock_bh</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dst_garbage</span><span class="p">.</span><span class="n">lock</span><span class="p">);</span>
</span><span class='line'><span class="mi">230</span> <span class="p">}</span>
</span><span class='line'><span class="mi">231</span> <span class="n">EXPORT_SYMBOL</span><span class="p">(</span><span class="n">__dst_free</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>dst_gc_task</code></h3>

<p><code>dst_busy_list</code> is not initialized?</p>

<p>There are 3 list in this function.</p>

<h4><code>dst_garbage.list</code>:</h4>

<p>The nodes in this list are added by <code>__dst_free</code>.</p>

<p>Eeach round, <code>dst_gc_task</code> will check this list.
The dst has no reference will be free(destroy).
the others will be appended to <code>dst_busy_list</code>.
So after <strong>a round</strong> , the list will be empty.</p>

<h4><code>dst_busy_list</code></h4>

<p>After <code>dst_gc_task</code> finish, all the referenced <code>dst</code> nodes are in this list.</p>

<h4><code>head</code></h4>

<p>This is temporary list.
All the referenced <code>dst</code> nodes during <code>dst_gc_task</code> are in this list.
Before <code>dst_gc_task</code> finish, they will be moved to <code>dst_busy_list</code>.</p>

<h4>the main function of workqueue <code>dst_gc_task</code></h4>

<ol>
<li>check the old <code>dst</code> nodes,</li>
<li>for the un-referenced node, free(destory) it. or
put them to the temp list <code>head</code>.</li>
<li>for the node in <code>dst_garbage.list</code> do the same
operation like 2</li>
<li>move tmp list <code>head</code> to <code>dst_busy_list</code>.</li>
<li>schedule gc task.</li>
</ol>


<p>NOTE: BH lock are needed because TX softirq also aceess <code>dst_garbage</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="mi">63</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">dst_gc_task</span><span class="p">(</span><span class="k">struct</span> <span class="n">work_struct</span> <span class="o">*</span><span class="n">work</span><span class="p">)</span>
</span><span class='line'> <span class="mi">64</span> <span class="p">{</span>
</span><span class='line'> <span class="mi">65</span>         <span class="kt">int</span>    <span class="n">delayed</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'> <span class="mi">66</span>         <span class="kt">int</span>    <span class="n">work_performed</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'> <span class="mi">67</span>         <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">expires</span> <span class="o">=</span> <span class="o">~</span><span class="mi">0L</span><span class="p">;</span>
</span><span class='line'> <span class="mi">68</span>         <span class="k">struct</span> <span class="n">dst_entry</span> <span class="o">*</span><span class="n">dst</span><span class="p">,</span> <span class="o">*</span><span class="n">next</span><span class="p">,</span> <span class="n">head</span><span class="p">;</span>
</span><span class='line'> <span class="mi">69</span>         <span class="k">struct</span> <span class="n">dst_entry</span> <span class="o">*</span><span class="n">last</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">head</span><span class="p">;</span>
</span><span class='line'> <span class="mi">70</span>
</span><span class='line'> <span class="mi">71</span>         <span class="nf">mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dst_gc_mutex</span><span class="p">);</span>
</span><span class='line'> <span class="mi">72</span>         <span class="n">next</span> <span class="o">=</span> <span class="n">dst_busy_list</span><span class="p">;</span>
</span><span class='line'> <span class="mi">73</span>
</span><span class='line'> <span class="mi">74</span> <span class="nl">loop</span><span class="p">:</span>
</span><span class='line'> <span class="mi">75</span>         <span class="k">while</span> <span class="p">((</span><span class="n">dst</span> <span class="o">=</span> <span class="n">next</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'> <span class="mi">76</span>                 <span class="n">next</span> <span class="o">=</span> <span class="n">dst</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'> <span class="mi">77</span>                 <span class="nf">prefetch</span><span class="p">(</span><span class="o">&amp;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">);</span>
</span><span class='line'> <span class="mi">78</span>                 <span class="nf">cond_resched</span><span class="p">();</span>
</span><span class='line'> <span class="mi">79</span>                 <span class="nf">if</span> <span class="p">(</span><span class="n">likely</span><span class="p">(</span><span class="n">atomic_read</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dst</span><span class="o">-&gt;</span><span class="n">__refcnt</span><span class="p">)))</span> <span class="p">{</span>
</span><span class='line'> <span class="mi">80</span>                         <span class="n">last</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">dst</span><span class="p">;</span>
</span><span class='line'> <span class="mi">81</span>                         <span class="n">last</span> <span class="o">=</span> <span class="n">dst</span><span class="p">;</span>
</span><span class='line'> <span class="mi">82</span>                         <span class="n">delayed</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'> <span class="mi">83</span>                         <span class="k">continue</span><span class="p">;</span>
</span><span class='line'> <span class="mi">84</span>                 <span class="p">}</span>
</span><span class='line'> <span class="mi">85</span>                 <span class="n">work_performed</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'> <span class="mi">86</span>
</span><span class='line'> <span class="mi">87</span>                 <span class="n">dst</span> <span class="o">=</span> <span class="n">dst_destroy</span><span class="p">(</span><span class="n">dst</span><span class="p">);</span>
</span><span class='line'> <span class="mi">88</span>                 <span class="nf">if</span> <span class="p">(</span><span class="n">dst</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'> <span class="mi">89</span>                         <span class="cm">/* NOHASH and still referenced. Unless it is already</span>
</span><span class='line'><span class="cm"> 90                          * on gc list, invalidate it and add to gc list.</span>
</span><span class='line'><span class="cm"> 91                          *</span>
</span><span class='line'><span class="cm"> 92                          * Note: this is temporary. Actually, NOHASH dst&#39;s</span>
</span><span class='line'><span class="cm"> 93                          * must be obsoleted when parent is obsoleted.</span>
</span><span class='line'><span class="cm"> 94                          * But we do not have state &quot;obsoleted, but</span>
</span><span class='line'><span class="cm"> 95                          * referenced by parent&quot;, so it is right.</span>
</span><span class='line'><span class="cm"> 96                          */</span>
</span><span class='line'> <span class="mi">97</span>                         <span class="k">if</span> <span class="p">(</span><span class="n">dst</span><span class="o">-&gt;</span><span class="n">obsolete</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'> <span class="mi">98</span>                                 <span class="k">continue</span><span class="p">;</span>
</span><span class='line'> <span class="mi">99</span>
</span><span class='line'><span class="mi">100</span>                         <span class="n">___dst_free</span><span class="p">(</span><span class="n">dst</span><span class="p">);</span>
</span><span class='line'><span class="mi">101</span>                         <span class="n">dst</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">next</span><span class="p">;</span>
</span><span class='line'><span class="mi">102</span>                         <span class="n">next</span> <span class="o">=</span> <span class="n">dst</span><span class="p">;</span>
</span><span class='line'><span class="mi">103</span>                 <span class="p">}</span>
</span><span class='line'><span class="mi">104</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">105</span>
</span><span class='line'><span class="mi">106</span>         <span class="n">spin_lock_bh</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dst_garbage</span><span class="p">.</span><span class="n">lock</span><span class="p">);</span>
</span><span class='line'><span class="mi">107</span>         <span class="n">next</span> <span class="o">=</span> <span class="n">dst_garbage</span><span class="p">.</span><span class="n">list</span><span class="p">;</span>
</span><span class='line'><span class="mi">108</span>         <span class="nf">if</span> <span class="p">(</span><span class="n">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="mi">109</span>                 <span class="n">dst_garbage</span><span class="p">.</span><span class="n">list</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="mi">110</span>                 <span class="n">spin_unlock_bh</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dst_garbage</span><span class="p">.</span><span class="n">lock</span><span class="p">);</span>
</span><span class='line'><span class="mi">111</span>                 <span class="k">goto</span> <span class="n">loop</span><span class="p">;</span>
</span><span class='line'><span class="mi">112</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">113</span>         <span class="n">last</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="mi">114</span>         <span class="n">dst_busy_list</span> <span class="o">=</span> <span class="n">head</span><span class="p">.</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'><span class="mi">115</span>         <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">dst_busy_list</span><span class="p">)</span>
</span><span class='line'><span class="mi">116</span>                 <span class="n">dst_garbage</span><span class="p">.</span><span class="n">timer_inc</span> <span class="o">=</span> <span class="n">DST_GC_MAX</span><span class="p">;</span>
</span><span class='line'><span class="mi">117</span>         <span class="k">else</span> <span class="p">{</span>
</span><span class='line'><span class="mi">118</span>                 <span class="cm">/*</span>
</span><span class='line'><span class="cm">119                  * if we freed less than 1/10 of delayed entries,</span>
</span><span class='line'><span class="cm">120                  * we can sleep longer.</span>
</span><span class='line'><span class="cm">121                  */</span>
</span><span class='line'><span class="mi">122</span>                 <span class="k">if</span> <span class="p">(</span><span class="n">work_performed</span> <span class="o">&lt;=</span> <span class="n">delayed</span><span class="o">/</span><span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="mi">123</span>                         <span class="n">dst_garbage</span><span class="p">.</span><span class="n">timer_expires</span> <span class="o">+=</span> <span class="n">dst_garbage</span><span class="p">.</span><span class="n">timer_inc</span><span class="p">;</span>
</span><span class='line'><span class="mi">124</span>                         <span class="k">if</span> <span class="p">(</span><span class="n">dst_garbage</span><span class="p">.</span><span class="n">timer_expires</span> <span class="o">&gt;</span> <span class="n">DST_GC_MAX</span><span class="p">)</span>
</span><span class='line'><span class="mi">125</span>                                 <span class="n">dst_garbage</span><span class="p">.</span><span class="n">timer_expires</span> <span class="o">=</span> <span class="n">DST_GC_MAX</span><span class="p">;</span>
</span><span class='line'><span class="mi">126</span>                         <span class="n">dst_garbage</span><span class="p">.</span><span class="n">timer_inc</span> <span class="o">+=</span> <span class="n">DST_GC_INC</span><span class="p">;</span>
</span><span class='line'><span class="mi">127</span>                 <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'><span class="mi">128</span>                         <span class="n">dst_garbage</span><span class="p">.</span><span class="n">timer_inc</span> <span class="o">=</span> <span class="n">DST_GC_INC</span><span class="p">;</span>
</span><span class='line'><span class="mi">129</span>                         <span class="n">dst_garbage</span><span class="p">.</span><span class="n">timer_expires</span> <span class="o">=</span> <span class="n">DST_GC_MIN</span><span class="p">;</span>
</span><span class='line'><span class="mi">130</span>                 <span class="p">}</span>
</span><span class='line'><span class="mi">131</span>                 <span class="n">expires</span> <span class="o">=</span> <span class="n">dst_garbage</span><span class="p">.</span><span class="n">timer_expires</span><span class="p">;</span>
</span><span class='line'><span class="mi">132</span>                 <span class="cm">/*</span>
</span><span class='line'><span class="cm">133                  * if the next desired timer is more than 4 seconds in the</span>
</span><span class='line'><span class="cm">134                  * future then round the timer to whole seconds</span>
</span><span class='line'><span class="cm">135                  */</span>
</span><span class='line'><span class="mi">136</span>                 <span class="k">if</span> <span class="p">(</span><span class="n">expires</span> <span class="o">&gt;</span> <span class="mi">4</span><span class="o">*</span><span class="n">HZ</span><span class="p">)</span>
</span><span class='line'><span class="mi">137</span>                         <span class="n">expires</span> <span class="o">=</span> <span class="n">round_jiffies_relative</span><span class="p">(</span><span class="n">expires</span><span class="p">);</span>
</span><span class='line'><span class="mi">138</span>                 <span class="nf">schedule_delayed_work</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dst_gc_work</span><span class="p">,</span> <span class="n">expires</span><span class="p">);</span>
</span><span class='line'><span class="mi">139</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">140</span>
</span><span class='line'><span class="mi">141</span>         <span class="n">spin_unlock_bh</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dst_garbage</span><span class="p">.</span><span class="n">lock</span><span class="p">);</span>
</span><span class='line'><span class="mi">142</span>         <span class="nf">mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dst_gc_mutex</span><span class="p">);</span>
</span><span class='line'><span class="mi">143</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dst Ops]]></title>
    <link href="http://martinbj2008.github.io/blog/2014/02/10/dst-ops/"/>
    <updated>2014-02-10T15:31:00+08:00</updated>
    <id>http://martinbj2008.github.io/blog/2014/02/10/dst-ops</id>
    <content type="html"><![CDATA[<h3>Call trace</h3>

<p>forward a packet.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&gt;</span> <span class="n">ip_rcv_finish</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">ip_route_input_noref</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">ip_route_input_slow</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">fib_lookup</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">ip_mkroute_input</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">dst_input</span><span class="p">(</span><span class="n">skb</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">ip_mkroute_input</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">__mkroute_input</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">rth</span> <span class="o">=</span> <span class="n">rt_dst_alloc</span><span class="p">(...)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">skb_dst_set</span><span class="p">(</span><span class="n">skb</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">rth</span><span class="o">-&gt;</span><span class="n">dst</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p><img src="http://martinbj2008.github.io/images/net/skb_refdst.jpeg" alt="case 3b" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">1410</span> <span class="k">static</span> <span class="k">struct</span> <span class="n">rtable</span> <span class="o">*</span><span class="nf">rt_dst_alloc</span><span class="p">(</span><span class="k">struct</span> <span class="n">net_device</span> <span class="o">*</span><span class="n">dev</span><span class="p">,</span>
</span><span class='line'><span class="mi">1411</span>                                    <span class="kt">bool</span> <span class="n">nopolicy</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">noxfrm</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">will_cache</span><span class="p">)</span>
</span><span class='line'><span class="mi">1412</span> <span class="p">{</span>
</span><span class='line'><span class="mi">1413</span>         <span class="k">return</span> <span class="n">dst_alloc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ipv4_dst_ops</span><span class="p">,</span> <span class="n">dev</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">DST_OBSOLETE_FORCE_CHK</span><span class="p">,</span>
</span><span class='line'><span class="mi">1414</span>                          <span class="p">(</span><span class="n">will_cache</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="p">(</span><span class="n">DST_HOST</span> <span class="o">|</span> <span class="n">DST_NOCACHE</span><span class="p">))</span> <span class="o">|</span>
</span><span class='line'><span class="mi">1415</span>                          <span class="p">(</span><span class="n">nopolicy</span> <span class="o">?</span> <span class="nl">DST_NOPOLICY</span> <span class="p">:</span> <span class="mi">0</span><span class="p">)</span> <span class="o">|</span>
</span><span class='line'><span class="mi">1416</span>                          <span class="p">(</span><span class="n">noxfrm</span> <span class="o">?</span> <span class="nl">DST_NOXFRM</span> <span class="p">:</span> <span class="mi">0</span><span class="p">));</span>
</span><span class='line'><span class="mi">1417</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>#</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">2711</span> <span class="kt">int</span> <span class="n">__init</span> <span class="n">ip_rt_init</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="mi">2712</span> <span class="p">{</span>
</span><span class='line'><span class="mi">2713</span>         <span class="kt">int</span> <span class="n">rc</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="mi">2714</span>
</span><span class='line'><span class="mi">2715</span> <span class="err">#</span><span class="n">ifdef</span> <span class="n">CONFIG_IP_ROUTE_CLASSID</span>
</span><span class='line'><span class="mi">2716</span>         <span class="n">ip_rt_acct</span> <span class="o">=</span> <span class="n">__alloc_percpu</span><span class="p">(</span><span class="mi">256</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">ip_rt_acct</span><span class="p">),</span> <span class="n">__alignof__</span><span class="p">(</span><span class="k">struct</span> <span class="n">ip_rt_acct</span><span class="p">));</span>
</span><span class='line'><span class="mi">2717</span>         <span class="nf">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ip_rt_acct</span><span class="p">)</span>
</span><span class='line'><span class="mi">2718</span>                 <span class="n">panic</span><span class="p">(</span><span class="s">&quot;IP: failed to allocate ip_rt_acct</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="mi">2719</span> <span class="err">#</span><span class="n">endif</span>
</span><span class='line'><span class="mi">2720</span>
</span><span class='line'><span class="mi">2721</span>         <span class="n">ipv4_dst_ops</span><span class="p">.</span><span class="n">kmem_cachep</span> <span class="o">=</span>
</span><span class='line'><span class="mi">2722</span>                 <span class="n">kmem_cache_create</span><span class="p">(</span><span class="s">&quot;ip_dst_cache&quot;</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">rtable</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'><span class="mi">2723</span>                                   <span class="n">SLAB_HWCACHE_ALIGN</span><span class="o">|</span><span class="n">SLAB_PANIC</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="mi">2724</span>
</span><span class='line'><span class="mi">2725</span>         <span class="n">ipv4_dst_blackhole_ops</span><span class="p">.</span><span class="n">kmem_cachep</span> <span class="o">=</span> <span class="n">ipv4_dst_ops</span><span class="p">.</span><span class="n">kmem_cachep</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">162</span> <span class="kt">void</span> <span class="o">*</span><span class="n">dst_alloc</span><span class="p">(</span><span class="k">struct</span> <span class="n">dst_ops</span> <span class="o">*</span><span class="n">ops</span><span class="p">,</span> <span class="k">struct</span> <span class="n">net_device</span> <span class="o">*</span><span class="n">dev</span><span class="p">,</span>
</span><span class='line'><span class="mi">163</span>                 <span class="kt">int</span> <span class="n">initial_ref</span><span class="p">,</span> <span class="kt">int</span> <span class="n">initial_obsolete</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">short</span> <span class="n">flags</span><span class="p">)</span>
</span><span class='line'><span class="mi">164</span> <span class="p">{</span>
</span><span class='line'><span class="mi">165</span>         <span class="k">struct</span> <span class="n">dst_entry</span> <span class="o">*</span><span class="n">dst</span><span class="p">;</span>
</span><span class='line'><span class="mi">166</span>
</span><span class='line'><span class="mi">167</span>         <span class="nf">if</span> <span class="p">(</span><span class="n">ops</span><span class="o">-&gt;</span><span class="n">gc</span> <span class="o">&amp;&amp;</span> <span class="n">dst_entries_get_fast</span><span class="p">(</span><span class="n">ops</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">ops</span><span class="o">-&gt;</span><span class="n">gc_thresh</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="mi">168</span>                 <span class="k">if</span> <span class="p">(</span><span class="n">ops</span><span class="o">-&gt;</span><span class="n">gc</span><span class="p">(</span><span class="n">ops</span><span class="p">))</span>
</span><span class='line'><span class="mi">169</span>                         <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="mi">170</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">171</span>         <span class="n">dst</span> <span class="o">=</span> <span class="n">kmem_cache_alloc</span><span class="p">(</span><span class="n">ops</span><span class="o">-&gt;</span><span class="n">kmem_cachep</span><span class="p">,</span> <span class="n">GFP_ATOMIC</span><span class="p">);</span>
</span><span class='line'><span class="mi">172</span>         <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">dst</span><span class="p">)</span>
</span><span class='line'><span class="mi">173</span>                 <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="mi">174</span>         <span class="n">dst</span><span class="o">-&gt;</span><span class="n">child</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="mi">175</span>         <span class="n">dst</span><span class="o">-&gt;</span><span class="n">dev</span> <span class="o">=</span> <span class="n">dev</span><span class="p">;</span>
</span><span class='line'><span class="mi">176</span>         <span class="nf">if</span> <span class="p">(</span><span class="n">dev</span><span class="p">)</span>
</span><span class='line'><span class="mi">177</span>                 <span class="n">dev_hold</span><span class="p">(</span><span class="n">dev</span><span class="p">);</span>
</span><span class='line'><span class="mi">178</span>         <span class="n">dst</span><span class="o">-&gt;</span><span class="n">ops</span> <span class="o">=</span> <span class="n">ops</span><span class="p">;</span>
</span><span class='line'><span class="mi">179</span>         <span class="nf">dst_init_metrics</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span> <span class="n">dst_default_metrics</span><span class="p">,</span> <span class="nb">true</span><span class="p">);</span>
</span><span class='line'><span class="mi">180</span>         <span class="n">dst</span><span class="o">-&gt;</span><span class="n">expires</span> <span class="o">=</span> <span class="mi">0UL</span><span class="p">;</span>
</span><span class='line'><span class="mi">181</span>         <span class="n">dst</span><span class="o">-&gt;</span><span class="n">path</span> <span class="o">=</span> <span class="n">dst</span><span class="p">;</span>
</span><span class='line'><span class="mi">182</span>         <span class="n">dst</span><span class="o">-&gt;</span><span class="n">from</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="mi">183</span> <span class="err">#</span><span class="n">ifdef</span> <span class="n">CONFIG_XFRM</span>
</span><span class='line'><span class="mi">184</span>         <span class="n">dst</span><span class="o">-&gt;</span><span class="n">xfrm</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="mi">185</span> <span class="err">#</span><span class="n">endif</span>
</span><span class='line'><span class="mi">186</span>         <span class="n">dst</span><span class="o">-&gt;</span><span class="n">input</span> <span class="o">=</span> <span class="n">dst_discard</span><span class="p">;</span>
</span><span class='line'><span class="mi">187</span>         <span class="n">dst</span><span class="o">-&gt;</span><span class="n">output</span> <span class="o">=</span> <span class="n">dst_discard</span><span class="p">;</span>
</span><span class='line'><span class="mi">188</span>         <span class="n">dst</span><span class="o">-&gt;</span><span class="n">error</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="mi">189</span>         <span class="n">dst</span><span class="o">-&gt;</span><span class="n">obsolete</span> <span class="o">=</span> <span class="n">initial_obsolete</span><span class="p">;</span>
</span><span class='line'><span class="mi">190</span>         <span class="n">dst</span><span class="o">-&gt;</span><span class="n">header_len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="mi">191</span>         <span class="n">dst</span><span class="o">-&gt;</span><span class="n">trailer_len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="mi">192</span> <span class="err">#</span><span class="n">ifdef</span> <span class="n">CONFIG_IP_ROUTE_CLASSID</span>
</span><span class='line'><span class="mi">193</span>         <span class="n">dst</span><span class="o">-&gt;</span><span class="n">tclassid</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="mi">194</span> <span class="err">#</span><span class="n">endif</span>
</span><span class='line'><span class="mi">195</span>         <span class="n">atomic_set</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dst</span><span class="o">-&gt;</span><span class="n">__refcnt</span><span class="p">,</span> <span class="n">initial_ref</span><span class="p">);</span>
</span><span class='line'><span class="mi">196</span>         <span class="n">dst</span><span class="o">-&gt;</span><span class="n">__use</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="mi">197</span>         <span class="n">dst</span><span class="o">-&gt;</span><span class="n">lastuse</span> <span class="o">=</span> <span class="n">jiffies</span><span class="p">;</span>
</span><span class='line'><span class="mi">198</span>         <span class="n">dst</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">=</span> <span class="n">flags</span><span class="p">;</span>
</span><span class='line'><span class="mi">199</span>         <span class="n">dst</span><span class="o">-&gt;</span><span class="n">pending_confirm</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="mi">200</span>         <span class="n">dst</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="mi">201</span>         <span class="nf">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">DST_NOCOUNT</span><span class="p">))</span>
</span><span class='line'><span class="mi">202</span>                 <span class="n">dst_entries_add</span><span class="p">(</span><span class="n">ops</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="mi">203</span>         <span class="k">return</span> <span class="n">dst</span><span class="p">;</span>
</span><span class='line'><span class="mi">204</span> <span class="p">}</span>
</span><span class='line'><span class="mi">205</span> <span class="n">EXPORT_SYMBOL</span><span class="p">(</span><span class="n">dst_alloc</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">1517</span> <span class="cm">/* called in rcu_read_lock() section */</span>
</span><span class='line'><span class="mi">1518</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">__mkroute_input</span><span class="p">(</span><span class="k">struct</span> <span class="n">sk_buff</span> <span class="o">*</span><span class="n">skb</span><span class="p">,</span>
</span><span class='line'><span class="mi">1519</span>                            <span class="k">const</span> <span class="k">struct</span> <span class="n">fib_result</span> <span class="o">*</span><span class="n">res</span><span class="p">,</span>
</span><span class='line'><span class="mi">1520</span>                            <span class="k">struct</span> <span class="n">in_device</span> <span class="o">*</span><span class="n">in_dev</span><span class="p">,</span>
</span><span class='line'><span class="mi">1521</span>                            <span class="n">__be32</span> <span class="n">daddr</span><span class="p">,</span> <span class="n">__be32</span> <span class="n">saddr</span><span class="p">,</span> <span class="n">u32</span> <span class="n">tos</span><span class="p">)</span>
</span><span class='line'><span class="mi">1522</span> <span class="p">{</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="mi">1583</span>         <span class="n">rth</span> <span class="o">=</span> <span class="n">rt_dst_alloc</span><span class="p">(</span><span class="n">out_dev</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">,</span>
</span><span class='line'><span class="mi">1584</span>                            <span class="n">IN_DEV_CONF_GET</span><span class="p">(</span><span class="n">in_dev</span><span class="p">,</span> <span class="n">NOPOLICY</span><span class="p">),</span>
</span><span class='line'><span class="mi">1585</span>                            <span class="n">IN_DEV_CONF_GET</span><span class="p">(</span><span class="n">out_dev</span><span class="p">,</span> <span class="n">NOXFRM</span><span class="p">),</span> <span class="n">do_cache</span><span class="p">);</span>
</span><span class='line'><span class="mi">1586</span>         <span class="nf">if</span> <span class="p">(</span><span class="o">!</span><span class="n">rth</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="mi">1587</span>                 <span class="n">err</span> <span class="o">=</span> <span class="o">-</span><span class="n">ENOBUFS</span><span class="p">;</span>
</span><span class='line'><span class="mi">1588</span>                 <span class="k">goto</span> <span class="n">cleanup</span><span class="p">;</span>
</span><span class='line'><span class="mi">1589</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">1590</span>
</span><span class='line'><span class="mi">1591</span>         <span class="n">rth</span><span class="o">-&gt;</span><span class="n">rt_genid</span> <span class="o">=</span> <span class="n">rt_genid_ipv4</span><span class="p">(</span><span class="n">dev_net</span><span class="p">(</span><span class="n">rth</span><span class="o">-&gt;</span><span class="n">dst</span><span class="p">.</span><span class="n">dev</span><span class="p">));</span>
</span><span class='line'><span class="mi">1592</span>         <span class="n">rth</span><span class="o">-&gt;</span><span class="n">rt_flags</span> <span class="o">=</span> <span class="n">flags</span><span class="p">;</span>
</span><span class='line'><span class="mi">1593</span>         <span class="n">rth</span><span class="o">-&gt;</span><span class="n">rt_type</span> <span class="o">=</span> <span class="n">res</span><span class="o">-&gt;</span><span class="n">type</span><span class="p">;</span>
</span><span class='line'><span class="mi">1594</span>         <span class="n">rth</span><span class="o">-&gt;</span><span class="n">rt_is_input</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="mi">1595</span>         <span class="n">rth</span><span class="o">-&gt;</span><span class="n">rt_iif</span>     <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="mi">1596</span>         <span class="n">rth</span><span class="o">-&gt;</span><span class="n">rt_pmtu</span>    <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="mi">1597</span>         <span class="n">rth</span><span class="o">-&gt;</span><span class="n">rt_gateway</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="mi">1598</span>         <span class="n">rth</span><span class="o">-&gt;</span><span class="n">rt_uses_gateway</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="mi">1599</span>         <span class="nf">INIT_LIST_HEAD</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rth</span><span class="o">-&gt;</span><span class="n">rt_uncached</span><span class="p">);</span>
</span><span class='line'><span class="mi">1600</span>
</span><span class='line'><span class="mi">1601</span>         <span class="n">rth</span><span class="o">-&gt;</span><span class="n">dst</span><span class="p">.</span><span class="n">input</span> <span class="o">=</span> <span class="n">ip_forward</span><span class="p">;</span>
</span><span class='line'><span class="mi">1602</span>         <span class="n">rth</span><span class="o">-&gt;</span><span class="n">dst</span><span class="p">.</span><span class="n">output</span> <span class="o">=</span> <span class="n">ip_output</span><span class="p">;</span>
</span><span class='line'><span class="mi">1603</span>
</span><span class='line'><span class="mi">1604</span>         <span class="nf">rt_set_nexthop</span><span class="p">(</span><span class="n">rth</span><span class="p">,</span> <span class="n">daddr</span><span class="p">,</span> <span class="n">res</span><span class="p">,</span> <span class="n">fnhe</span><span class="p">,</span> <span class="n">res</span><span class="o">-&gt;</span><span class="n">fi</span><span class="p">,</span> <span class="n">res</span><span class="o">-&gt;</span><span class="n">type</span><span class="p">,</span> <span class="n">itag</span><span class="p">);</span>
</span><span class='line'><span class="mi">1605</span>         <span class="nf">skb_dst_set</span><span class="p">(</span><span class="n">skb</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">rth</span><span class="o">-&gt;</span><span class="n">dst</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>dst functions</h3>

<p><code>__refcnt</code> is the important filed of <code>struct dst_entry</code>.</p>

<h4><code>dst_hold</code></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">235</span> <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="nf">dst_hold</span><span class="p">(</span><span class="k">struct</span> <span class="n">dst_entry</span> <span class="o">*</span><span class="n">dst</span><span class="p">)</span>
</span><span class='line'><span class="mi">236</span> <span class="p">{</span>
</span><span class='line'><span class="mi">237</span>         <span class="cm">/*</span>
</span><span class='line'><span class="cm">238          * If your kernel compilation stops here, please check</span>
</span><span class='line'><span class="cm">239          * __pad_to_align_refcnt declaration in struct dst_entry</span>
</span><span class='line'><span class="cm">240          */</span>
</span><span class='line'><span class="mi">241</span>         <span class="n">BUILD_BUG_ON</span><span class="p">(</span><span class="n">offsetof</span><span class="p">(</span><span class="k">struct</span> <span class="n">dst_entry</span><span class="p">,</span> <span class="n">__refcnt</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">63</span><span class="p">);</span>
</span><span class='line'><span class="mi">242</span>         <span class="nf">atomic_inc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dst</span><span class="o">-&gt;</span><span class="n">__refcnt</span><span class="p">);</span>
</span><span class='line'><span class="mi">243</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4><code>dst_clone</code></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">258</span> <span class="k">static</span> <span class="kr">inline</span> <span class="k">struct</span> <span class="n">dst_entry</span> <span class="o">*</span><span class="nf">dst_clone</span><span class="p">(</span><span class="k">struct</span> <span class="n">dst_entry</span> <span class="o">*</span><span class="n">dst</span><span class="p">)</span>
</span><span class='line'><span class="mi">259</span> <span class="p">{</span>
</span><span class='line'><span class="mi">260</span>         <span class="k">if</span> <span class="p">(</span><span class="n">dst</span><span class="p">)</span>
</span><span class='line'><span class="mi">261</span>                 <span class="n">atomic_inc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dst</span><span class="o">-&gt;</span><span class="n">__refcnt</span><span class="p">);</span>
</span><span class='line'><span class="mi">262</span>         <span class="k">return</span> <span class="n">dst</span><span class="p">;</span>
</span><span class='line'><span class="mi">263</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4><code>skb_dst_copy</code></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">287</span> <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">skb_dst_copy</span><span class="p">(</span><span class="k">struct</span> <span class="n">sk_buff</span> <span class="o">*</span><span class="n">nskb</span><span class="p">,</span> <span class="k">const</span> <span class="k">struct</span> <span class="n">sk_buff</span> <span class="o">*</span><span class="n">oskb</span><span class="p">)</span>
</span><span class='line'><span class="mi">288</span> <span class="p">{</span>
</span><span class='line'><span class="mi">289</span>         <span class="n">nskb</span><span class="o">-&gt;</span><span class="n">_skb_refdst</span> <span class="o">=</span> <span class="n">oskb</span><span class="o">-&gt;</span><span class="n">_skb_refdst</span><span class="p">;</span>
</span><span class='line'><span class="mi">290</span>         <span class="nf">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">nskb</span><span class="o">-&gt;</span><span class="n">_skb_refdst</span> <span class="o">&amp;</span> <span class="n">SKB_DST_NOREF</span><span class="p">))</span>
</span><span class='line'><span class="mi">291</span>                 <span class="n">dst_clone</span><span class="p">(</span><span class="n">skb_dst</span><span class="p">(</span><span class="n">nskb</span><span class="p">));</span>
</span><span class='line'><span class="mi">292</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>dst free</h4>

<p>If nobody is reference the dst, directly free it by <code>dst_destroy</code>,
else put it into the garbage collection list <code>dst_garbage.list</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">370</span> <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">dst_free</span><span class="p">(</span><span class="k">struct</span> <span class="n">dst_entry</span> <span class="o">*</span><span class="n">dst</span><span class="p">)</span>
</span><span class='line'><span class="mi">371</span> <span class="p">{</span>
</span><span class='line'><span class="mi">372</span>         <span class="k">if</span> <span class="p">(</span><span class="n">dst</span><span class="o">-&gt;</span><span class="n">obsolete</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="mi">373</span>                 <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="mi">374</span>         <span class="nf">if</span> <span class="p">(</span><span class="o">!</span><span class="n">atomic_read</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dst</span><span class="o">-&gt;</span><span class="n">__refcnt</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'><span class="mi">375</span>                 <span class="n">dst</span> <span class="o">=</span> <span class="n">dst_destroy</span><span class="p">(</span><span class="n">dst</span><span class="p">);</span>
</span><span class='line'><span class="mi">376</span>                 <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">dst</span><span class="p">)</span>
</span><span class='line'><span class="mi">377</span>                         <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="mi">378</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">379</span>         <span class="nf">__dst_free</span><span class="p">(</span><span class="n">dst</span><span class="p">);</span>
</span><span class='line'><span class="mi">380</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Qdisc Running Flag]]></title>
    <link href="http://martinbj2008.github.io/blog/2014/02/08/qdisc-running-flag/"/>
    <updated>2014-02-08T11:26:00+08:00</updated>
    <id>http://martinbj2008.github.io/blog/2014/02/08/qdisc-running-flag</id>
    <content type="html"><![CDATA[<h3>Summary</h3>

<p>In <code>struct Qdisc</code>, there are two similar fileds.
running flag is stored in <strong><code>__state</code></strong> of <code>struct Qdisc</code>, NOT <strong><code>state</code></strong>.
Every time, when we send a packet from qdisc, the <code>running</code> flag is
set by <code>qdisc_run_begin</code>, and after that, it is removed by <code>qdisc_run_end</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="mi">84</span>         <span class="kt">unsigned</span> <span class="kt">long</span>           <span class="n">state</span><span class="p">;</span>
</span><span class='line'> <span class="p">...</span>
</span><span class='line'> <span class="mi">87</span>         <span class="kt">unsigned</span> <span class="kt">int</span>            <span class="n">__state</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>todo</h4>

<p> why need busylock?</p>

<!-- more -->


<h4>The values of <code>state</code>.</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="mi">24</span> <span class="k">enum</span> <span class="kt">qdisc_state_t</span> <span class="p">{</span>
</span><span class='line'> <span class="mi">25</span>         <span class="n">__QDISC_STATE_SCHED</span><span class="p">,</span>
</span><span class='line'> <span class="mi">26</span>         <span class="n">__QDISC_STATE_DEACTIVATED</span><span class="p">,</span>
</span><span class='line'> <span class="mi">27</span>         <span class="n">__QDISC_STATE_THROTTLED</span><span class="p">,</span>
</span><span class='line'> <span class="mi">28</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h4>The value of <code>__state</code>.</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="mi">33</span> <span class="k">enum</span> <span class="kt">qdisc___state_t</span> <span class="p">{</span>
</span><span class='line'> <span class="mi">34</span>         <span class="n">__QDISC___STATE_RUNNING</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'> <span class="mi">35</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Running flag</h2>

<h3>check Qdisc running</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="mi">96</span> <span class="k">static</span> <span class="kr">inline</span> <span class="kt">bool</span> <span class="n">qdisc_is_running</span><span class="p">(</span><span class="k">const</span> <span class="k">struct</span> <span class="n">Qdisc</span> <span class="o">*</span><span class="n">qdisc</span><span class="p">)</span>
</span><span class='line'> <span class="mi">97</span> <span class="p">{</span>
</span><span class='line'> <span class="mi">98</span>         <span class="k">return</span> <span class="p">(</span><span class="n">qdisc</span><span class="o">-&gt;</span><span class="n">__state</span> <span class="o">&amp;</span> <span class="n">__QDISC___STATE_RUNNING</span><span class="p">)</span> <span class="o">?</span> <span class="nb">true</span> <span class="o">:</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'> <span class="mi">99</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Set Qdisc running</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">101</span> <span class="k">static</span> <span class="kr">inline</span> <span class="kt">bool</span> <span class="n">qdisc_run_begin</span><span class="p">(</span><span class="k">struct</span> <span class="n">Qdisc</span> <span class="o">*</span><span class="n">qdisc</span><span class="p">)</span>
</span><span class='line'><span class="mi">102</span> <span class="p">{</span>
</span><span class='line'><span class="mi">103</span>         <span class="k">if</span> <span class="p">(</span><span class="n">qdisc_is_running</span><span class="p">(</span><span class="n">qdisc</span><span class="p">))</span>
</span><span class='line'><span class="mi">104</span>                 <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'><span class="mi">105</span>         <span class="n">qdisc</span><span class="o">-&gt;</span><span class="n">__state</span> <span class="o">|=</span> <span class="n">__QDISC___STATE_RUNNING</span><span class="p">;</span>
</span><span class='line'><span class="mi">106</span>         <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="mi">107</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Unset Qdisc running</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">109</span> <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">qdisc_run_end</span><span class="p">(</span><span class="k">struct</span> <span class="n">Qdisc</span> <span class="o">*</span><span class="n">qdisc</span><span class="p">)</span>
</span><span class='line'><span class="mi">110</span> <span class="p">{</span>
</span><span class='line'><span class="mi">111</span>         <span class="n">qdisc</span><span class="o">-&gt;</span><span class="n">__state</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">__QDISC___STATE_RUNNING</span><span class="p">;</span>
</span><span class='line'><span class="mi">112</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Xmit a Packet With Qdisc]]></title>
    <link href="http://martinbj2008.github.io/blog/2014/02/08/how-to-xmit-a-packet-with-qdisc/"/>
    <updated>2014-02-08T11:26:00+08:00</updated>
    <id>http://martinbj2008.github.io/blog/2014/02/08/how-to-xmit-a-packet-with-qdisc</id>
    <content type="html"><![CDATA[<h3>summary</h3>

<p>We think it as a ideal and simple case:</p>

<h3>Call Trace:</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&gt;</span> <span class="n">dev_queue_xmit</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span>  <span class="n">__dev_queue_xmit</span><span class="p">(</span><span class="n">skb</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">rcu_read_lock_bh</span><span class="p">();</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">txq</span> <span class="o">=</span> <span class="n">netdev_pick_tx</span><span class="p">(</span><span class="n">dev</span><span class="p">,</span> <span class="n">skb</span><span class="p">,</span> <span class="n">accel_priv</span><span class="p">);</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">q</span> <span class="o">=</span> <span class="n">rcu_dereference_bh</span><span class="p">(</span><span class="n">txq</span><span class="o">-&gt;</span><span class="n">qdisc</span><span class="p">);</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">rc</span> <span class="o">=</span> <span class="n">__dev_xmit_skb</span><span class="p">(</span><span class="n">skb</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">dev</span><span class="p">,</span> <span class="n">txq</span><span class="p">);</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">skb_dst_force</span><span class="p">(</span><span class="n">skb</span><span class="p">);</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">q</span><span class="o">-&gt;</span><span class="n">enqueue</span><span class="p">(</span><span class="n">skb</span><span class="p">,</span> <span class="n">q</span><span class="p">);</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">qdisc_run_begin</span><span class="p">(</span><span class="n">q</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span>  <span class="n">__qdisc_run</span><span class="p">(</span><span class="n">q</span><span class="p">);</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="k">while</span> <span class="p">(</span><span class="n">qdisc_restart</span><span class="p">(</span><span class="n">q</span><span class="p">))</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">__netif_schedule</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">qdisc_run_end</span><span class="p">(</span><span class="n">q</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">rcu_read_unlock_bh</span><span class="p">();</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<h3>functions</h3>

<h4><code>__dev_queue_xmit</code></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">2806</span> <span class="kt">int</span> <span class="n">__dev_queue_xmit</span><span class="p">(</span><span class="k">struct</span> <span class="n">sk_buff</span> <span class="o">*</span><span class="n">skb</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">accel_priv</span><span class="p">)</span>
</span><span class='line'><span class="mi">2807</span> <span class="p">{</span>
</span><span class='line'><span class="mi">2808</span>         <span class="k">struct</span> <span class="n">net_device</span> <span class="o">*</span><span class="n">dev</span> <span class="o">=</span> <span class="n">skb</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">;</span>
</span><span class='line'><span class="mi">2809</span>         <span class="k">struct</span> <span class="n">netdev_queue</span> <span class="o">*</span><span class="n">txq</span><span class="p">;</span>
</span><span class='line'><span class="mi">2810</span>         <span class="k">struct</span> <span class="n">Qdisc</span> <span class="o">*</span><span class="n">q</span><span class="p">;</span>
</span><span class='line'><span class="mi">2811</span>         <span class="kt">int</span> <span class="n">rc</span> <span class="o">=</span> <span class="o">-</span><span class="n">ENOMEM</span><span class="p">;</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="mi">2818</span>         <span class="n">rcu_read_lock_bh</span><span class="p">();</span>
</span><span class='line'><span class="mi">2819</span>
</span><span class='line'><span class="mi">2820</span>         <span class="nf">skb_update_prio</span><span class="p">(</span><span class="n">skb</span><span class="p">);</span>
</span><span class='line'><span class="mi">2821</span>
</span><span class='line'><span class="mi">2822</span>         <span class="n">txq</span> <span class="o">=</span> <span class="n">netdev_pick_tx</span><span class="p">(</span><span class="n">dev</span><span class="p">,</span> <span class="n">skb</span><span class="p">,</span> <span class="n">accel_priv</span><span class="p">);</span>
</span><span class='line'><span class="mi">2823</span>         <span class="n">q</span> <span class="o">=</span> <span class="n">rcu_dereference_bh</span><span class="p">(</span><span class="n">txq</span><span class="o">-&gt;</span><span class="n">qdisc</span><span class="p">);</span>
</span><span class='line'><span class="mi">2824</span>
</span><span class='line'><span class="mi">2825</span> <span class="err">#</span><span class="n">ifdef</span> <span class="n">CONFIG_NET_CLS_ACT</span>
</span><span class='line'><span class="mi">2826</span>         <span class="n">skb</span><span class="o">-&gt;</span><span class="n">tc_verd</span> <span class="o">=</span> <span class="n">SET_TC_AT</span><span class="p">(</span><span class="n">skb</span><span class="o">-&gt;</span><span class="n">tc_verd</span><span class="p">,</span> <span class="n">AT_EGRESS</span><span class="p">);</span>
</span><span class='line'><span class="mi">2827</span> <span class="err">#</span><span class="n">endif</span>
</span><span class='line'><span class="mi">2828</span>         <span class="n">trace_net_dev_queue</span><span class="p">(</span><span class="n">skb</span><span class="p">);</span>
</span><span class='line'><span class="mi">2829</span>         <span class="nf">if</span> <span class="p">(</span><span class="n">q</span><span class="o">-&gt;</span><span class="n">enqueue</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="mi">2830</span>                 <span class="n">rc</span> <span class="o">=</span> <span class="n">__dev_xmit_skb</span><span class="p">(</span><span class="n">skb</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">dev</span><span class="p">,</span> <span class="n">txq</span><span class="p">);</span>
</span><span class='line'><span class="mi">2831</span>                 <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'><span class="mi">2832</span>         <span class="p">}</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="mi">2883</span> <span class="nl">out</span><span class="p">:</span>
</span><span class='line'><span class="mi">2884</span>         <span class="n">rcu_read_unlock_bh</span><span class="p">();</span>
</span><span class='line'><span class="mi">2885</span>         <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span><span class='line'><span class="mi">2886</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>How to schedlule Qdisc</h3>

<h4>case 1: empty qdisc and qdisc could be bypass</h4>

<p>If the qdisc could be bypass, such as fifo qdisc,
and it is a empty qdisc,
and the qdisc is not running,</p>

<p>set the qdisc as running,
then send the packet directly by <code>sch_direct_xmit</code>.
If send success, clear the running flag by <code>qdisc_run_end</code>,
or(send failed), put the skb to qdisc queue by <code>dev_requeue_skb</code>.</p>

<h4>case 2: enqueue and then send</h4>

<p>In this case, skb must firstly enqueue.
Check and confirm qdisc is running,
if it is not running before check,
call <code>__qdisc_run</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="mi">94</span> <span class="cm">/* qdisc -&gt;enqueue() return codes. */</span>
</span><span class='line'>  <span class="mi">95</span> <span class="err">#</span><span class="n">define</span> <span class="n">NET_XMIT_SUCCESS</span>        <span class="mh">0x00</span>
</span><span class='line'>  <span class="mi">96</span> <span class="err">#</span><span class="n">define</span> <span class="n">NET_XMIT_DROP</span>           <span class="mh">0x01</span>    <span class="cm">/* skb dropped                  */</span>
</span><span class='line'>  <span class="mi">97</span> <span class="err">#</span><span class="n">define</span> <span class="n">NET_XMIT_CN</span>             <span class="mh">0x02</span>    <span class="cm">/* congestion notification      */</span>
</span><span class='line'>  <span class="mi">98</span> <span class="err">#</span><span class="n">define</span> <span class="n">NET_XMIT_POLICED</span>        <span class="mh">0x03</span>    <span class="cm">/* skb is shot by police        */</span>
</span><span class='line'>  <span class="mi">99</span> <span class="err">#</span><span class="n">define</span> <span class="n">NET_XMIT_MASK</span>           <span class="mh">0x0f</span>    <span class="cm">/* qdisc flags in net/sch_generic.h */</span>
</span><span class='line'> <span class="mi">100</span>
</span><span class='line'> <span class="mi">101</span> <span class="cm">/* NET_XMIT_CN is special. It does not guarantee that this packet is lost. It</span>
</span><span class='line'><span class="cm"> 102  * indicates that the device will soon be dropping packets, or already drops</span>
</span><span class='line'><span class="cm"> 103  * some packets of the same priority; prompting us to send less aggressively. */</span>
</span><span class='line'> <span class="mi">104</span> <span class="err">#</span><span class="n">define</span> <span class="n">net_xmit_eval</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>        <span class="p">((</span><span class="n">e</span><span class="p">)</span> <span class="o">==</span> <span class="n">NET_XMIT_CN</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="p">(</span><span class="n">e</span><span class="p">))</span>
</span><span class='line'> <span class="mi">105</span> <span class="err">#</span><span class="n">define</span> <span class="n">net_xmit_errno</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>       <span class="p">((</span><span class="n">e</span><span class="p">)</span> <span class="o">!=</span> <span class="n">NET_XMIT_CN</span> <span class="o">?</span> <span class="o">-</span><span class="nl">ENOBUFS</span> <span class="p">:</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'> <span class="mi">106</span>
</span><span class='line'> <span class="mi">107</span> <span class="cm">/* Driver transmit return codes */</span>
</span><span class='line'> <span class="mi">108</span> <span class="err">#</span><span class="n">define</span> <span class="n">NETDEV_TX_MASK</span>          <span class="mh">0xf0</span>
</span><span class='line'> <span class="mi">109</span>
</span><span class='line'> <span class="mi">110</span> <span class="k">enum</span> <span class="n">netdev_tx</span> <span class="p">{</span>
</span><span class='line'> <span class="mi">111</span>         <span class="n">__NETDEV_TX_MIN</span>  <span class="o">=</span> <span class="n">INT_MIN</span><span class="p">,</span>     <span class="cm">/* make sure enum is signed */</span>
</span><span class='line'> <span class="mi">112</span>         <span class="n">NETDEV_TX_OK</span>     <span class="o">=</span> <span class="mh">0x00</span><span class="p">,</span>        <span class="cm">/* driver took care of packet */</span>
</span><span class='line'> <span class="mi">113</span>         <span class="n">NETDEV_TX_BUSY</span>   <span class="o">=</span> <span class="mh">0x10</span><span class="p">,</span>        <span class="cm">/* driver tx path was busy*/</span>
</span><span class='line'> <span class="mi">114</span>         <span class="n">NETDEV_TX_LOCKED</span> <span class="o">=</span> <span class="mh">0x20</span><span class="p">,</span>        <span class="cm">/* driver tx lock was already taken */</span>
</span><span class='line'> <span class="mi">115</span> <span class="p">};</span>
</span><span class='line'> <span class="mi">116</span> <span class="k">typedef</span> <span class="k">enum</span> <span class="n">netdev_tx</span> <span class="kt">netdev_tx_t</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>How <code>__qdisc_run</code> works</h4>

<p><code>__qdisc_run</code> must be embraced by <code>qdisc_run_begin</code> and <code>qdisc_run_end</code>.
Before  <code>__qdisc_run</code>, set flag <code>__QDISC___STATE_RUNNING</code>. after run, remove it.
The flag and two functions ensure a qdisc will run only on a CPU at the smae time.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">194</span> <span class="kt">void</span> <span class="n">__qdisc_run</span><span class="p">(</span><span class="k">struct</span> <span class="n">Qdisc</span> <span class="o">*</span><span class="n">q</span><span class="p">)</span>
</span><span class='line'><span class="mi">195</span> <span class="p">{</span>
</span><span class='line'><span class="mi">196</span>         <span class="kt">int</span> <span class="n">quota</span> <span class="o">=</span> <span class="n">weight_p</span><span class="p">;</span>
</span><span class='line'><span class="mi">197</span>
</span><span class='line'><span class="mi">198</span>         <span class="nf">while</span> <span class="p">(</span><span class="n">qdisc_restart</span><span class="p">(</span><span class="n">q</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'><span class="mi">199</span>                 <span class="cm">/*</span>
</span><span class='line'><span class="cm">200                  * Ordered by possible occurrence: Postpone processing if</span>
</span><span class='line'><span class="cm">201                  * 1. we&#39;ve exceeded packet quota</span>
</span><span class='line'><span class="cm">202                  * 2. another process needs the CPU;</span>
</span><span class='line'><span class="cm">203                  */</span>
</span><span class='line'><span class="mi">204</span>                 <span class="k">if</span> <span class="p">(</span><span class="o">--</span><span class="n">quota</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">need_resched</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'><span class="mi">205</span>                         <span class="n">__netif_schedule</span><span class="p">(</span><span class="n">q</span><span class="p">);</span>
</span><span class='line'><span class="mi">206</span>                         <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="mi">207</span>                 <span class="p">}</span>
</span><span class='line'><span class="mi">208</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">209</span>
</span><span class='line'><span class="mi">210</span>         <span class="nf">qdisc_run_end</span><span class="p">(</span><span class="n">q</span><span class="p">);</span>
</span><span class='line'><span class="mi">211</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>weight_p</code> is the max count of packets sent in <strong>a</strong> qdisc during a TX softirq.</p>

<p>If the qdisc has little packets, and they will be sent out in the while loop.
Else, the qdisc will be set state as <code>__QDISC_STATE_SCHED</code>,
and the qdisc will linked to <code>output_queue</code> of current cpu&rsquo;s <code>__get_cpu_var(softnet_data)</code>,
the TX softirq will be triggered to sent remain packet in the qdisc.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">156</span> <span class="cm">/*</span>
</span><span class='line'><span class="cm">157  * NOTE: Called under qdisc_lock(q) with locally disabled BH.</span>
</span><span class='line'><span class="cm">158  *</span>
</span><span class='line'><span class="cm">159  * __QDISC_STATE_RUNNING guarantees only one CPU can process</span>
</span><span class='line'><span class="cm">160  * this qdisc at a time. qdisc_lock(q) serializes queue accesses for</span>
</span><span class='line'><span class="cm">161  * this queue.</span>
</span><span class='line'><span class="cm">162  *</span>
</span><span class='line'><span class="cm">163  *  netif_tx_lock serializes accesses to device driver.</span>
</span><span class='line'><span class="cm">164  *</span>
</span><span class='line'><span class="cm">165  *  qdisc_lock(q) and netif_tx_lock are mutually exclusive,</span>
</span><span class='line'><span class="cm">166  *  if one is grabbed, another must be free.</span>
</span><span class='line'><span class="cm">167  *</span>
</span><span class='line'><span class="cm">168  * Note, that this procedure can be called by a watchdog timer</span>
</span><span class='line'><span class="cm">169  *</span>
</span><span class='line'><span class="cm">170  * Returns to the caller:</span>
</span><span class='line'><span class="cm">171  *                              0  - queue is empty or throttled.</span>
</span><span class='line'><span class="cm">172  *                              &gt;0 - queue is not empty.</span>
</span><span class='line'><span class="cm">173  *</span>
</span><span class='line'><span class="cm">174  */</span>
</span><span class='line'><span class="mi">175</span> <span class="k">static</span> <span class="kr">inline</span> <span class="kt">int</span> <span class="n">qdisc_restart</span><span class="p">(</span><span class="k">struct</span> <span class="n">Qdisc</span> <span class="o">*</span><span class="n">q</span><span class="p">)</span>
</span><span class='line'><span class="mi">176</span> <span class="p">{</span>
</span><span class='line'><span class="mi">177</span>         <span class="k">struct</span> <span class="n">netdev_queue</span> <span class="o">*</span><span class="n">txq</span><span class="p">;</span>
</span><span class='line'><span class="mi">178</span>         <span class="k">struct</span> <span class="n">net_device</span> <span class="o">*</span><span class="n">dev</span><span class="p">;</span>
</span><span class='line'><span class="mi">179</span>         <span class="kt">spinlock_t</span> <span class="o">*</span><span class="n">root_lock</span><span class="p">;</span>
</span><span class='line'><span class="mi">180</span>         <span class="k">struct</span> <span class="n">sk_buff</span> <span class="o">*</span><span class="n">skb</span><span class="p">;</span>
</span><span class='line'><span class="mi">181</span>
</span><span class='line'><span class="mi">182</span>         <span class="cm">/* Dequeue packet */</span>
</span><span class='line'><span class="mi">183</span>         <span class="n">skb</span> <span class="o">=</span> <span class="n">dequeue_skb</span><span class="p">(</span><span class="n">q</span><span class="p">);</span>
</span><span class='line'><span class="mi">184</span>         <span class="k">if</span> <span class="p">(</span><span class="n">unlikely</span><span class="p">(</span><span class="o">!</span><span class="n">skb</span><span class="p">))</span>
</span><span class='line'><span class="mi">185</span>                 <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="mi">186</span>         <span class="nf">WARN_ON_ONCE</span><span class="p">(</span><span class="n">skb_dst_is_noref</span><span class="p">(</span><span class="n">skb</span><span class="p">));</span>
</span><span class='line'><span class="mi">187</span>         <span class="n">root_lock</span> <span class="o">=</span> <span class="n">qdisc_lock</span><span class="p">(</span><span class="n">q</span><span class="p">);</span>
</span><span class='line'><span class="mi">188</span>         <span class="n">dev</span> <span class="o">=</span> <span class="n">qdisc_dev</span><span class="p">(</span><span class="n">q</span><span class="p">);</span>
</span><span class='line'><span class="mi">189</span>         <span class="n">txq</span> <span class="o">=</span> <span class="n">netdev_get_tx_queue</span><span class="p">(</span><span class="n">dev</span><span class="p">,</span> <span class="n">skb_get_queue_mapping</span><span class="p">(</span><span class="n">skb</span><span class="p">));</span>
</span><span class='line'><span class="mi">190</span>
</span><span class='line'><span class="mi">191</span>         <span class="k">return</span> <span class="nf">sch_direct_xmit</span><span class="p">(</span><span class="n">skb</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">dev</span><span class="p">,</span> <span class="n">txq</span><span class="p">,</span> <span class="n">root_lock</span><span class="p">);</span>
</span><span class='line'><span class="mi">192</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">109</span> <span class="cm">/*</span>
</span><span class='line'><span class="cm">110  * Transmit one skb, and handle the return status as required. Holding the</span>
</span><span class='line'><span class="cm">111  * __QDISC_STATE_RUNNING bit guarantees that only one CPU can execute this</span>
</span><span class='line'><span class="cm">112  * function.</span>
</span><span class='line'><span class="cm">113  *</span>
</span><span class='line'><span class="cm">114  * Returns to the caller:</span>
</span><span class='line'><span class="cm">115  *                              0  - queue is empty or throttled.</span>
</span><span class='line'><span class="cm">116  *                              &gt;0 - queue is not empty.</span>
</span><span class='line'><span class="cm">117  */</span>
</span><span class='line'><span class="mi">118</span> <span class="kt">int</span> <span class="n">sch_direct_xmit</span><span class="p">(</span><span class="k">struct</span> <span class="n">sk_buff</span> <span class="o">*</span><span class="n">skb</span><span class="p">,</span> <span class="k">struct</span> <span class="n">Qdisc</span> <span class="o">*</span><span class="n">q</span><span class="p">,</span>
</span><span class='line'><span class="mi">119</span>                     <span class="k">struct</span> <span class="n">net_device</span> <span class="o">*</span><span class="n">dev</span><span class="p">,</span> <span class="k">struct</span> <span class="n">netdev_queue</span> <span class="o">*</span><span class="n">txq</span><span class="p">,</span>
</span><span class='line'><span class="mi">120</span>                     <span class="kt">spinlock_t</span> <span class="o">*</span><span class="n">root_lock</span><span class="p">)</span>
</span><span class='line'><span class="mi">121</span> <span class="p">{</span>
</span><span class='line'><span class="mi">122</span>         <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">NETDEV_TX_BUSY</span><span class="p">;</span>
</span><span class='line'><span class="mi">123</span>
</span><span class='line'><span class="mi">124</span>         <span class="cm">/* And release qdisc */</span>
</span><span class='line'><span class="mi">125</span>         <span class="n">spin_unlock</span><span class="p">(</span><span class="n">root_lock</span><span class="p">);</span>
</span><span class='line'><span class="mi">126</span>
</span><span class='line'><span class="mi">127</span>         <span class="nf">HARD_TX_LOCK</span><span class="p">(</span><span class="n">dev</span><span class="p">,</span> <span class="n">txq</span><span class="p">,</span> <span class="n">smp_processor_id</span><span class="p">());</span>
</span><span class='line'><span class="mi">128</span>         <span class="nf">if</span> <span class="p">(</span><span class="o">!</span><span class="n">netif_xmit_frozen_or_stopped</span><span class="p">(</span><span class="n">txq</span><span class="p">))</span>
</span><span class='line'><span class="mi">129</span>                 <span class="n">ret</span> <span class="o">=</span> <span class="n">dev_hard_start_xmit</span><span class="p">(</span><span class="n">skb</span><span class="p">,</span> <span class="n">dev</span><span class="p">,</span> <span class="n">txq</span><span class="p">);</span>
</span><span class='line'><span class="mi">130</span>
</span><span class='line'><span class="mi">131</span>         <span class="nf">HARD_TX_UNLOCK</span><span class="p">(</span><span class="n">dev</span><span class="p">,</span> <span class="n">txq</span><span class="p">);</span>
</span><span class='line'><span class="mi">132</span>
</span><span class='line'><span class="mi">133</span>         <span class="nf">spin_lock</span><span class="p">(</span><span class="n">root_lock</span><span class="p">);</span>
</span><span class='line'><span class="mi">134</span>
</span><span class='line'><span class="mi">135</span>         <span class="nf">if</span> <span class="p">(</span><span class="n">dev_xmit_complete</span><span class="p">(</span><span class="n">ret</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'><span class="mi">136</span>                 <span class="cm">/* Driver sent out skb successfully or skb was consumed */</span>
</span><span class='line'><span class="mi">137</span>                 <span class="n">ret</span> <span class="o">=</span> <span class="n">qdisc_qlen</span><span class="p">(</span><span class="n">q</span><span class="p">);</span>
</span><span class='line'><span class="mi">138</span>         <span class="p">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">==</span> <span class="n">NETDEV_TX_LOCKED</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="mi">139</span>                 <span class="cm">/* Driver try lock failed */</span>
</span><span class='line'><span class="mi">140</span>                 <span class="n">ret</span> <span class="o">=</span> <span class="n">handle_dev_cpu_collision</span><span class="p">(</span><span class="n">skb</span><span class="p">,</span> <span class="n">txq</span><span class="p">,</span> <span class="n">q</span><span class="p">);</span>
</span><span class='line'><span class="mi">141</span>         <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'><span class="mi">142</span>                 <span class="cm">/* Driver returned NETDEV_TX_BUSY - requeue skb */</span>
</span><span class='line'><span class="mi">143</span>                 <span class="k">if</span> <span class="p">(</span><span class="n">unlikely</span><span class="p">(</span><span class="n">ret</span> <span class="o">!=</span> <span class="n">NETDEV_TX_BUSY</span><span class="p">))</span>
</span><span class='line'><span class="mi">144</span>                         <span class="n">net_warn_ratelimited</span><span class="p">(</span><span class="s">&quot;BUG %s code %d qlen %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'><span class="mi">145</span>                                              <span class="n">dev</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">,</span> <span class="n">ret</span><span class="p">,</span> <span class="n">q</span><span class="o">-&gt;</span><span class="n">q</span><span class="p">.</span><span class="n">qlen</span><span class="p">);</span>
</span><span class='line'><span class="mi">146</span>
</span><span class='line'><span class="mi">147</span>                 <span class="n">ret</span> <span class="o">=</span> <span class="n">dev_requeue_skb</span><span class="p">(</span><span class="n">skb</span><span class="p">,</span> <span class="n">q</span><span class="p">);</span>
</span><span class='line'><span class="mi">148</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">149</span>
</span><span class='line'><span class="mi">150</span>         <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">&amp;&amp;</span> <span class="n">netif_xmit_frozen_or_stopped</span><span class="p">(</span><span class="n">txq</span><span class="p">))</span>
</span><span class='line'><span class="mi">151</span>                 <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="mi">152</span>
</span><span class='line'><span class="mi">153</span>         <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'><span class="mi">154</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4><code>skb-&gt;queue_mapping</code></h4>

<p>In multi-queue nic driver, it is used to indicate which queue is used to xmit packet.
It is set by <code>skb_set_queue_mapping</code> in <code>netdev_pick_tx</code>, <code>__dev_queue_xmit</code>.</p>

<h4>busylock of <code>struct Qdisc</code></h4>

<p>As we said, Qdisc uses <code>__QDISC___STATE_RUNNING</code> to ensure,
for a same qdisc, <strong>ONLY ONE</strong> cpu xmit packet at the same time.
How to manage the other cpus?</p>

<p><code>busylock</code> of <code>struct Qdisc</code> is used for this.
For a same qdisc,
the first CPU, set the <code>__QDISC___STATE_RUNNING</code>.
the second CPU, grab the spinlock <code>busylock</code> of <code>struct Qdisc</code>
for the third or more CPU, wait on spinlock <code>busylock</code> of <code>struct Qdisc</code>.</p>

<h4><code>qdisc_lock</code></h4>

<p>Where is <code>qdisc_lock</code> stored in the Qdisc.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">255</span> <span class="k">static</span> <span class="kr">inline</span> <span class="kt">spinlock_t</span> <span class="o">*</span><span class="n">qdisc_lock</span><span class="p">(</span><span class="k">struct</span> <span class="n">Qdisc</span> <span class="o">*</span><span class="n">qdisc</span><span class="p">)</span>
</span><span class='line'><span class="mi">256</span> <span class="p">{</span>
</span><span class='line'><span class="mi">257</span>         <span class="k">return</span> <span class="o">&amp;</span><span class="n">qdisc</span><span class="o">-&gt;</span><span class="n">q</span><span class="p">.</span><span class="n">lock</span><span class="p">;</span>
</span><span class='line'><span class="mi">258</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">45</span> <span class="k">struct</span> <span class="n">Qdisc</span> <span class="p">{</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="mi">85</span>         <span class="k">struct</span> <span class="n">sk_buff_head</span>     <span class="n">q</span><span class="p">;</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="mi">148</span> <span class="k">struct</span> <span class="n">sk_buff_head</span> <span class="p">{</span>
</span><span class='line'> <span class="mi">149</span>         <span class="cm">/* These two members must be first. */</span>
</span><span class='line'> <span class="mi">150</span>         <span class="k">struct</span> <span class="n">sk_buff</span>  <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'> <span class="mi">151</span>         <span class="k">struct</span> <span class="n">sk_buff</span>  <span class="o">*</span><span class="n">prev</span><span class="p">;</span>
</span><span class='line'> <span class="mi">152</span>
</span><span class='line'> <span class="mi">153</span>         <span class="n">__u32</span>           <span class="n">qlen</span><span class="p">;</span>
</span><span class='line'> <span class="mi">154</span>         <span class="kt">spinlock_t</span>      <span class="n">lock</span><span class="p">;</span>
</span><span class='line'> <span class="mi">155</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h4><code>NETIF_F_LLTX</code></h4>

<p><code>HARD_TX_LOCK</code> and <code>HARD_TX_UNLOCK</code> will embrance the driver&rsquo;s <code>ndo_start_xmit</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">2805</span> <span class="err">#</span><span class="n">define</span> <span class="n">HARD_TX_LOCK</span><span class="p">(</span><span class="n">dev</span><span class="p">,</span> <span class="n">txq</span><span class="p">,</span> <span class="n">cpu</span><span class="p">)</span> <span class="p">{</span>                   \
</span><span class='line'><span class="mi">2806</span>         <span class="k">if</span> <span class="p">((</span><span class="n">dev</span><span class="o">-&gt;</span><span class="n">features</span> <span class="o">&amp;</span> <span class="n">NETIF_F_LLTX</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>      \
</span><span class='line'><span class="mi">2807</span>                 <span class="n">__netif_tx_lock</span><span class="p">(</span><span class="n">txq</span><span class="p">,</span> <span class="n">cpu</span><span class="p">);</span>              \
</span><span class='line'><span class="mi">2808</span>         <span class="p">}</span>                                               \
</span><span class='line'><span class="mi">2809</span> <span class="p">}</span>
</span><span class='line'><span class="mi">2810</span>
</span><span class='line'><span class="mi">2811</span> <span class="err">#</span><span class="n">define</span> <span class="n">HARD_TX_UNLOCK</span><span class="p">(</span><span class="n">dev</span><span class="p">,</span> <span class="n">txq</span><span class="p">)</span> <span class="p">{</span>                      \
</span><span class='line'><span class="mi">2812</span>         <span class="k">if</span> <span class="p">((</span><span class="n">dev</span><span class="o">-&gt;</span><span class="n">features</span> <span class="o">&amp;</span> <span class="n">NETIF_F_LLTX</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>      \
</span><span class='line'><span class="mi">2813</span>                 <span class="n">__netif_tx_unlock</span><span class="p">(</span><span class="n">txq</span><span class="p">);</span>                 \
</span><span class='line'><span class="mi">2814</span>         <span class="p">}</span>                                               \
</span><span class='line'><span class="mi">2815</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For physical nic driver, it does nothing.
but for virutal nic device driver, it is used to ensure the packet sent in order.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">junwei</span><span class="err">@</span><span class="nl">localhost</span><span class="p">:</span><span class="o">~/</span><span class="n">git</span><span class="o">/</span><span class="n">linux</span><span class="err">$</span> <span class="n">grep</span> <span class="n">NETIF_F_LLTX</span> <span class="n">net</span><span class="o">/</span> <span class="o">-</span><span class="n">Rw</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">ipv4</span><span class="o">/</span><span class="n">ipip</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span>        <span class="n">dev</span><span class="o">-&gt;</span><span class="n">features</span>           <span class="o">|=</span> <span class="n">NETIF_F_LLTX</span><span class="p">;</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">ipv4</span><span class="o">/</span><span class="n">ip_gre</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span>              <span class="n">dev</span><span class="o">-&gt;</span><span class="n">features</span> <span class="o">|=</span> <span class="n">NETIF_F_LLTX</span><span class="p">;</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">ipv4</span><span class="o">/</span><span class="n">ip_vti</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span>      <span class="n">dev</span><span class="o">-&gt;</span><span class="n">features</span>           <span class="o">|=</span> <span class="n">NETIF_F_LLTX</span><span class="p">;</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="mi">8021</span><span class="n">q</span><span class="o">/</span><span class="n">vlan_dev</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span>   <span class="n">dev</span><span class="o">-&gt;</span><span class="n">features</span> <span class="o">|=</span> <span class="n">real_dev</span><span class="o">-&gt;</span><span class="n">vlan_features</span> <span class="o">|</span> <span class="n">NETIF_F_LLTX</span><span class="p">;</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="mi">8021</span><span class="n">q</span><span class="o">/</span><span class="n">vlan_dev</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span>   <span class="n">features</span> <span class="o">|=</span> <span class="n">NETIF_F_LLTX</span><span class="p">;</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">bridge</span><span class="o">/</span><span class="n">br_device</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span> <span class="n">dev</span><span class="o">-&gt;</span><span class="n">features</span> <span class="o">=</span> <span class="n">COMMON_FEATURES</span> <span class="o">|</span> <span class="n">NETIF_F_LLTX</span> <span class="o">|</span> <span class="n">NETIF_F_NETNS_LOCAL</span> <span class="o">|</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">l2tp</span><span class="o">/</span><span class="n">l2tp_eth</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span>    <span class="n">dev</span><span class="o">-&gt;</span><span class="n">features</span>           <span class="o">|=</span> <span class="n">NETIF_F_LLTX</span><span class="p">;</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">ipv6</span><span class="o">/</span><span class="n">ip6_gre</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span>             <span class="n">dev</span><span class="o">-&gt;</span><span class="n">features</span> <span class="o">|=</span> <span class="n">NETIF_F_LLTX</span><span class="p">;</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">ipv6</span><span class="o">/</span><span class="n">ip6_gre</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span>             <span class="n">dev</span><span class="o">-&gt;</span><span class="n">features</span> <span class="o">|=</span> <span class="n">NETIF_F_LLTX</span><span class="p">;</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">ipv6</span><span class="o">/</span><span class="n">sit</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span> <span class="n">dev</span><span class="o">-&gt;</span><span class="n">features</span>           <span class="o">|=</span> <span class="n">NETIF_F_LLTX</span><span class="p">;</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">hsr</span><span class="o">/</span><span class="n">hsr_device</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span>   <span class="n">hsr_dev</span><span class="o">-&gt;</span><span class="n">features</span> <span class="o">|=</span> <span class="n">NETIF_F_LLTX</span><span class="p">;</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">openvswitch</span><span class="o">/</span><span class="n">vport</span><span class="o">-</span><span class="n">internal_dev</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span>   <span class="n">netdev</span><span class="o">-&gt;</span><span class="n">features</span> <span class="o">=</span> <span class="n">NETIF_F_LLTX</span> <span class="o">|</span> <span class="n">NETIF_F_SG</span> <span class="o">|</span> <span class="n">NETIF_F_FRAGLIST</span> <span class="o">|</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">openvswitch</span><span class="o">/</span><span class="n">vport</span><span class="o">-</span><span class="n">internal_dev</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span>   <span class="n">netdev</span><span class="o">-&gt;</span><span class="n">hw_features</span> <span class="o">=</span> <span class="n">netdev</span><span class="o">-&gt;</span><span class="n">features</span> <span class="o">&amp;</span> <span class="o">~</span><span class="n">NETIF_F_LLTX</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">2710</span> <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="nf">__netif_tx_lock</span><span class="p">(</span><span class="k">struct</span> <span class="n">netdev_queue</span> <span class="o">*</span><span class="n">txq</span><span class="p">,</span> <span class="kt">int</span> <span class="n">cpu</span><span class="p">)</span>
</span><span class='line'><span class="mi">2711</span> <span class="p">{</span>
</span><span class='line'><span class="mi">2712</span>         <span class="n">spin_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">txq</span><span class="o">-&gt;</span><span class="n">_xmit_lock</span><span class="p">);</span>
</span><span class='line'><span class="mi">2713</span>         <span class="n">txq</span><span class="o">-&gt;</span><span class="n">xmit_lock_owner</span> <span class="o">=</span> <span class="n">cpu</span><span class="p">;</span>
</span><span class='line'><span class="mi">2714</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">2730</span> <span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">__netif_tx_unlock</span><span class="p">(</span><span class="k">struct</span> <span class="n">netdev_queue</span> <span class="o">*</span><span class="n">txq</span><span class="p">)</span>
</span><span class='line'><span class="mi">2731</span> <span class="p">{</span>
</span><span class='line'><span class="mi">2732</span>         <span class="n">txq</span><span class="o">-&gt;</span><span class="n">xmit_lock_owner</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="mi">2733</span>         <span class="nf">spin_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">txq</span><span class="o">-&gt;</span><span class="n">_xmit_lock</span><span class="p">);</span>
</span><span class='line'><span class="mi">2734</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Create Dev Qdisc]]></title>
    <link href="http://martinbj2008.github.io/blog/2014/01/28/how-to-create-dev-qdisc/"/>
    <updated>2014-01-28T13:47:00+08:00</updated>
    <id>http://martinbj2008.github.io/blog/2014/01/28/how-to-create-dev-qdisc</id>
    <content type="html"><![CDATA[<h2>Summary</h2>

<h3>Part 1: Register multi queue net device.</h3>

<p>In this part, only the framework is prepared for qdisc,
and the <code>noop_qdisc</code> is set as default.</p>

<h4>prepare <code>netdev_queue</code>s.</h4>

<p>for example: intel igb hardware has 8 hardware tx queue,
and nic driver create 8 corresponding <code>struct netdev_queue</code>
in the <code>_tx</code> of <code>struct net_device</code>.</p>

<h4>prepare <code>mq_qdisc</code></h4>

<p>The <code>mq_qdisc</code> is attached to the corresponding device.
In <code>mq_qdisc</code> private field, a default qdisc will be
create for <strong>each</strong> NIC&rsquo;s hardware queue.
This is done in <code>mq_init</code>.
The default qdisc is <code>pfifo_fast_ops</code>.</p>

<h4>attach <code>mq_qdisc</code> to <code>netdev_queue</code>.</h4>

<p>In <code>mq_attach</code>, these qdiscs are attatched to corresponding
<code>struct netdev_queue</code>.</p>

<h3>Part 2: Active a net device with right qdiscs</h3>

<p>Here only trace with the case <code>mq_qdisc</code>.
When dev is up, <code>dev_open</code> is called, which will call <code>dev_activate</code>.</p>

<!-- more -->


<h4>2.1</h4>

<p>A qdisc with <code>mq_qdisc_ops</code> is alloced and assigned to <code>dev-&gt;qdisc</code>,
The <code>mq qdisc</code> is not a simple qdisc, which includes sub-qdisc in its
private fields. Each sub-qdisc is a default qdisc(pfif0).</p>

<!-- ![mq qdisc](/images/mq/mq.blankflowchar.jpeg) -->


<p><img src="https://www.lucidchart.com/publicSegments/view/52f496a8-5c18-4c12-9d2e-62830a0093bd/image.png" alt="mq qdisc" /></p>

<h4>2.2</h4>

<p>when <code>attach</code> a qdisc to a device by <code>qdisc-&gt;attach</code>(which equal <code>mq_attach</code>),
in <code>mq_attach</code>, each qdisc alloc in 2.1, will be assigned to a
netdevice queue(which is alloced in part1).</p>

<p>by now, each netdevice queue has a qdisc, but the qdisc is assigned to
<code>qdisc_sleeping</code> of <code>netdev_queue</code>.</p>

<p>at last, <code>dev_activate</code> call <code>transition_one_qdisc</code> for each tx queue,
to set <code>netdev_queue-&gt;qdisc</code> with <code>netdev_queue-&gt;qdisc_sleeping</code>.</p>

<p><code>attach_default_qdiscs</code> will be called twice time,
one is called to create with <code>mq_qdisc_ops</code>,
one is called to create with <code>default_qdisc_ops</code>,</p>

<h4>Data Structure</h4>

<h5><code>struct net_device</code> and <code>netdev_queue</code></h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="k">struct</span> <span class="n">net_device</span> <span class="p">{</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="mi">1350</span>         <span class="k">struct</span> <span class="n">netdev_queue</span>     <span class="o">*</span><span class="n">_tx</span> <span class="n">____cacheline_aligned_in_smp</span><span class="p">;</span>
</span><span class='line'><span class="mi">1351</span>
</span><span class='line'><span class="mi">1352</span>         <span class="cm">/* Number of TX queues allocated at alloc_netdev_mq() time  */</span>
</span><span class='line'><span class="mi">1353</span>         <span class="kt">unsigned</span> <span class="kt">int</span>            <span class="n">num_tx_queues</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="mi">544</span> <span class="k">struct</span> <span class="n">netdev_queue</span> <span class="p">{</span>
</span><span class='line'> <span class="p">...</span>
</span><span class='line'> <span class="mi">548</span>         <span class="k">struct</span> <span class="n">net_device</span>       <span class="o">*</span><span class="n">dev</span><span class="p">;</span>
</span><span class='line'> <span class="mi">549</span>         <span class="k">struct</span> <span class="n">Qdisc</span>            <span class="o">*</span><span class="n">qdisc</span><span class="p">;</span>
</span><span class='line'> <span class="mi">550</span>         <span class="k">struct</span> <span class="n">Qdisc</span>            <span class="o">*</span><span class="n">qdisc_sleeping</span><span class="p">;</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'> <span class="mi">560</span>         <span class="kt">spinlock_t</span>              <span class="n">_xmit_lock</span> <span class="n">____cacheline_aligned_in_smp</span><span class="p">;</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'> <span class="mi">573</span>         <span class="kt">unsigned</span> <span class="kt">long</span>           <span class="n">state</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="mi">21</span> <span class="k">struct</span> <span class="n">mq_sched</span> <span class="p">{</span>
</span><span class='line'> <span class="mi">22</span>         <span class="k">struct</span> <span class="n">Qdisc</span>            <span class="o">**</span><span class="n">qdiscs</span><span class="p">;</span>
</span><span class='line'> <span class="mi">23</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Call trace.</h4>

<h5>Part 1</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&gt;</span> <span class="n">igb_probe</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">alloc_etherdev_mq</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">alloc_etherdev_mqs</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">alloc_netdev_mqs</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">ether_setup</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">netif_alloc_netdev_queues</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">netdev_for_each_tx_queue</span><span class="p">(</span><span class="n">dev</span><span class="p">,</span> <span class="n">netdev_init_one_queue</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">netdev_init_one_queue</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">register_netdev</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">register_netdevice</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">dev_init_scheduler</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">netdev_for_each_tx_queue</span><span class="p">(</span><span class="n">dev</span><span class="p">,</span> <span class="n">dev_init_scheduler_queue</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">noop_qdisc</span><span class="p">);</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">dev_init_scheduler_queue</span>
</span></code></pre></td></tr></table></div></figure>


<p>NOTE:
if disable RPS(google patch), there is no soft queue to receive packet.
because there is <code>igb_ring</code> in the driver.</p>

<h6>Part 2</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&gt;</span> <span class="n">dev_open</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">__dev_open</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">dev_activate</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">attach_default_qdiscs</span><span class="p">(</span><span class="n">dev</span><span class="p">);</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">qdisc_create_dflt</span><span class="p">(</span><span class="n">txq</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mq_qdisc_ops</span><span class="p">,</span> <span class="n">TC_H_ROOT</span><span class="p">);</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">qdisc_alloc</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">ops</span><span class="o">-&gt;</span><span class="n">init</span><span class="p">(</span><span class="nl">equal</span><span class="p">:</span> <span class="n">mq_init</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="k">for</span> <span class="p">(</span><span class="n">ntx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">ntx</span> <span class="o">&lt;</span> <span class="n">dev</span><span class="o">-&gt;</span><span class="n">num_tx_queues</span><span class="p">;</span> <span class="n">ntx</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">qdisc_create_dflt</span><span class="p">(</span><span class="n">dev_queue</span><span class="p">,</span> <span class="n">default_qdisc_ops</span> <span class="p">...</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">qdisc_alloc</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">ops</span><span class="o">-&gt;</span><span class="n">init</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">qdisc</span><span class="o">-&gt;</span><span class="n">ops</span><span class="o">-&gt;</span><span class="n">attach</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">dev_graft_qdisc</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">netdev_for_each_tx_queue</span><span class="p">(</span><span class="n">dev</span><span class="p">,</span> <span class="n">transition_one_qdisc</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">need_watchdog</span><span class="p">);</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">transition_one_qdisc</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Functions in Part 1.</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">2016</span> <span class="k">static</span> <span class="kt">int</span> <span class="nf">igb_probe</span><span class="p">(</span><span class="k">struct</span> <span class="n">pci_dev</span> <span class="o">*</span><span class="n">pdev</span><span class="p">,</span> <span class="k">const</span> <span class="k">struct</span> <span class="n">pci_device_id</span> <span class="o">*</span><span class="n">ent</span><span class="p">)</span>
</span><span class='line'><span class="mi">2017</span> <span class="p">{</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="mi">2067</span>         <span class="n">netdev</span> <span class="o">=</span> <span class="n">alloc_etherdev_mq</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">igb_adapter</span><span class="p">),</span>
</span><span class='line'><span class="mi">2068</span>                                    <span class="n">IGB_MAX_TX_QUEUES</span><span class="p">);</span>
</span><span class='line'><span class="mi">2069</span>         <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">netdev</span><span class="p">)</span>
</span><span class='line'><span class="mi">2070</span>                 <span class="k">goto</span> <span class="n">err_alloc_etherdev</span><span class="p">;</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="mi">2317</span>         <span class="n">strcpy</span><span class="p">(</span><span class="n">netdev</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">,</span> <span class="s">&quot;eth%d&quot;</span><span class="p">);</span>
</span><span class='line'><span class="mi">2318</span>         <span class="n">err</span> <span class="o">=</span> <span class="n">register_netdev</span><span class="p">(</span><span class="n">netdev</span><span class="p">);</span>
</span><span class='line'><span class="mi">2319</span>         <span class="k">if</span> <span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span><span class='line'><span class="mi">2320</span>                 <span class="k">goto</span> <span class="n">err_register</span><span class="p">;</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="mi">51</span> <span class="err">#</span><span class="n">define</span> <span class="n">alloc_etherdev_mq</span><span class="p">(</span><span class="n">sizeof_priv</span><span class="p">,</span> <span class="n">count</span><span class="p">)</span> <span class="n">alloc_etherdev_mqs</span><span class="p">(</span><span class="n">sizeof_priv</span><span class="p">,</span> <span class="n">count</span><span class="p">,</span> <span class="n">count</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">372</span> <span class="cm">/**</span>
</span><span class='line'><span class="cm">373  * alloc_etherdev_mqs - Allocates and sets up an Ethernet device</span>
</span><span class='line'><span class="cm">374  * @sizeof_priv: Size of additional driver-private structure to be allocated</span>
</span><span class='line'><span class="cm">375  *      for this Ethernet device</span>
</span><span class='line'><span class="cm">376  * @txqs: The number of TX queues this device has.</span>
</span><span class='line'><span class="cm">377  * @rxqs: The number of RX queues this device has.</span>
</span><span class='line'><span class="cm">378  *</span>
</span><span class='line'><span class="cm">379  * Fill in the fields of the device structure with Ethernet-generic</span>
</span><span class='line'><span class="cm">380  * values. Basically does everything except registering the device.</span>
</span><span class='line'><span class="cm">381  *</span>
</span><span class='line'><span class="cm">382  * Constructs a new net device, complete with a private data area of</span>
</span><span class='line'><span class="cm">383  * size (sizeof_priv).  A 32-byte (not bit) alignment is enforced for</span>
</span><span class='line'><span class="cm">384  * this private data area.</span>
</span><span class='line'><span class="cm">385  */</span>
</span><span class='line'><span class="mi">386</span>
</span><span class='line'><span class="mi">387</span> <span class="k">struct</span> <span class="n">net_device</span> <span class="o">*</span><span class="n">alloc_etherdev_mqs</span><span class="p">(</span><span class="kt">int</span> <span class="n">sizeof_priv</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">txqs</span><span class="p">,</span>
</span><span class='line'><span class="mi">388</span>                                       <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">rxqs</span><span class="p">)</span>
</span><span class='line'><span class="mi">389</span> <span class="p">{</span>
</span><span class='line'><span class="mi">390</span>         <span class="k">return</span> <span class="n">alloc_netdev_mqs</span><span class="p">(</span><span class="n">sizeof_priv</span><span class="p">,</span> <span class="s">&quot;eth%d&quot;</span><span class="p">,</span> <span class="n">ether_setup</span><span class="p">,</span> <span class="n">txqs</span><span class="p">,</span> <span class="n">rxqs</span><span class="p">);</span>
</span><span class='line'><span class="mi">391</span> <span class="p">}</span>
</span><span class='line'><span class="mi">392</span> <span class="n">EXPORT_SYMBOL</span><span class="p">(</span><span class="n">alloc_etherdev_mqs</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">6223</span> <span class="cm">/**</span>
</span><span class='line'><span class="cm">6224  *      alloc_netdev_mqs - allocate network device</span>
</span><span class='line'><span class="cm">6225  *      @sizeof_priv:   size of private data to allocate space for</span>
</span><span class='line'><span class="cm">6226  *      @name:          device name format string</span>
</span><span class='line'><span class="cm">6227  *      @setup:         callback to initialize device</span>
</span><span class='line'><span class="cm">6228  *      @txqs:          the number of TX subqueues to allocate</span>
</span><span class='line'><span class="cm">6229  *      @rxqs:          the number of RX subqueues to allocate</span>
</span><span class='line'><span class="cm">6230  *</span>
</span><span class='line'><span class="cm">6231  *      Allocates a struct net_device with private data area for driver use</span>
</span><span class='line'><span class="cm">6232  *      and performs basic initialization.  Also allocates subquue structs</span>
</span><span class='line'><span class="cm">6233  *      for each queue on the device.</span>
</span><span class='line'><span class="cm">6234  */</span>
</span><span class='line'><span class="mi">6235</span> <span class="k">struct</span> <span class="n">net_device</span> <span class="o">*</span><span class="n">alloc_netdev_mqs</span><span class="p">(</span><span class="kt">int</span> <span class="n">sizeof_priv</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">,</span>
</span><span class='line'><span class="mi">6236</span>                 <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">setup</span><span class="p">)(</span><span class="k">struct</span> <span class="n">net_device</span> <span class="o">*</span><span class="p">),</span>
</span><span class='line'><span class="mi">6237</span>                 <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">txqs</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">rxqs</span><span class="p">)</span>
</span><span class='line'><span class="mi">6238</span> <span class="p">{</span>
</span><span class='line'><span class="mi">6239</span>         <span class="k">struct</span> <span class="n">net_device</span> <span class="o">*</span><span class="n">dev</span><span class="p">;</span>
</span><span class='line'><span class="mi">6240</span>         <span class="kt">size_t</span> <span class="n">alloc_size</span><span class="p">;</span>
</span><span class='line'><span class="mi">6241</span>         <span class="k">struct</span> <span class="n">net_device</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span><span class='line'><span class="mi">6242</span>
</span><span class='line'><span class="mi">6243</span>         <span class="nf">BUG_ON</span><span class="p">(</span><span class="n">strlen</span><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">dev</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">));</span>
</span><span class='line'><span class="mi">6244</span>
</span><span class='line'><span class="mi">6245</span>         <span class="nf">if</span> <span class="p">(</span><span class="n">txqs</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="mi">6246</span>                 <span class="n">pr_err</span><span class="p">(</span><span class="s">&quot;alloc_netdev: Unable to allocate device with zero queues</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="mi">6247</span>                 <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="mi">6248</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">6249</span>
</span><span class='line'><span class="mi">6250</span> <span class="err">#</span><span class="n">ifdef</span> <span class="n">CONFIG_RPS</span>
</span><span class='line'><span class="mi">6251</span>         <span class="k">if</span> <span class="p">(</span><span class="n">rxqs</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="mi">6252</span>                 <span class="n">pr_err</span><span class="p">(</span><span class="s">&quot;alloc_netdev: Unable to allocate device with zero RX queues</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="mi">6253</span>                 <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="mi">6254</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">6255</span> <span class="err">#</span><span class="n">endif</span>
</span><span class='line'><span class="mi">6256</span>
</span><span class='line'><span class="mi">6257</span>         <span class="n">alloc_size</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">net_device</span><span class="p">);</span>
</span><span class='line'><span class="mi">6258</span>         <span class="nf">if</span> <span class="p">(</span><span class="n">sizeof_priv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="mi">6259</span>                 <span class="cm">/* ensure 32-byte alignment of private area */</span>
</span><span class='line'><span class="mi">6260</span>                 <span class="n">alloc_size</span> <span class="o">=</span> <span class="n">ALIGN</span><span class="p">(</span><span class="n">alloc_size</span><span class="p">,</span> <span class="n">NETDEV_ALIGN</span><span class="p">);</span>
</span><span class='line'><span class="mi">6261</span>                 <span class="n">alloc_size</span> <span class="o">+=</span> <span class="n">sizeof_priv</span><span class="p">;</span>
</span><span class='line'><span class="mi">6262</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">6263</span>         <span class="cm">/* ensure 32-byte alignment of whole construct */</span>
</span><span class='line'><span class="mi">6264</span>         <span class="n">alloc_size</span> <span class="o">+=</span> <span class="n">NETDEV_ALIGN</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="mi">6265</span>
</span><span class='line'><span class="mi">6266</span>         <span class="n">p</span> <span class="o">=</span> <span class="n">kzalloc</span><span class="p">(</span><span class="n">alloc_size</span><span class="p">,</span> <span class="n">GFP_KERNEL</span> <span class="o">|</span> <span class="n">__GFP_NOWARN</span> <span class="o">|</span> <span class="n">__GFP_REPEAT</span><span class="p">);</span>
</span><span class='line'><span class="mi">6267</span>         <span class="nf">if</span> <span class="p">(</span><span class="o">!</span><span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="mi">6268</span>                 <span class="n">p</span> <span class="o">=</span> <span class="n">vzalloc</span><span class="p">(</span><span class="n">alloc_size</span><span class="p">);</span>
</span><span class='line'><span class="mi">6269</span>         <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="mi">6270</span>                 <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="mi">6271</span>
</span><span class='line'><span class="mi">6272</span>         <span class="n">dev</span> <span class="o">=</span> <span class="n">PTR_ALIGN</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">NETDEV_ALIGN</span><span class="p">);</span>
</span><span class='line'><span class="mi">6273</span>         <span class="n">dev</span><span class="o">-&gt;</span><span class="n">padded</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">dev</span> <span class="o">-</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">p</span><span class="p">;</span>
</span><span class='line'><span class="mi">6274</span>
</span><span class='line'><span class="mi">6275</span>         <span class="n">dev</span><span class="o">-&gt;</span><span class="n">pcpu_refcnt</span> <span class="o">=</span> <span class="n">alloc_percpu</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="mi">6276</span>         <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">dev</span><span class="o">-&gt;</span><span class="n">pcpu_refcnt</span><span class="p">)</span>
</span><span class='line'><span class="mi">6277</span>                 <span class="k">goto</span> <span class="n">free_dev</span><span class="p">;</span>
</span><span class='line'><span class="mi">6278</span>
</span><span class='line'><span class="mi">6279</span>         <span class="k">if</span> <span class="p">(</span><span class="n">dev_addr_init</span><span class="p">(</span><span class="n">dev</span><span class="p">))</span>
</span><span class='line'><span class="mi">6280</span>                 <span class="k">goto</span> <span class="n">free_pcpu</span><span class="p">;</span>
</span><span class='line'><span class="mi">6281</span>
</span><span class='line'><span class="mi">6282</span>         <span class="nf">dev_mc_init</span><span class="p">(</span><span class="n">dev</span><span class="p">);</span>
</span><span class='line'><span class="mi">6283</span>         <span class="nf">dev_uc_init</span><span class="p">(</span><span class="n">dev</span><span class="p">);</span>
</span><span class='line'><span class="mi">6284</span>
</span><span class='line'><span class="mi">6285</span>         <span class="nf">dev_net_set</span><span class="p">(</span><span class="n">dev</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">init_net</span><span class="p">);</span>
</span><span class='line'><span class="mi">6286</span>
</span><span class='line'><span class="mi">6287</span>         <span class="n">dev</span><span class="o">-&gt;</span><span class="n">gso_max_size</span> <span class="o">=</span> <span class="n">GSO_MAX_SIZE</span><span class="p">;</span>
</span><span class='line'><span class="mi">6288</span>         <span class="n">dev</span><span class="o">-&gt;</span><span class="n">gso_max_segs</span> <span class="o">=</span> <span class="n">GSO_MAX_SEGS</span><span class="p">;</span>
</span><span class='line'><span class="mi">6289</span>
</span><span class='line'><span class="mi">6290</span>         <span class="nf">INIT_LIST_HEAD</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dev</span><span class="o">-&gt;</span><span class="n">napi_list</span><span class="p">);</span>
</span><span class='line'><span class="mi">6291</span>         <span class="nf">INIT_LIST_HEAD</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dev</span><span class="o">-&gt;</span><span class="n">unreg_list</span><span class="p">);</span>
</span><span class='line'><span class="mi">6292</span>         <span class="nf">INIT_LIST_HEAD</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dev</span><span class="o">-&gt;</span><span class="n">close_list</span><span class="p">);</span>
</span><span class='line'><span class="mi">6293</span>         <span class="nf">INIT_LIST_HEAD</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dev</span><span class="o">-&gt;</span><span class="n">link_watch_list</span><span class="p">);</span>
</span><span class='line'><span class="mi">6294</span>         <span class="nf">INIT_LIST_HEAD</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dev</span><span class="o">-&gt;</span><span class="n">adj_list</span><span class="p">.</span><span class="n">upper</span><span class="p">);</span>
</span><span class='line'><span class="mi">6295</span>         <span class="nf">INIT_LIST_HEAD</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dev</span><span class="o">-&gt;</span><span class="n">adj_list</span><span class="p">.</span><span class="n">lower</span><span class="p">);</span>
</span><span class='line'><span class="mi">6296</span>         <span class="nf">INIT_LIST_HEAD</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dev</span><span class="o">-&gt;</span><span class="n">all_adj_list</span><span class="p">.</span><span class="n">upper</span><span class="p">);</span>
</span><span class='line'><span class="mi">6297</span>         <span class="nf">INIT_LIST_HEAD</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dev</span><span class="o">-&gt;</span><span class="n">all_adj_list</span><span class="p">.</span><span class="n">lower</span><span class="p">);</span>
</span><span class='line'><span class="mi">6298</span>         <span class="n">dev</span><span class="o">-&gt;</span><span class="n">priv_flags</span> <span class="o">=</span> <span class="n">IFF_XMIT_DST_RELEASE</span><span class="p">;</span>
</span><span class='line'><span class="mi">6299</span>         <span class="nf">setup</span><span class="p">(</span><span class="n">dev</span><span class="p">);</span>
</span><span class='line'><span class="mi">6300</span>
</span><span class='line'><span class="mi">6301</span>         <span class="n">dev</span><span class="o">-&gt;</span><span class="n">num_tx_queues</span> <span class="o">=</span> <span class="n">txqs</span><span class="p">;</span>
</span><span class='line'><span class="mi">6302</span>         <span class="n">dev</span><span class="o">-&gt;</span><span class="n">real_num_tx_queues</span> <span class="o">=</span> <span class="n">txqs</span><span class="p">;</span>
</span><span class='line'><span class="mi">6303</span>         <span class="k">if</span> <span class="p">(</span><span class="n">netif_alloc_netdev_queues</span><span class="p">(</span><span class="n">dev</span><span class="p">))</span>
</span><span class='line'><span class="mi">6304</span>                 <span class="k">goto</span> <span class="n">free_all</span><span class="p">;</span>
</span><span class='line'><span class="mi">6305</span>
</span><span class='line'><span class="mi">6306</span> <span class="err">#</span><span class="n">ifdef</span> <span class="n">CONFIG_RPS</span>
</span><span class='line'><span class="mi">6307</span>         <span class="n">dev</span><span class="o">-&gt;</span><span class="n">num_rx_queues</span> <span class="o">=</span> <span class="n">rxqs</span><span class="p">;</span>
</span><span class='line'><span class="mi">6308</span>         <span class="n">dev</span><span class="o">-&gt;</span><span class="n">real_num_rx_queues</span> <span class="o">=</span> <span class="n">rxqs</span><span class="p">;</span>
</span><span class='line'><span class="mi">6309</span>         <span class="k">if</span> <span class="p">(</span><span class="n">netif_alloc_rx_queues</span><span class="p">(</span><span class="n">dev</span><span class="p">))</span>
</span><span class='line'><span class="mi">6310</span>                 <span class="k">goto</span> <span class="n">free_all</span><span class="p">;</span>
</span><span class='line'><span class="mi">6311</span> <span class="err">#</span><span class="n">endif</span>
</span><span class='line'><span class="mi">6312</span>
</span><span class='line'><span class="mi">6313</span>         <span class="n">strcpy</span><span class="p">(</span><span class="n">dev</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
</span><span class='line'><span class="mi">6314</span>         <span class="n">dev</span><span class="o">-&gt;</span><span class="n">group</span> <span class="o">=</span> <span class="n">INIT_NETDEV_GROUP</span><span class="p">;</span>
</span><span class='line'><span class="mi">6315</span>         <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">dev</span><span class="o">-&gt;</span><span class="n">ethtool_ops</span><span class="p">)</span>
</span><span class='line'><span class="mi">6316</span>                 <span class="n">dev</span><span class="o">-&gt;</span><span class="n">ethtool_ops</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">default_ethtool_ops</span><span class="p">;</span>
</span><span class='line'><span class="mi">6317</span>         <span class="k">return</span> <span class="n">dev</span><span class="p">;</span>
</span><span class='line'><span class="mi">6318</span>
</span><span class='line'><span class="mi">6319</span> <span class="nl">free_all</span><span class="p">:</span>
</span><span class='line'><span class="mi">6320</span>         <span class="n">free_netdev</span><span class="p">(</span><span class="n">dev</span><span class="p">);</span>
</span><span class='line'><span class="mi">6321</span>         <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="mi">6322</span>
</span><span class='line'><span class="mi">6323</span> <span class="nl">free_pcpu</span><span class="p">:</span>
</span><span class='line'><span class="mi">6324</span>         <span class="n">free_percpu</span><span class="p">(</span><span class="n">dev</span><span class="o">-&gt;</span><span class="n">pcpu_refcnt</span><span class="p">);</span>
</span><span class='line'><span class="mi">6325</span>         <span class="nf">netif_free_tx_queues</span><span class="p">(</span><span class="n">dev</span><span class="p">);</span>
</span><span class='line'><span class="mi">6326</span> <span class="err">#</span><span class="n">ifdef</span> <span class="n">CONFIG_RPS</span>
</span><span class='line'><span class="mi">6327</span>         <span class="n">kfree</span><span class="p">(</span><span class="n">dev</span><span class="o">-&gt;</span><span class="n">_rx</span><span class="p">);</span>
</span><span class='line'><span class="mi">6328</span> <span class="err">#</span><span class="n">endif</span>
</span><span class='line'><span class="mi">6329</span>
</span><span class='line'><span class="mi">6330</span> <span class="nl">free_dev</span><span class="p">:</span>
</span><span class='line'><span class="mi">6331</span>         <span class="n">netdev_freemem</span><span class="p">(</span><span class="n">dev</span><span class="p">);</span>
</span><span class='line'><span class="mi">6332</span>         <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="mi">6333</span> <span class="p">}</span>
</span><span class='line'><span class="mi">6334</span> <span class="n">EXPORT_SYMBOL</span><span class="p">(</span><span class="n">alloc_netdev_mqs</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">5742</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">netif_alloc_netdev_queues</span><span class="p">(</span><span class="k">struct</span> <span class="n">net_device</span> <span class="o">*</span><span class="n">dev</span><span class="p">)</span>
</span><span class='line'><span class="mi">5743</span> <span class="p">{</span>
</span><span class='line'><span class="mi">5744</span>         <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">dev</span><span class="o">-&gt;</span><span class="n">num_tx_queues</span><span class="p">;</span>
</span><span class='line'><span class="mi">5745</span>         <span class="k">struct</span> <span class="n">netdev_queue</span> <span class="o">*</span><span class="n">tx</span><span class="p">;</span>
</span><span class='line'><span class="mi">5746</span>         <span class="kt">size_t</span> <span class="n">sz</span> <span class="o">=</span> <span class="n">count</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">tx</span><span class="p">);</span>
</span><span class='line'><span class="mi">5747</span>
</span><span class='line'><span class="mi">5748</span>         <span class="nf">BUG_ON</span><span class="p">(</span><span class="n">count</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">count</span> <span class="o">&gt;</span> <span class="mh">0xffff</span><span class="p">);</span>
</span><span class='line'><span class="mi">5749</span>
</span><span class='line'><span class="mi">5750</span>         <span class="n">tx</span> <span class="o">=</span> <span class="n">kzalloc</span><span class="p">(</span><span class="n">sz</span><span class="p">,</span> <span class="n">GFP_KERNEL</span> <span class="o">|</span> <span class="n">__GFP_NOWARN</span> <span class="o">|</span> <span class="n">__GFP_REPEAT</span><span class="p">);</span>
</span><span class='line'><span class="mi">5751</span>         <span class="nf">if</span> <span class="p">(</span><span class="o">!</span><span class="n">tx</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="mi">5752</span>                 <span class="n">tx</span> <span class="o">=</span> <span class="n">vzalloc</span><span class="p">(</span><span class="n">sz</span><span class="p">);</span>
</span><span class='line'><span class="mi">5753</span>                 <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">tx</span><span class="p">)</span>
</span><span class='line'><span class="mi">5754</span>                         <span class="k">return</span> <span class="o">-</span><span class="n">ENOMEM</span><span class="p">;</span>
</span><span class='line'><span class="mi">5755</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">5756</span>         <span class="n">dev</span><span class="o">-&gt;</span><span class="n">_tx</span> <span class="o">=</span> <span class="n">tx</span><span class="p">;</span>
</span><span class='line'><span class="mi">5757</span>
</span><span class='line'><span class="mi">5758</span>         <span class="nf">netdev_for_each_tx_queue</span><span class="p">(</span><span class="n">dev</span><span class="p">,</span> <span class="n">netdev_init_one_queue</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="mi">5759</span>         <span class="nf">spin_lock_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dev</span><span class="o">-&gt;</span><span class="n">tx_global_lock</span><span class="p">);</span>
</span><span class='line'><span class="mi">5760</span>
</span><span class='line'><span class="mi">5761</span>         <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="mi">5762</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">5720</span> <span class="k">static</span> <span class="kt">void</span> <span class="nf">netdev_init_one_queue</span><span class="p">(</span><span class="k">struct</span> <span class="n">net_device</span> <span class="o">*</span><span class="n">dev</span><span class="p">,</span>
</span><span class='line'><span class="mi">5721</span>                                   <span class="k">struct</span> <span class="n">netdev_queue</span> <span class="o">*</span><span class="n">queue</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">_unused</span><span class="p">)</span>
</span><span class='line'><span class="mi">5722</span> <span class="p">{</span>
</span><span class='line'><span class="mi">5723</span>         <span class="cm">/* Initialize queue lock */</span>
</span><span class='line'><span class="mi">5724</span>         <span class="n">spin_lock_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">queue</span><span class="o">-&gt;</span><span class="n">_xmit_lock</span><span class="p">);</span>
</span><span class='line'><span class="mi">5725</span>         <span class="nf">netdev_set_xmit_lockdep_class</span><span class="p">(</span><span class="o">&amp;</span><span class="n">queue</span><span class="o">-&gt;</span><span class="n">_xmit_lock</span><span class="p">,</span> <span class="n">dev</span><span class="o">-&gt;</span><span class="n">type</span><span class="p">);</span>
</span><span class='line'><span class="mi">5726</span>         <span class="n">queue</span><span class="o">-&gt;</span><span class="n">xmit_lock_owner</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="mi">5727</span>         <span class="nf">netdev_queue_numa_node_write</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="n">NUMA_NO_NODE</span><span class="p">);</span>
</span><span class='line'><span class="mi">5728</span>         <span class="n">queue</span><span class="o">-&gt;</span><span class="n">dev</span> <span class="o">=</span> <span class="n">dev</span><span class="p">;</span>
</span><span class='line'><span class="mi">5729</span> <span class="err">#</span><span class="n">ifdef</span> <span class="n">CONFIG_BQL</span>
</span><span class='line'><span class="mi">5730</span>         <span class="n">dql_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">queue</span><span class="o">-&gt;</span><span class="n">dql</span><span class="p">,</span> <span class="n">HZ</span><span class="p">);</span>
</span><span class='line'><span class="mi">5731</span> <span class="err">#</span><span class="n">endif</span>
</span><span class='line'><span class="mi">5732</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">5972</span> <span class="kt">int</span> <span class="n">register_netdev</span><span class="p">(</span><span class="k">struct</span> <span class="n">net_device</span> <span class="o">*</span><span class="n">dev</span><span class="p">)</span>
</span><span class='line'><span class="mi">5973</span> <span class="p">{</span>
</span><span class='line'><span class="mi">5974</span>         <span class="kt">int</span> <span class="n">err</span><span class="p">;</span>
</span><span class='line'><span class="mi">5975</span>
</span><span class='line'><span class="mi">5976</span>         <span class="nf">rtnl_lock</span><span class="p">();</span>
</span><span class='line'><span class="mi">5977</span>         <span class="n">err</span> <span class="o">=</span> <span class="n">register_netdevice</span><span class="p">(</span><span class="n">dev</span><span class="p">);</span>
</span><span class='line'><span class="mi">5978</span>         <span class="nf">rtnl_unlock</span><span class="p">();</span>
</span><span class='line'><span class="mi">5979</span>         <span class="k">return</span> <span class="n">err</span><span class="p">;</span>
</span><span class='line'><span class="mi">5980</span> <span class="p">}</span>
</span><span class='line'><span class="mi">5981</span> <span class="n">EXPORT_SYMBOL</span><span class="p">(</span><span class="n">register_netdev</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">5781</span> <span class="kt">int</span> <span class="nf">register_netdevice</span><span class="p">(</span><span class="k">struct</span> <span class="n">net_device</span> <span class="o">*</span><span class="n">dev</span><span class="p">)</span>
</span><span class='line'><span class="mi">5782</span> <span class="p">{</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="mi">5879</span>         <span class="n">linkwatch_init_dev</span><span class="p">(</span><span class="n">dev</span><span class="p">);</span>
</span><span class='line'><span class="mi">5880</span>
</span><span class='line'><span class="mi">5881</span>         <span class="nf">dev_init_scheduler</span><span class="p">(</span><span class="n">dev</span><span class="p">);</span>
</span><span class='line'><span class="mi">5882</span>         <span class="nf">dev_hold</span><span class="p">(</span><span class="n">dev</span><span class="p">);</span>
</span><span class='line'><span class="mi">5883</span>         <span class="nf">list_netdevice</span><span class="p">(</span><span class="n">dev</span><span class="p">);</span>
</span><span class='line'><span class="mi">5884</span>         <span class="nf">add_device_randomness</span><span class="p">(</span><span class="n">dev</span><span class="o">-&gt;</span><span class="n">dev_addr</span><span class="p">,</span> <span class="n">dev</span><span class="o">-&gt;</span><span class="n">addr_len</span><span class="p">);</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">876</span> <span class="kt">void</span> <span class="n">dev_init_scheduler</span><span class="p">(</span><span class="k">struct</span> <span class="n">net_device</span> <span class="o">*</span><span class="n">dev</span><span class="p">)</span>
</span><span class='line'><span class="mi">877</span> <span class="p">{</span>
</span><span class='line'><span class="mi">878</span>         <span class="n">dev</span><span class="o">-&gt;</span><span class="n">qdisc</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">noop_qdisc</span><span class="p">;</span>
</span><span class='line'><span class="mi">879</span>         <span class="nf">netdev_for_each_tx_queue</span><span class="p">(</span><span class="n">dev</span><span class="p">,</span> <span class="n">dev_init_scheduler_queue</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">noop_qdisc</span><span class="p">);</span>
</span><span class='line'><span class="mi">880</span>         <span class="nf">if</span> <span class="p">(</span><span class="n">dev_ingress_queue</span><span class="p">(</span><span class="n">dev</span><span class="p">))</span>
</span><span class='line'><span class="mi">881</span>                 <span class="n">dev_init_scheduler_queue</span><span class="p">(</span><span class="n">dev</span><span class="p">,</span> <span class="n">dev_ingress_queue</span><span class="p">(</span><span class="n">dev</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">noop_qdisc</span><span class="p">);</span>
</span><span class='line'><span class="mi">882</span>
</span><span class='line'><span class="mi">883</span>         <span class="nf">setup_timer</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dev</span><span class="o">-&gt;</span><span class="n">watchdog_timer</span><span class="p">,</span> <span class="n">dev_watchdog</span><span class="p">,</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="n">dev</span><span class="p">);</span>
</span><span class='line'><span class="mi">884</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">866</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">dev_init_scheduler_queue</span><span class="p">(</span><span class="k">struct</span> <span class="n">net_device</span> <span class="o">*</span><span class="n">dev</span><span class="p">,</span>
</span><span class='line'><span class="mi">867</span>                                      <span class="k">struct</span> <span class="n">netdev_queue</span> <span class="o">*</span><span class="n">dev_queue</span><span class="p">,</span>
</span><span class='line'><span class="mi">868</span>                                      <span class="kt">void</span> <span class="o">*</span><span class="n">_qdisc</span><span class="p">)</span>
</span><span class='line'><span class="mi">869</span> <span class="p">{</span>
</span><span class='line'><span class="mi">870</span>         <span class="k">struct</span> <span class="n">Qdisc</span> <span class="o">*</span><span class="n">qdisc</span> <span class="o">=</span> <span class="n">_qdisc</span><span class="p">;</span>
</span><span class='line'><span class="mi">871</span>
</span><span class='line'><span class="mi">872</span>         <span class="n">dev_queue</span><span class="o">-&gt;</span><span class="n">qdisc</span> <span class="o">=</span> <span class="n">qdisc</span><span class="p">;</span>
</span><span class='line'><span class="mi">873</span>         <span class="n">dev_queue</span><span class="o">-&gt;</span><span class="n">qdisc_sleeping</span> <span class="o">=</span> <span class="n">qdisc</span><span class="p">;</span>
</span><span class='line'><span class="mi">874</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">366</span> <span class="k">struct</span> <span class="n">Qdisc</span> <span class="n">noop_qdisc</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'><span class="mi">367</span>         <span class="p">.</span><span class="n">enqueue</span>        <span class="o">=</span>       <span class="n">noop_enqueue</span><span class="p">,</span>
</span><span class='line'><span class="mi">368</span>         <span class="p">.</span><span class="n">dequeue</span>        <span class="o">=</span>       <span class="n">noop_dequeue</span><span class="p">,</span>
</span><span class='line'><span class="mi">369</span>         <span class="p">.</span><span class="n">flags</span>          <span class="o">=</span>       <span class="n">TCQ_F_BUILTIN</span><span class="p">,</span>
</span><span class='line'><span class="mi">370</span>         <span class="p">.</span><span class="n">ops</span>            <span class="o">=</span>       <span class="o">&amp;</span><span class="n">noop_qdisc_ops</span><span class="p">,</span>
</span><span class='line'><span class="mi">371</span>         <span class="p">.</span><span class="n">list</span>           <span class="o">=</span>       <span class="n">LIST_HEAD_INIT</span><span class="p">(</span><span class="n">noop_qdisc</span><span class="p">.</span><span class="n">list</span><span class="p">),</span>
</span><span class='line'><span class="mi">372</span>         <span class="p">.</span><span class="n">q</span><span class="p">.</span><span class="n">lock</span>         <span class="o">=</span>       <span class="n">__SPIN_LOCK_UNLOCKED</span><span class="p">(</span><span class="n">noop_qdisc</span><span class="p">.</span><span class="n">q</span><span class="p">.</span><span class="n">lock</span><span class="p">),</span>
</span><span class='line'><span class="mi">373</span>         <span class="p">.</span><span class="n">dev_queue</span>      <span class="o">=</span>       <span class="o">&amp;</span><span class="n">noop_netdev_queue</span><span class="p">,</span>
</span><span class='line'><span class="mi">374</span>         <span class="p">.</span><span class="n">busylock</span>       <span class="o">=</span>       <span class="n">__SPIN_LOCK_UNLOCKED</span><span class="p">(</span><span class="n">noop_qdisc</span><span class="p">.</span><span class="n">busylock</span><span class="p">),</span>
</span><span class='line'><span class="mi">375</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h4>functions for Part 2.</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">745</span> <span class="kt">void</span> <span class="n">dev_activate</span><span class="p">(</span><span class="k">struct</span> <span class="n">net_device</span> <span class="o">*</span><span class="n">dev</span><span class="p">)</span>
</span><span class='line'><span class="mi">746</span> <span class="p">{</span>
</span><span class='line'><span class="mi">747</span>         <span class="kt">int</span> <span class="n">need_watchdog</span><span class="p">;</span>
</span><span class='line'><span class="mi">748</span>
</span><span class='line'><span class="mi">749</span>         <span class="cm">/* No queueing discipline is attached to device;</span>
</span><span class='line'><span class="cm">750          * create default one for devices, which need queueing</span>
</span><span class='line'><span class="cm">751          * and noqueue_qdisc for virtual interfaces</span>
</span><span class='line'><span class="cm">752          */</span>
</span><span class='line'><span class="mi">753</span>
</span><span class='line'><span class="mi">754</span>         <span class="k">if</span> <span class="p">(</span><span class="n">dev</span><span class="o">-&gt;</span><span class="n">qdisc</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">noop_qdisc</span><span class="p">)</span>
</span><span class='line'><span class="mi">755</span>                 <span class="n">attach_default_qdiscs</span><span class="p">(</span><span class="n">dev</span><span class="p">);</span>
</span><span class='line'><span class="mi">756</span>
</span><span class='line'><span class="mi">757</span>         <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">netif_carrier_ok</span><span class="p">(</span><span class="n">dev</span><span class="p">))</span>
</span><span class='line'><span class="mi">758</span>                 <span class="cm">/* Delay activation until next carrier-on event */</span>
</span><span class='line'><span class="mi">759</span>                 <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="mi">760</span>
</span><span class='line'><span class="mi">761</span>         <span class="n">need_watchdog</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="mi">762</span>         <span class="nf">netdev_for_each_tx_queue</span><span class="p">(</span><span class="n">dev</span><span class="p">,</span> <span class="n">transition_one_qdisc</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">need_watchdog</span><span class="p">);</span>
</span><span class='line'><span class="mi">763</span>         <span class="nf">if</span> <span class="p">(</span><span class="n">dev_ingress_queue</span><span class="p">(</span><span class="n">dev</span><span class="p">))</span>
</span><span class='line'><span class="mi">764</span>                 <span class="n">transition_one_qdisc</span><span class="p">(</span><span class="n">dev</span><span class="p">,</span> <span class="n">dev_ingress_queue</span><span class="p">(</span><span class="n">dev</span><span class="p">),</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="mi">765</span>
</span><span class='line'><span class="mi">766</span>         <span class="nf">if</span> <span class="p">(</span><span class="n">need_watchdog</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="mi">767</span>                 <span class="n">dev</span><span class="o">-&gt;</span><span class="n">trans_start</span> <span class="o">=</span> <span class="n">jiffies</span><span class="p">;</span>
</span><span class='line'><span class="mi">768</span>                 <span class="n">dev_watchdog_up</span><span class="p">(</span><span class="n">dev</span><span class="p">);</span>
</span><span class='line'><span class="mi">769</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">770</span> <span class="p">}</span>
</span><span class='line'><span class="mi">771</span> <span class="n">EXPORT_SYMBOL</span><span class="p">(</span><span class="n">dev_activate</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">708</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">attach_default_qdiscs</span><span class="p">(</span><span class="k">struct</span> <span class="n">net_device</span> <span class="o">*</span><span class="n">dev</span><span class="p">)</span>
</span><span class='line'><span class="mi">709</span> <span class="p">{</span>
</span><span class='line'><span class="mi">710</span>         <span class="k">struct</span> <span class="n">netdev_queue</span> <span class="o">*</span><span class="n">txq</span><span class="p">;</span>
</span><span class='line'><span class="mi">711</span>         <span class="k">struct</span> <span class="n">Qdisc</span> <span class="o">*</span><span class="n">qdisc</span><span class="p">;</span>
</span><span class='line'><span class="mi">712</span>
</span><span class='line'><span class="mi">713</span>         <span class="n">txq</span> <span class="o">=</span> <span class="n">netdev_get_tx_queue</span><span class="p">(</span><span class="n">dev</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="mi">714</span>
</span><span class='line'><span class="mi">715</span>         <span class="nf">if</span> <span class="p">(</span><span class="o">!</span><span class="n">netif_is_multiqueue</span><span class="p">(</span><span class="n">dev</span><span class="p">)</span> <span class="o">||</span> <span class="n">dev</span><span class="o">-&gt;</span><span class="n">tx_queue_len</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="mi">716</span>                 <span class="n">netdev_for_each_tx_queue</span><span class="p">(</span><span class="n">dev</span><span class="p">,</span> <span class="n">attach_one_default_qdisc</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="mi">717</span>                 <span class="n">dev</span><span class="o">-&gt;</span><span class="n">qdisc</span> <span class="o">=</span> <span class="n">txq</span><span class="o">-&gt;</span><span class="n">qdisc_sleeping</span><span class="p">;</span>
</span><span class='line'><span class="mi">718</span>                 <span class="n">atomic_inc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dev</span><span class="o">-&gt;</span><span class="n">qdisc</span><span class="o">-&gt;</span><span class="n">refcnt</span><span class="p">);</span>
</span><span class='line'><span class="mi">719</span>         <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'><span class="mi">720</span>                 <span class="n">qdisc</span> <span class="o">=</span> <span class="n">qdisc_create_dflt</span><span class="p">(</span><span class="n">txq</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mq_qdisc_ops</span><span class="p">,</span> <span class="n">TC_H_ROOT</span><span class="p">);</span>
</span><span class='line'><span class="mi">721</span>                 <span class="nf">if</span> <span class="p">(</span><span class="n">qdisc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="mi">722</span>                         <span class="n">qdisc</span><span class="o">-&gt;</span><span class="n">ops</span><span class="o">-&gt;</span><span class="n">attach</span><span class="p">(</span><span class="n">qdisc</span><span class="p">);</span>
</span><span class='line'><span class="mi">723</span>                         <span class="n">dev</span><span class="o">-&gt;</span><span class="n">qdisc</span> <span class="o">=</span> <span class="n">qdisc</span><span class="p">;</span>
</span><span class='line'><span class="mi">724</span>                 <span class="p">}</span>
</span><span class='line'><span class="mi">725</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">726</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">223</span> <span class="k">static</span> <span class="k">const</span> <span class="k">struct</span> <span class="n">Qdisc_class_ops</span> <span class="n">mq_class_ops</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'><span class="mi">224</span>         <span class="p">.</span><span class="n">select_queue</span>   <span class="o">=</span> <span class="n">mq_select_queue</span><span class="p">,</span>
</span><span class='line'><span class="mi">225</span>         <span class="p">.</span><span class="n">graft</span>          <span class="o">=</span> <span class="n">mq_graft</span><span class="p">,</span>
</span><span class='line'><span class="mi">226</span>         <span class="p">.</span><span class="n">leaf</span>           <span class="o">=</span> <span class="n">mq_leaf</span><span class="p">,</span>
</span><span class='line'><span class="mi">227</span>         <span class="p">.</span><span class="n">get</span>            <span class="o">=</span> <span class="n">mq_get</span><span class="p">,</span>
</span><span class='line'><span class="mi">228</span>         <span class="p">.</span><span class="n">put</span>            <span class="o">=</span> <span class="n">mq_put</span><span class="p">,</span>
</span><span class='line'><span class="mi">229</span>         <span class="p">.</span><span class="n">walk</span>           <span class="o">=</span> <span class="n">mq_walk</span><span class="p">,</span>
</span><span class='line'><span class="mi">230</span>         <span class="p">.</span><span class="n">dump</span>           <span class="o">=</span> <span class="n">mq_dump_class</span><span class="p">,</span>
</span><span class='line'><span class="mi">231</span>         <span class="p">.</span><span class="n">dump_stats</span>     <span class="o">=</span> <span class="n">mq_dump_class_stats</span><span class="p">,</span>
</span><span class='line'><span class="mi">232</span> <span class="p">};</span>
</span><span class='line'><span class="mi">233</span>
</span><span class='line'><span class="mi">234</span> <span class="k">struct</span> <span class="n">Qdisc_ops</span> <span class="n">mq_qdisc_ops</span> <span class="n">__read_mostly</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'><span class="mi">235</span>         <span class="p">.</span><span class="n">cl_ops</span>         <span class="o">=</span> <span class="o">&amp;</span><span class="n">mq_class_ops</span><span class="p">,</span>
</span><span class='line'><span class="mi">236</span>         <span class="p">.</span><span class="n">id</span>             <span class="o">=</span> <span class="s">&quot;mq&quot;</span><span class="p">,</span>
</span><span class='line'><span class="mi">237</span>         <span class="p">.</span><span class="n">priv_size</span>      <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">mq_sched</span><span class="p">),</span>
</span><span class='line'><span class="mi">238</span>         <span class="p">.</span><span class="n">init</span>           <span class="o">=</span> <span class="n">mq_init</span><span class="p">,</span>
</span><span class='line'><span class="mi">239</span>         <span class="p">.</span><span class="n">destroy</span>        <span class="o">=</span> <span class="n">mq_destroy</span><span class="p">,</span>
</span><span class='line'><span class="mi">240</span>         <span class="p">.</span><span class="n">attach</span>         <span class="o">=</span> <span class="n">mq_attach</span><span class="p">,</span>
</span><span class='line'><span class="mi">241</span>         <span class="p">.</span><span class="n">dump</span>           <span class="o">=</span> <span class="n">mq_dump</span><span class="p">,</span>
</span><span class='line'><span class="mi">242</span>         <span class="p">.</span><span class="n">owner</span>          <span class="o">=</span> <span class="n">THIS_MODULE</span><span class="p">,</span>
</span><span class='line'><span class="mi">243</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">584</span> <span class="k">struct</span> <span class="n">Qdisc</span> <span class="o">*</span><span class="n">qdisc_create_dflt</span><span class="p">(</span><span class="k">struct</span> <span class="n">netdev_queue</span> <span class="o">*</span><span class="n">dev_queue</span><span class="p">,</span>
</span><span class='line'><span class="mi">585</span>                                 <span class="k">const</span> <span class="k">struct</span> <span class="n">Qdisc_ops</span> <span class="o">*</span><span class="n">ops</span><span class="p">,</span>
</span><span class='line'><span class="mi">586</span>                                 <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">parentid</span><span class="p">)</span>
</span><span class='line'><span class="mi">587</span> <span class="p">{</span>
</span><span class='line'><span class="mi">588</span>         <span class="k">struct</span> <span class="n">Qdisc</span> <span class="o">*</span><span class="n">sch</span><span class="p">;</span>
</span><span class='line'><span class="mi">589</span>
</span><span class='line'><span class="mi">590</span>         <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">try_module_get</span><span class="p">(</span><span class="n">ops</span><span class="o">-&gt;</span><span class="n">owner</span><span class="p">))</span>
</span><span class='line'><span class="mi">591</span>                 <span class="k">goto</span> <span class="n">errout</span><span class="p">;</span>
</span><span class='line'><span class="mi">592</span>
</span><span class='line'><span class="mi">593</span>         <span class="n">sch</span> <span class="o">=</span> <span class="n">qdisc_alloc</span><span class="p">(</span><span class="n">dev_queue</span><span class="p">,</span> <span class="n">ops</span><span class="p">);</span>
</span><span class='line'><span class="mi">594</span>         <span class="k">if</span> <span class="p">(</span><span class="n">IS_ERR</span><span class="p">(</span><span class="n">sch</span><span class="p">))</span>
</span><span class='line'><span class="mi">595</span>                 <span class="k">goto</span> <span class="n">errout</span><span class="p">;</span>
</span><span class='line'><span class="mi">596</span>         <span class="n">sch</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">parentid</span><span class="p">;</span>
</span><span class='line'><span class="mi">597</span>
</span><span class='line'><span class="mi">598</span>         <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ops</span><span class="o">-&gt;</span><span class="n">init</span> <span class="o">||</span> <span class="n">ops</span><span class="o">-&gt;</span><span class="n">init</span><span class="p">(</span><span class="n">sch</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="mi">599</span>                 <span class="k">return</span> <span class="n">sch</span><span class="p">;</span>
</span><span class='line'><span class="mi">600</span>
</span><span class='line'><span class="mi">601</span>         <span class="nf">qdisc_destroy</span><span class="p">(</span><span class="n">sch</span><span class="p">);</span>
</span><span class='line'><span class="mi">602</span> <span class="nl">errout</span><span class="p">:</span>
</span><span class='line'><span class="mi">603</span>         <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="mi">604</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Qdisc Study Part1: Qdisc_base]]></title>
    <link href="http://martinbj2008.github.io/blog/2014/01/28/qdisc-study-part1-qdisc-base/"/>
    <updated>2014-01-28T11:30:00+08:00</updated>
    <id>http://martinbj2008.github.io/blog/2014/01/28/qdisc-study-part1-qdisc-base</id>
    <content type="html"><![CDATA[<h3><code>Qdisc_ops</code> is the core of  a Qdisc.</h3>

<p>All kinds of the <code>Qdisc_ops</code> are linked in a list by <code>qdisc_base</code>.
The <strong>key</strong> item of different <code>Qdisc_ops</code> is <code>id[IFNAMSIZ]</code>.</p>

<p>Note: the list is a Singly-linked list, not a common list of kernel.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">158</span> <span class="k">struct</span> <span class="n">Qdisc_ops</span> <span class="p">{</span>
</span><span class='line'><span class="mi">159</span>         <span class="k">struct</span> <span class="n">Qdisc_ops</span>        <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'><span class="mi">160</span>         <span class="k">const</span> <span class="k">struct</span> <span class="n">Qdisc_class_ops</span>    <span class="o">*</span><span class="n">cl_ops</span><span class="p">;</span>
</span><span class='line'><span class="mi">161</span>         <span class="kt">char</span>                    <span class="n">id</span><span class="p">[</span><span class="n">IFNAMSIZ</span><span class="p">];</span>
</span><span class='line'><span class="mi">162</span>         <span class="kt">int</span>                     <span class="n">priv_size</span><span class="p">;</span>
</span><span class='line'><span class="mi">163</span>
</span><span class='line'><span class="mi">164</span>         <span class="nf">int</span>                     <span class="p">(</span><span class="o">*</span><span class="n">enqueue</span><span class="p">)(</span><span class="k">struct</span> <span class="n">sk_buff</span> <span class="o">*</span><span class="p">,</span> <span class="k">struct</span> <span class="n">Qdisc</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="mi">165</span>         <span class="k">struct</span> <span class="n">sk_buff</span> <span class="o">*</span>        <span class="p">(</span><span class="o">*</span><span class="n">dequeue</span><span class="p">)(</span><span class="k">struct</span> <span class="n">Qdisc</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="mi">166</span>         <span class="k">struct</span> <span class="n">sk_buff</span> <span class="o">*</span>        <span class="p">(</span><span class="o">*</span><span class="n">peek</span><span class="p">)(</span><span class="k">struct</span> <span class="n">Qdisc</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="mi">167</span>         <span class="kt">unsigned</span> <span class="nf">int</span>            <span class="p">(</span><span class="o">*</span><span class="n">drop</span><span class="p">)(</span><span class="k">struct</span> <span class="n">Qdisc</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="mi">168</span>
</span><span class='line'><span class="mi">169</span>         <span class="nf">int</span>                     <span class="p">(</span><span class="o">*</span><span class="n">init</span><span class="p">)(</span><span class="k">struct</span> <span class="n">Qdisc</span> <span class="o">*</span><span class="p">,</span> <span class="k">struct</span> <span class="n">nlattr</span> <span class="o">*</span><span class="n">arg</span><span class="p">);</span>
</span><span class='line'><span class="mi">170</span>         <span class="nf">void</span>                    <span class="p">(</span><span class="o">*</span><span class="n">reset</span><span class="p">)(</span><span class="k">struct</span> <span class="n">Qdisc</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="mi">171</span>         <span class="nf">void</span>                    <span class="p">(</span><span class="o">*</span><span class="n">destroy</span><span class="p">)(</span><span class="k">struct</span> <span class="n">Qdisc</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="mi">172</span>         <span class="nf">int</span>                     <span class="p">(</span><span class="o">*</span><span class="n">change</span><span class="p">)(</span><span class="k">struct</span> <span class="n">Qdisc</span> <span class="o">*</span><span class="p">,</span> <span class="k">struct</span> <span class="n">nlattr</span> <span class="o">*</span><span class="n">arg</span><span class="p">);</span>
</span><span class='line'><span class="mi">173</span>         <span class="nf">void</span>                    <span class="p">(</span><span class="o">*</span><span class="n">attach</span><span class="p">)(</span><span class="k">struct</span> <span class="n">Qdisc</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="mi">174</span>
</span><span class='line'><span class="mi">175</span>         <span class="nf">int</span>                     <span class="p">(</span><span class="o">*</span><span class="n">dump</span><span class="p">)(</span><span class="k">struct</span> <span class="n">Qdisc</span> <span class="o">*</span><span class="p">,</span> <span class="k">struct</span> <span class="n">sk_buff</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="mi">176</span>         <span class="nf">int</span>                     <span class="p">(</span><span class="o">*</span><span class="n">dump_stats</span><span class="p">)(</span><span class="k">struct</span> <span class="n">Qdisc</span> <span class="o">*</span><span class="p">,</span> <span class="k">struct</span> <span class="n">gnet_dump</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="mi">177</span>
</span><span class='line'><span class="mi">178</span>         <span class="k">struct</span> <span class="n">module</span>           <span class="o">*</span><span class="n">owner</span><span class="p">;</span>
</span><span class='line'><span class="mi">179</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>qdisc_base</code></h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="mi">134</span> <span class="cm">/* The list of all installed queueing disciplines. */</span>
</span><span class='line'> <span class="mi">135</span>
</span><span class='line'> <span class="mi">136</span> <span class="k">static</span> <span class="k">struct</span> <span class="n">Qdisc_ops</span> <span class="o">*</span><span class="n">qdisc_base</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<h3>the default <code>Qdisc_ops</code> is <code>default_qdisc_ops</code>.</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="mi">33</span> <span class="cm">/* Qdisc to use by default */</span>
</span><span class='line'> <span class="mi">34</span> <span class="k">const</span> <span class="k">struct</span> <span class="n">Qdisc_ops</span> <span class="o">*</span><span class="n">default_qdisc_ops</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">pfifo_fast_ops</span><span class="p">;</span>
</span><span class='line'> <span class="mi">35</span> <span class="nf">EXPORT_SYMBOL</span><span class="p">(</span><span class="n">default_qdisc_ops</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">526</span> <span class="k">struct</span> <span class="n">Qdisc_ops</span> <span class="n">pfifo_fast_ops</span> <span class="n">__read_mostly</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'><span class="mi">527</span>         <span class="p">.</span><span class="n">id</span>             <span class="o">=</span>       <span class="s">&quot;pfifo_fast&quot;</span><span class="p">,</span>
</span><span class='line'><span class="mi">528</span>         <span class="p">.</span><span class="n">priv_size</span>      <span class="o">=</span>       <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">pfifo_fast_priv</span><span class="p">),</span>
</span><span class='line'><span class="mi">529</span>         <span class="p">.</span><span class="n">enqueue</span>        <span class="o">=</span>       <span class="n">pfifo_fast_enqueue</span><span class="p">,</span>
</span><span class='line'><span class="mi">530</span>         <span class="p">.</span><span class="n">dequeue</span>        <span class="o">=</span>       <span class="n">pfifo_fast_dequeue</span><span class="p">,</span>
</span><span class='line'><span class="mi">531</span>         <span class="p">.</span><span class="n">peek</span>           <span class="o">=</span>       <span class="n">pfifo_fast_peek</span><span class="p">,</span>
</span><span class='line'><span class="mi">532</span>         <span class="p">.</span><span class="n">init</span>           <span class="o">=</span>       <span class="n">pfifo_fast_init</span><span class="p">,</span>
</span><span class='line'><span class="mi">533</span>         <span class="p">.</span><span class="n">reset</span>          <span class="o">=</span>       <span class="n">pfifo_fast_reset</span><span class="p">,</span>
</span><span class='line'><span class="mi">534</span>         <span class="p">.</span><span class="n">dump</span>           <span class="o">=</span>       <span class="n">pfifo_fast_dump</span><span class="p">,</span>
</span><span class='line'><span class="mi">535</span>         <span class="p">.</span><span class="n">owner</span>          <span class="o">=</span>       <span class="n">THIS_MODULE</span><span class="p">,</span>
</span><span class='line'><span class="mi">536</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>register_qdisc</code></h3>

<p>The list is not a sorted list, it would be better with sorted list,
but these reg/unreg functions are rarely used.
do some basic check for the methods of <code>Qdisc_ops</code>,
and set some default values.</p>

<p>for example, method <code>peek</code> must be empty if method <code>dequeue</code> is empty.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="mi">138</span> <span class="cm">/* Register/uregister queueing discipline */</span>
</span><span class='line'> <span class="mi">139</span>
</span><span class='line'> <span class="mi">140</span> <span class="kt">int</span> <span class="n">register_qdisc</span><span class="p">(</span><span class="k">struct</span> <span class="n">Qdisc_ops</span> <span class="o">*</span><span class="n">qops</span><span class="p">)</span>
</span><span class='line'> <span class="mi">141</span> <span class="p">{</span>
</span><span class='line'> <span class="mi">142</span>         <span class="k">struct</span> <span class="n">Qdisc_ops</span> <span class="o">*</span><span class="n">q</span><span class="p">,</span> <span class="o">**</span><span class="n">qp</span><span class="p">;</span>
</span><span class='line'> <span class="mi">143</span>         <span class="kt">int</span> <span class="n">rc</span> <span class="o">=</span> <span class="o">-</span><span class="n">EEXIST</span><span class="p">;</span>
</span><span class='line'> <span class="mi">144</span>
</span><span class='line'> <span class="mi">145</span>         <span class="nf">write_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">qdisc_mod_lock</span><span class="p">);</span>
</span><span class='line'> <span class="mi">146</span>         <span class="k">for</span> <span class="p">(</span><span class="n">qp</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">qdisc_base</span><span class="p">;</span> <span class="p">(</span><span class="n">q</span> <span class="o">=</span> <span class="o">*</span><span class="n">qp</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="n">qp</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">q</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span>
</span><span class='line'> <span class="mi">147</span>                 <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">strcmp</span><span class="p">(</span><span class="n">qops</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">,</span> <span class="n">q</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">))</span>
</span><span class='line'> <span class="mi">148</span>                         <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'> <span class="mi">149</span>
</span><span class='line'> <span class="mi">150</span>         <span class="k">if</span> <span class="p">(</span><span class="n">qops</span><span class="o">-&gt;</span><span class="n">enqueue</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'> <span class="mi">151</span>                 <span class="n">qops</span><span class="o">-&gt;</span><span class="n">enqueue</span> <span class="o">=</span> <span class="n">noop_qdisc_ops</span><span class="p">.</span><span class="n">enqueue</span><span class="p">;</span>
</span><span class='line'> <span class="mi">152</span>         <span class="nf">if</span> <span class="p">(</span><span class="n">qops</span><span class="o">-&gt;</span><span class="n">peek</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'> <span class="mi">153</span>                 <span class="k">if</span> <span class="p">(</span><span class="n">qops</span><span class="o">-&gt;</span><span class="n">dequeue</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'> <span class="mi">154</span>                         <span class="n">qops</span><span class="o">-&gt;</span><span class="n">peek</span> <span class="o">=</span> <span class="n">noop_qdisc_ops</span><span class="p">.</span><span class="n">peek</span><span class="p">;</span>
</span><span class='line'> <span class="mi">155</span>                 <span class="k">else</span>
</span><span class='line'> <span class="mi">156</span>                         <span class="k">goto</span> <span class="n">out_einval</span><span class="p">;</span>
</span><span class='line'> <span class="mi">157</span>         <span class="p">}</span>
</span><span class='line'> <span class="mi">158</span>         <span class="k">if</span> <span class="p">(</span><span class="n">qops</span><span class="o">-&gt;</span><span class="n">dequeue</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'> <span class="mi">159</span>                 <span class="n">qops</span><span class="o">-&gt;</span><span class="n">dequeue</span> <span class="o">=</span> <span class="n">noop_qdisc_ops</span><span class="p">.</span><span class="n">dequeue</span><span class="p">;</span>
</span><span class='line'> <span class="mi">160</span>
</span><span class='line'> <span class="mi">161</span>         <span class="nf">if</span> <span class="p">(</span><span class="n">qops</span><span class="o">-&gt;</span><span class="n">cl_ops</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'> <span class="mi">162</span>                 <span class="k">const</span> <span class="k">struct</span> <span class="n">Qdisc_class_ops</span> <span class="o">*</span><span class="n">cops</span> <span class="o">=</span> <span class="n">qops</span><span class="o">-&gt;</span><span class="n">cl_ops</span><span class="p">;</span>
</span><span class='line'> <span class="mi">163</span>
</span><span class='line'> <span class="mi">164</span>                 <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">cops</span><span class="o">-&gt;</span><span class="n">get</span> <span class="o">&amp;&amp;</span> <span class="n">cops</span><span class="o">-&gt;</span><span class="n">put</span> <span class="o">&amp;&amp;</span> <span class="n">cops</span><span class="o">-&gt;</span><span class="n">walk</span> <span class="o">&amp;&amp;</span> <span class="n">cops</span><span class="o">-&gt;</span><span class="n">leaf</span><span class="p">))</span>
</span><span class='line'> <span class="mi">165</span>                         <span class="k">goto</span> <span class="n">out_einval</span><span class="p">;</span>
</span><span class='line'> <span class="mi">166</span>
</span><span class='line'> <span class="mi">167</span>                 <span class="k">if</span> <span class="p">(</span><span class="n">cops</span><span class="o">-&gt;</span><span class="n">tcf_chain</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">(</span><span class="n">cops</span><span class="o">-&gt;</span><span class="n">bind_tcf</span> <span class="o">&amp;&amp;</span> <span class="n">cops</span><span class="o">-&gt;</span><span class="n">unbind_tcf</span><span class="p">))</span>
</span><span class='line'> <span class="mi">168</span>                         <span class="k">goto</span> <span class="n">out_einval</span><span class="p">;</span>
</span><span class='line'> <span class="mi">169</span>         <span class="p">}</span>
</span><span class='line'> <span class="mi">170</span>
</span><span class='line'> <span class="mi">171</span>         <span class="n">qops</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'> <span class="mi">172</span>         <span class="o">*</span><span class="n">qp</span> <span class="o">=</span> <span class="n">qops</span><span class="p">;</span>
</span><span class='line'> <span class="mi">173</span>         <span class="n">rc</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'> <span class="mi">174</span> <span class="nl">out</span><span class="p">:</span>
</span><span class='line'> <span class="mi">175</span>         <span class="n">write_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">qdisc_mod_lock</span><span class="p">);</span>
</span><span class='line'> <span class="mi">176</span>         <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
</span><span class='line'> <span class="mi">177</span>
</span><span class='line'> <span class="mi">178</span> <span class="nl">out_einval</span><span class="p">:</span>
</span><span class='line'> <span class="mi">179</span>         <span class="n">rc</span> <span class="o">=</span> <span class="o">-</span><span class="n">EINVAL</span><span class="p">;</span>
</span><span class='line'> <span class="mi">180</span>         <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'> <span class="mi">181</span> <span class="p">}</span>
</span><span class='line'> <span class="mi">182</span> <span class="n">EXPORT_SYMBOL</span><span class="p">(</span><span class="n">register_qdisc</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>unregister_qdisc</code></h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="mi">184</span> <span class="kt">int</span> <span class="n">unregister_qdisc</span><span class="p">(</span><span class="k">struct</span> <span class="n">Qdisc_ops</span> <span class="o">*</span><span class="n">qops</span><span class="p">)</span>
</span><span class='line'> <span class="mi">185</span> <span class="p">{</span>
</span><span class='line'> <span class="mi">186</span>         <span class="k">struct</span> <span class="n">Qdisc_ops</span> <span class="o">*</span><span class="n">q</span><span class="p">,</span> <span class="o">**</span><span class="n">qp</span><span class="p">;</span>
</span><span class='line'> <span class="mi">187</span>         <span class="kt">int</span> <span class="n">err</span> <span class="o">=</span> <span class="o">-</span><span class="n">ENOENT</span><span class="p">;</span>
</span><span class='line'> <span class="mi">188</span>
</span><span class='line'> <span class="mi">189</span>         <span class="nf">write_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">qdisc_mod_lock</span><span class="p">);</span>
</span><span class='line'> <span class="mi">190</span>         <span class="k">for</span> <span class="p">(</span><span class="n">qp</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">qdisc_base</span><span class="p">;</span> <span class="p">(</span><span class="n">q</span> <span class="o">=</span> <span class="o">*</span><span class="n">qp</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="n">qp</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">q</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span>
</span><span class='line'> <span class="mi">191</span>                 <span class="k">if</span> <span class="p">(</span><span class="n">q</span> <span class="o">==</span> <span class="n">qops</span><span class="p">)</span>
</span><span class='line'> <span class="mi">192</span>                         <span class="k">break</span><span class="p">;</span>
</span><span class='line'> <span class="mi">193</span>         <span class="nf">if</span> <span class="p">(</span><span class="n">q</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'> <span class="mi">194</span>                 <span class="o">*</span><span class="n">qp</span> <span class="o">=</span> <span class="n">q</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'> <span class="mi">195</span>                 <span class="n">q</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'> <span class="mi">196</span>                 <span class="n">err</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'> <span class="mi">197</span>         <span class="p">}</span>
</span><span class='line'> <span class="mi">198</span>         <span class="nf">write_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">qdisc_mod_lock</span><span class="p">);</span>
</span><span class='line'> <span class="mi">199</span>         <span class="k">return</span> <span class="n">err</span><span class="p">;</span>
</span><span class='line'> <span class="mi">200</span> <span class="p">}</span>
</span><span class='line'> <span class="mi">201</span> <span class="n">EXPORT_SYMBOL</span><span class="p">(</span><span class="n">unregister_qdisc</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>all <code>Qdisc_ops</code></h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">junwei</span><span class="err">@</span><span class="nl">localhost</span><span class="p">:</span><span class="o">~/</span><span class="n">git</span><span class="o">/</span><span class="n">linux</span><span class="err">$</span> <span class="n">grep</span> <span class="n">register_qdisc</span> <span class="n">net</span><span class="o">/</span> <span class="o">-</span><span class="n">Rw</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">sched</span><span class="o">/</span><span class="n">sch_sfb</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span>    <span class="k">return</span> <span class="n">register_qdisc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sfb_qdisc_ops</span><span class="p">);</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">sched</span><span class="o">/</span><span class="n">sch_fq</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span>     <span class="n">ret</span> <span class="o">=</span> <span class="n">register_qdisc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">fq_qdisc_ops</span><span class="p">);</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">sched</span><span class="o">/</span><span class="n">sch_choke</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span>  <span class="k">return</span> <span class="n">register_qdisc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">choke_qdisc_ops</span><span class="p">);</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">sched</span><span class="o">/</span><span class="n">sch_codel</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span>  <span class="k">return</span> <span class="n">register_qdisc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">codel_qdisc_ops</span><span class="p">);</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">sched</span><span class="o">/</span><span class="n">sch_qfq</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span>    <span class="k">return</span> <span class="n">register_qdisc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">qfq_qdisc_ops</span><span class="p">);</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">sched</span><span class="o">/</span><span class="n">sch_atm</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span>    <span class="k">return</span> <span class="n">register_qdisc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">atm_qdisc_ops</span><span class="p">);</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">sched</span><span class="o">/</span><span class="n">sch_multiq</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span> <span class="k">return</span> <span class="n">register_qdisc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">multiq_qdisc_ops</span><span class="p">);</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">sched</span><span class="o">/</span><span class="n">sch_cbq</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span>    <span class="k">return</span> <span class="n">register_qdisc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cbq_qdisc_ops</span><span class="p">);</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">sched</span><span class="o">/</span><span class="n">sch_fq_codel</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span>       <span class="k">return</span> <span class="n">register_qdisc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">fq_codel_qdisc_ops</span><span class="p">);</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">sched</span><span class="o">/</span><span class="n">sch_dsmark</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span> <span class="k">return</span> <span class="n">register_qdisc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dsmark_qdisc_ops</span><span class="p">);</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">sched</span><span class="o">/</span><span class="n">sch_hfsc</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span>   <span class="k">return</span> <span class="n">register_qdisc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">hfsc_qdisc_ops</span><span class="p">);</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">sched</span><span class="o">/</span><span class="n">sch_htb</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span>    <span class="k">return</span> <span class="n">register_qdisc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">htb_qdisc_ops</span><span class="p">);</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">sched</span><span class="o">/</span><span class="n">sch_api</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span><span class="kt">int</span> <span class="n">register_qdisc</span><span class="p">(</span><span class="k">struct</span> <span class="n">Qdisc_ops</span> <span class="o">*</span><span class="n">qops</span><span class="p">)</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">sched</span><span class="o">/</span><span class="n">sch_api</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span><span class="n">EXPORT_SYMBOL</span><span class="p">(</span><span class="n">register_qdisc</span><span class="p">);</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">sched</span><span class="o">/</span><span class="n">sch_api</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span>    <span class="n">register_qdisc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pfifo_fast_ops</span><span class="p">);</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">sched</span><span class="o">/</span><span class="n">sch_api</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span>    <span class="n">register_qdisc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pfifo_qdisc_ops</span><span class="p">);</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">sched</span><span class="o">/</span><span class="n">sch_api</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span>    <span class="n">register_qdisc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">bfifo_qdisc_ops</span><span class="p">);</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">sched</span><span class="o">/</span><span class="n">sch_api</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span>    <span class="n">register_qdisc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pfifo_head_drop_qdisc_ops</span><span class="p">);</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">sched</span><span class="o">/</span><span class="n">sch_api</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span>    <span class="n">register_qdisc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mq_qdisc_ops</span><span class="p">);</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">sched</span><span class="o">/</span><span class="n">sch_blackhole</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span>      <span class="k">return</span> <span class="n">register_qdisc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">blackhole_qdisc_ops</span><span class="p">);</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">sched</span><span class="o">/</span><span class="n">sch_drr</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span>    <span class="k">return</span> <span class="n">register_qdisc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">drr_qdisc_ops</span><span class="p">);</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">sched</span><span class="o">/</span><span class="n">sch_netem</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span>  <span class="k">return</span> <span class="n">register_qdisc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">netem_qdisc_ops</span><span class="p">);</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">sched</span><span class="o">/</span><span class="n">sch_prio</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span>   <span class="k">return</span> <span class="n">register_qdisc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">prio_qdisc_ops</span><span class="p">);</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">sched</span><span class="o">/</span><span class="n">sch_gred</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span>   <span class="k">return</span> <span class="n">register_qdisc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">gred_qdisc_ops</span><span class="p">);</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">sched</span><span class="o">/</span><span class="n">sch_ingress</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span>        <span class="k">return</span> <span class="n">register_qdisc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ingress_qdisc_ops</span><span class="p">);</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">sched</span><span class="o">/</span><span class="n">sch_mqprio</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span> <span class="k">return</span> <span class="n">register_qdisc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mqprio_qdisc_ops</span><span class="p">);</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">sched</span><span class="o">/</span><span class="n">sch_sfq</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span>    <span class="k">return</span> <span class="n">register_qdisc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sfq_qdisc_ops</span><span class="p">);</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">sched</span><span class="o">/</span><span class="n">sch_tbf</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span>    <span class="k">return</span> <span class="n">register_qdisc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tbf_qdisc_ops</span><span class="p">);</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">sched</span><span class="o">/</span><span class="n">sch_red</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span>    <span class="k">return</span> <span class="n">register_qdisc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">red_qdisc_ops</span><span class="p">);</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">sched</span><span class="o">/</span><span class="n">sch_plug</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span>   <span class="k">return</span> <span class="n">register_qdisc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">plug_qdisc_ops</span><span class="p">);</span>
</span><span class='line'><span class="n">net</span><span class="o">/</span><span class="n">sched</span><span class="o">/</span><span class="n">sch_teql</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span>           <span class="n">err</span> <span class="o">=</span> <span class="n">register_qdisc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">master</span><span class="o">-&gt;</span><span class="n">qops</span><span class="p">);</span>
</span><span class='line'><span class="n">junwei</span><span class="err">@</span><span class="nl">localhost</span><span class="p">:</span><span class="o">~/</span><span class="n">git</span><span class="o">/</span><span class="n">linux</span><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Remember Ip/tcp/udp Header]]></title>
    <link href="http://martinbj2008.github.io/blog/2014/01/27/how-to-remember-ip-slash-tcp-slash-udp-header/"/>
    <updated>2014-01-27T14:25:00+08:00</updated>
    <id>http://martinbj2008.github.io/blog/2014/01/27/how-to-remember-ip-slash-tcp-slash-udp-header</id>
    <content type="html"><![CDATA[<h3>IP HEADER</h3>

<p>以前找工作时，常被问到IP头都有哪些字段？
现在觉得真的理解了记起来没那么难。</p>

<p>上路时总要记得终点和起点(src/dst ip),
要倒几次车，大体也知道（ttl).</p>

<p>路有大路有小路，有高速路和土路。
大路到小路要分片，小路到大路可能重组。
上高速路需要通行证（qos/tos).</p>

<p>路上有警察，查你是不是非法(csum, header len, ip option)，
查你装的什么货(protocol)？</p>

<!-- more -->


<ol>
<li>路由：要做路由，IP地址是必须的, 如何防止循环链路？
  源/目的IP地址，ttl</li>
<li>分片与重组：ID, 总长度，片的偏移，标志位,
 ID, total length, offset, E/D/M flags</li>
<li>QOS:  TOS</li>
<li>校验：checksum</li>
<li>上层协议：proto
<img src="http://martinbj2008.github.io/images/net/ip.header.png" alt="case 1" />

<h3>TCP HEADER</h3>

<img src="http://martinbj2008.github.io/images/net/tcp.header.png" alt="case 1" />

<h3>UDP HEADER</h3>

<img src="http://martinbj2008.github.io/images/net/udp.header.png" alt="case 1" />

<h3>ICMP HEADER</h3>

<p><img src="http://martinbj2008.github.io/images/net/icmp.header.png" alt="case 1" /></p></li>
</ol>


<p>NOTE: all the pictures are &lsquo;stolen&rsquo; from
<code>http://nmap.org/book/tcpip-ref.html</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Tcp Server Accept a New Connection Request]]></title>
    <link href="http://martinbj2008.github.io/blog/2014/01/14/how-tcp-server-accept-a-new-connection-request/"/>
    <updated>2014-01-14T16:01:00+08:00</updated>
    <id>http://martinbj2008.github.io/blog/2014/01/14/how-tcp-server-accept-a-new-connection-request</id>
    <content type="html"><![CDATA[<p>Two packets will be proessed by tcp server side:
1. SYN
2. ACK</p>

<p>For the first packet(syn) of handshake, it first lookup the listen socket,
and create a req socket as temporary.</p>

<p>For the third packet(ack) of handshake, it will match the req socket created
in previous steps.</p>

<!-- more -->


<p>SYN:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">==</span> <span class="n">tcp_v4_rcv</span><span class="p">(</span><span class="k">struct</span> <span class="n">sk_buff</span> <span class="o">*</span><span class="n">skb</span><span class="p">)</span>
</span><span class='line'><span class="o">==</span> <span class="o">==</span>  <span class="n">sk</span> <span class="o">=</span> <span class="n">__inet_lookup_skb</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tcp_hashinfo</span><span class="p">,</span> <span class="n">skb</span><span class="p">,</span> <span class="n">th</span><span class="o">-&gt;</span><span class="n">source</span><span class="p">,</span> <span class="n">th</span><span class="o">-&gt;</span><span class="n">dest</span><span class="p">);</span>
</span><span class='line'><span class="o">==</span> <span class="o">==</span>  <span class="n">tcp_v4_do_rcv</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="n">skb</span><span class="p">);</span>
</span><span class='line'><span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="k">struct</span> <span class="n">sock</span> <span class="o">*</span><span class="n">nsk</span> <span class="o">=</span> <span class="n">tcp_v4_hnd_req</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="n">skb</span><span class="p">)</span>
</span><span class='line'><span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="n">tcp_rcv_state_process</span>
</span><span class='line'><span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="k">if</span> <span class="p">(</span><span class="n">icsk</span><span class="o">-&gt;</span><span class="n">icsk_af_ops</span><span class="o">-&gt;</span><span class="n">conn_request</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="n">skb</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="nl">tcp_v4_conn_request</span><span class="p">:</span> <span class="n">icsk</span><span class="o">-&gt;</span><span class="n">icsk_af_ops</span><span class="o">-&gt;</span><span class="n">conn_request</span>
</span><span class='line'><span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="n">inet_reqsk_alloc</span>
</span><span class='line'><span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="n">tcp_openreq_init</span><span class="p">(</span><span class="n">req</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tmp_opt</span><span class="p">,</span> <span class="n">skb</span><span class="p">);</span>
</span><span class='line'><span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="n">inet_csk_reqsk_queue_hash_add</span>
</span><span class='line'><span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="n">reqsk_queue_hash_req</span>
</span><span class='line'><span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="n">inet_csk_reqsk_queue_added</span>
</span></code></pre></td></tr></table></div></figure>


<p>ACK:</p>

<h3><code>tcp_rcv_state_process</code> use a child socket, not the listen socket.</h3>

<p>The new socket state is <code>TCP_SYN_RECV</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">==</span> <span class="n">tcp_v4_rcv</span><span class="p">(</span><span class="k">struct</span> <span class="n">sk_buff</span> <span class="o">*</span><span class="n">skb</span><span class="p">)</span>
</span><span class='line'><span class="o">==</span> <span class="o">==</span>  <span class="n">sk</span> <span class="o">=</span> <span class="n">__inet_lookup_skb</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tcp_hashinfo</span><span class="p">,</span> <span class="n">skb</span><span class="p">,</span> <span class="n">th</span><span class="o">-&gt;</span><span class="n">source</span><span class="p">,</span> <span class="n">th</span><span class="o">-&gt;</span><span class="n">dest</span><span class="p">);</span>
</span><span class='line'><span class="o">==</span> <span class="o">==</span> <span class="n">tcp_v4_do_rcv</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="n">skb</span><span class="p">);</span>
</span><span class='line'><span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="n">nsk</span> <span class="o">=</span> <span class="n">tcp_v4_hnd_req</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="n">skb</span><span class="p">)</span>
</span><span class='line'><span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="n">inet_csk_search_req</span>
</span><span class='line'><span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="n">tcp_check_req</span>
</span><span class='line'><span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="n">child</span> <span class="o">=</span> <span class="n">inet_csk</span><span class="p">(</span><span class="n">sk</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">icsk_af_ops</span><span class="o">-&gt;</span><span class="n">syn_recv_sock</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="n">skb</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="n">inet_csk_reqsk_queue_unlink</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="n">prev</span><span class="p">);</span>
</span><span class='line'><span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="n">inet_csk_reqsk_queue_removed</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="n">req</span><span class="p">);</span>
</span><span class='line'><span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="n">inet_csk_reqsk_queue_add</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="n">child</span><span class="p">);</span>
</span><span class='line'><span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="n">tcp_child_process</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="n">nsk</span><span class="p">,</span> <span class="n">skb</span><span class="p">)</span>
</span><span class='line'><span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="o">==</span>  <span class="n">tcp_rcv_state_process</span><span class="p">(</span><span class="n">child</span><span class="p">,</span> <span class="n">skb</span><span class="p">,</span> <span class="n">tcp_hdr</span><span class="p">(</span><span class="n">skb</span><span class="p">),...</span><span class="n">i</span>
</span><span class='line'><span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="o">==</span> <span class="nl">TCP_SYN_RECV</span><span class="p">:</span> <span class="n">tcp_rcv_synsent_state_process</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>tcp_v4_rcv</code></h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">1936</span> <span class="kt">int</span> <span class="n">tcp_v4_rcv</span><span class="p">(</span><span class="k">struct</span> <span class="n">sk_buff</span> <span class="o">*</span><span class="n">skb</span><span class="p">)</span>
</span><span class='line'><span class="mi">1937</span> <span class="p">{</span>
</span><span class='line'><span class="mi">1938</span>         <span class="k">const</span> <span class="k">struct</span> <span class="n">iphdr</span> <span class="o">*</span><span class="n">iph</span><span class="p">;</span>
</span><span class='line'><span class="mi">1939</span>         <span class="k">const</span> <span class="k">struct</span> <span class="n">tcphdr</span> <span class="o">*</span><span class="n">th</span><span class="p">;</span>
</span><span class='line'><span class="mi">1940</span>         <span class="k">struct</span> <span class="n">sock</span> <span class="o">*</span><span class="n">sk</span><span class="p">;</span>
</span><span class='line'><span class="mi">1941</span>         <span class="kt">int</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'><span class="mi">1942</span>         <span class="k">struct</span> <span class="n">net</span> <span class="o">*</span><span class="n">net</span> <span class="o">=</span> <span class="n">dev_net</span><span class="p">(</span><span class="n">skb</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">);</span>
</span><span class='line'><span class="mi">1943</span>
</span><span class='line'><span class="mi">1944</span>         <span class="k">if</span> <span class="p">(</span><span class="n">skb</span><span class="o">-&gt;</span><span class="n">pkt_type</span> <span class="o">!=</span> <span class="n">PACKET_HOST</span><span class="p">)</span>
</span><span class='line'><span class="mi">1945</span>                 <span class="k">goto</span> <span class="n">discard_it</span><span class="p">;</span>
</span><span class='line'><span class="mi">1946</span>
</span><span class='line'><span class="mi">1947</span>         <span class="cm">/* Count it even if it&#39;s bad */</span>
</span><span class='line'><span class="mi">1948</span>         <span class="n">TCP_INC_STATS_BH</span><span class="p">(</span><span class="n">net</span><span class="p">,</span> <span class="n">TCP_MIB_INSEGS</span><span class="p">);</span>
</span><span class='line'><span class="mi">1949</span>
</span><span class='line'><span class="mi">1950</span>         <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">pskb_may_pull</span><span class="p">(</span><span class="n">skb</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">tcphdr</span><span class="p">)))</span>
</span><span class='line'><span class="mi">1951</span>                 <span class="k">goto</span> <span class="n">discard_it</span><span class="p">;</span>
</span><span class='line'><span class="mi">1952</span>
</span><span class='line'><span class="mi">1953</span>         <span class="n">th</span> <span class="o">=</span> <span class="n">tcp_hdr</span><span class="p">(</span><span class="n">skb</span><span class="p">);</span>
</span><span class='line'><span class="mi">1954</span>
</span><span class='line'><span class="mi">1955</span>         <span class="k">if</span> <span class="p">(</span><span class="n">th</span><span class="o">-&gt;</span><span class="n">doff</span> <span class="o">&lt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">tcphdr</span><span class="p">)</span> <span class="o">/</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="mi">1956</span>                 <span class="k">goto</span> <span class="n">bad_packet</span><span class="p">;</span>
</span><span class='line'><span class="mi">1957</span>         <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">pskb_may_pull</span><span class="p">(</span><span class="n">skb</span><span class="p">,</span> <span class="n">th</span><span class="o">-&gt;</span><span class="n">doff</span> <span class="o">*</span> <span class="mi">4</span><span class="p">))</span>
</span><span class='line'><span class="mi">1958</span>                 <span class="k">goto</span> <span class="n">discard_it</span><span class="p">;</span>
</span><span class='line'><span class="mi">1959</span>
</span><span class='line'><span class="mi">1960</span>         <span class="cm">/* An explanation is required here, I think.</span>
</span><span class='line'><span class="cm">1961          * Packet length and doff are validated by header prediction,</span>
</span><span class='line'><span class="cm">1962          * provided case of th-&gt;doff==0 is eliminated.</span>
</span><span class='line'><span class="cm">1963          * So, we defer the checks. */</span>
</span><span class='line'><span class="mi">1964</span>         <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">skb_csum_unnecessary</span><span class="p">(</span><span class="n">skb</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">tcp_v4_checksum_init</span><span class="p">(</span><span class="n">skb</span><span class="p">))</span>
</span><span class='line'><span class="mi">1965</span>                 <span class="k">goto</span> <span class="n">csum_error</span><span class="p">;</span>
</span><span class='line'><span class="mi">1966</span>
</span><span class='line'><span class="mi">1967</span>         <span class="n">th</span> <span class="o">=</span> <span class="n">tcp_hdr</span><span class="p">(</span><span class="n">skb</span><span class="p">);</span>
</span><span class='line'><span class="mi">1968</span>         <span class="n">iph</span> <span class="o">=</span> <span class="n">ip_hdr</span><span class="p">(</span><span class="n">skb</span><span class="p">);</span>
</span><span class='line'><span class="mi">1969</span>         <span class="nf">TCP_SKB_CB</span><span class="p">(</span><span class="n">skb</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">seq</span> <span class="o">=</span> <span class="n">ntohl</span><span class="p">(</span><span class="n">th</span><span class="o">-&gt;</span><span class="n">seq</span><span class="p">);</span>
</span><span class='line'><span class="mi">1970</span>         <span class="nf">TCP_SKB_CB</span><span class="p">(</span><span class="n">skb</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">end_seq</span> <span class="o">=</span> <span class="p">(</span><span class="n">TCP_SKB_CB</span><span class="p">(</span><span class="n">skb</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">seq</span> <span class="o">+</span> <span class="n">th</span><span class="o">-&gt;</span><span class="n">syn</span> <span class="o">+</span> <span class="n">th</span><span class="o">-&gt;</span><span class="n">fin</span> <span class="o">+</span>
</span><span class='line'><span class="mi">1971</span>                                     <span class="n">skb</span><span class="o">-&gt;</span><span class="n">len</span> <span class="o">-</span> <span class="n">th</span><span class="o">-&gt;</span><span class="n">doff</span> <span class="o">*</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'><span class="mi">1972</span>         <span class="nf">TCP_SKB_CB</span><span class="p">(</span><span class="n">skb</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">ack_seq</span> <span class="o">=</span> <span class="n">ntohl</span><span class="p">(</span><span class="n">th</span><span class="o">-&gt;</span><span class="n">ack_seq</span><span class="p">);</span>
</span><span class='line'><span class="mi">1973</span>         <span class="n">TCP_SKB_CB</span><span class="p">(</span><span class="n">skb</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">when</span>    <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="mi">1974</span>         <span class="nf">TCP_SKB_CB</span><span class="p">(</span><span class="n">skb</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">ip_dsfield</span> <span class="o">=</span> <span class="n">ipv4_get_dsfield</span><span class="p">(</span><span class="n">iph</span><span class="p">);</span>
</span><span class='line'><span class="mi">1975</span>         <span class="n">TCP_SKB_CB</span><span class="p">(</span><span class="n">skb</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">sacked</span>  <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="mi">1976</span>
</span><span class='line'><span class="mi">1977</span>         <span class="n">sk</span> <span class="o">=</span> <span class="n">__inet_lookup_skb</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tcp_hashinfo</span><span class="p">,</span> <span class="n">skb</span><span class="p">,</span> <span class="n">th</span><span class="o">-&gt;</span><span class="n">source</span><span class="p">,</span> <span class="n">th</span><span class="o">-&gt;</span><span class="n">dest</span><span class="p">);</span>
</span><span class='line'><span class="mi">1978</span>         <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">sk</span><span class="p">)</span>
</span><span class='line'><span class="mi">1979</span>                 <span class="k">goto</span> <span class="n">no_tcp_socket</span><span class="p">;</span>
</span><span class='line'><span class="mi">1980</span>
</span><span class='line'><span class="mi">1981</span> <span class="nl">process</span><span class="p">:</span>
</span><span class='line'><span class="mi">1982</span>         <span class="k">if</span> <span class="p">(</span><span class="n">sk</span><span class="o">-&gt;</span><span class="n">sk_state</span> <span class="o">==</span> <span class="n">TCP_TIME_WAIT</span><span class="p">)</span>
</span><span class='line'><span class="mi">1983</span>                 <span class="k">goto</span> <span class="n">do_time_wait</span><span class="p">;</span>
</span><span class='line'><span class="mi">1984</span>
</span><span class='line'><span class="mi">1985</span>         <span class="nf">if</span> <span class="p">(</span><span class="n">unlikely</span><span class="p">(</span><span class="n">iph</span><span class="o">-&gt;</span><span class="n">ttl</span> <span class="o">&lt;</span> <span class="n">inet_sk</span><span class="p">(</span><span class="n">sk</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">min_ttl</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'><span class="mi">1986</span>                 <span class="n">NET_INC_STATS_BH</span><span class="p">(</span><span class="n">net</span><span class="p">,</span> <span class="n">LINUX_MIB_TCPMINTTLDROP</span><span class="p">);</span>
</span><span class='line'><span class="mi">1987</span>                 <span class="k">goto</span> <span class="n">discard_and_relse</span><span class="p">;</span>
</span><span class='line'><span class="mi">1988</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">1989</span>
</span><span class='line'><span class="mi">1990</span>         <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">xfrm4_policy_check</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="n">XFRM_POLICY_IN</span><span class="p">,</span> <span class="n">skb</span><span class="p">))</span>
</span><span class='line'><span class="mi">1991</span>                 <span class="k">goto</span> <span class="n">discard_and_relse</span><span class="p">;</span>
</span><span class='line'><span class="mi">1992</span>         <span class="nf">nf_reset</span><span class="p">(</span><span class="n">skb</span><span class="p">);</span>
</span><span class='line'><span class="mi">1993</span>
</span><span class='line'><span class="mi">1994</span>         <span class="k">if</span> <span class="p">(</span><span class="n">sk_filter</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="n">skb</span><span class="p">))</span>
</span><span class='line'><span class="mi">1995</span>                 <span class="k">goto</span> <span class="n">discard_and_relse</span><span class="p">;</span>
</span><span class='line'><span class="mi">1996</span>
</span><span class='line'><span class="mi">1997</span>         <span class="nf">sk_mark_napi_id</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="n">skb</span><span class="p">);</span>
</span><span class='line'><span class="mi">1998</span>         <span class="n">skb</span><span class="o">-&gt;</span><span class="n">dev</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="mi">1999</span>
</span><span class='line'><span class="mi">2000</span>         <span class="nf">bh_lock_sock_nested</span><span class="p">(</span><span class="n">sk</span><span class="p">);</span>
</span><span class='line'><span class="mi">2001</span>         <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="mi">2002</span>         <span class="nf">if</span> <span class="p">(</span><span class="o">!</span><span class="n">sock_owned_by_user</span><span class="p">(</span><span class="n">sk</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'><span class="mi">2003</span> <span class="err">#</span><span class="n">ifdef</span> <span class="n">CONFIG_NET_DMA</span>
</span><span class='line'><span class="mi">2004</span>                 <span class="k">struct</span> <span class="n">tcp_sock</span> <span class="o">*</span><span class="n">tp</span> <span class="o">=</span> <span class="n">tcp_sk</span><span class="p">(</span><span class="n">sk</span><span class="p">);</span>
</span><span class='line'><span class="mi">2005</span>                 <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">tp</span><span class="o">-&gt;</span><span class="n">ucopy</span><span class="p">.</span><span class="n">dma_chan</span> <span class="o">&amp;&amp;</span> <span class="n">tp</span><span class="o">-&gt;</span><span class="n">ucopy</span><span class="p">.</span><span class="n">pinned_list</span><span class="p">)</span>
</span><span class='line'><span class="mi">2006</span>                         <span class="n">tp</span><span class="o">-&gt;</span><span class="n">ucopy</span><span class="p">.</span><span class="n">dma_chan</span> <span class="o">=</span> <span class="n">net_dma_find_channel</span><span class="p">();</span>
</span><span class='line'><span class="mi">2007</span>                 <span class="k">if</span> <span class="p">(</span><span class="n">tp</span><span class="o">-&gt;</span><span class="n">ucopy</span><span class="p">.</span><span class="n">dma_chan</span><span class="p">)</span>
</span><span class='line'><span class="mi">2008</span>                         <span class="n">ret</span> <span class="o">=</span> <span class="n">tcp_v4_do_rcv</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="n">skb</span><span class="p">);</span>
</span><span class='line'><span class="mi">2009</span>                 <span class="k">else</span>
</span><span class='line'><span class="mi">2010</span> <span class="err">#</span><span class="n">endif</span>
</span><span class='line'><span class="mi">2011</span>                 <span class="p">{</span>
</span><span class='line'><span class="mi">2012</span>                         <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">tcp_prequeue</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="n">skb</span><span class="p">))</span>
</span><span class='line'><span class="mi">2013</span>                                 <span class="n">ret</span> <span class="o">=</span> <span class="n">tcp_v4_do_rcv</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="n">skb</span><span class="p">);</span>
</span><span class='line'><span class="mi">2014</span>                 <span class="p">}</span>
</span><span class='line'><span class="mi">2015</span>         <span class="p">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">unlikely</span><span class="p">(</span><span class="n">sk_add_backlog</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="n">skb</span><span class="p">,</span>
</span><span class='line'><span class="mi">2016</span>                                            <span class="n">sk</span><span class="o">-&gt;</span><span class="n">sk_rcvbuf</span> <span class="o">+</span> <span class="n">sk</span><span class="o">-&gt;</span><span class="n">sk_sndbuf</span><span class="p">)))</span> <span class="p">{</span>
</span><span class='line'><span class="mi">2017</span>                 <span class="n">bh_unlock_sock</span><span class="p">(</span><span class="n">sk</span><span class="p">);</span>
</span><span class='line'><span class="mi">2018</span>                 <span class="n">NET_INC_STATS_BH</span><span class="p">(</span><span class="n">net</span><span class="p">,</span> <span class="n">LINUX_MIB_TCPBACKLOGDROP</span><span class="p">);</span>
</span><span class='line'><span class="mi">2019</span>                 <span class="k">goto</span> <span class="n">discard_and_relse</span><span class="p">;</span>
</span><span class='line'><span class="mi">2020</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">2021</span>         <span class="nf">bh_unlock_sock</span><span class="p">(</span><span class="n">sk</span><span class="p">);</span>
</span><span class='line'><span class="mi">2022</span>
</span><span class='line'><span class="mi">2023</span>         <span class="nf">sock_put</span><span class="p">(</span><span class="n">sk</span><span class="p">);</span>
</span><span class='line'><span class="mi">2024</span>
</span><span class='line'><span class="mi">2025</span>         <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'><span class="mi">2026</span>
</span><span class='line'><span class="mi">2027</span> <span class="nl">no_tcp_socket</span><span class="p">:</span>
</span><span class='line'><span class="mi">2028</span>         <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">xfrm4_policy_check</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">XFRM_POLICY_IN</span><span class="p">,</span> <span class="n">skb</span><span class="p">))</span>
</span><span class='line'><span class="mi">2029</span>                 <span class="k">goto</span> <span class="n">discard_it</span><span class="p">;</span>
</span><span class='line'><span class="mi">2030</span>
</span><span class='line'><span class="mi">2031</span>         <span class="nf">if</span> <span class="p">(</span><span class="n">skb</span><span class="o">-&gt;</span><span class="n">len</span> <span class="o">&lt;</span> <span class="p">(</span><span class="n">th</span><span class="o">-&gt;</span><span class="n">doff</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="o">||</span> <span class="n">tcp_checksum_complete</span><span class="p">(</span><span class="n">skb</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'><span class="mi">2032</span> <span class="nl">csum_error</span><span class="p">:</span>
</span><span class='line'><span class="mi">2033</span>                 <span class="n">TCP_INC_STATS_BH</span><span class="p">(</span><span class="n">net</span><span class="p">,</span> <span class="n">TCP_MIB_CSUMERRORS</span><span class="p">);</span>
</span><span class='line'><span class="mi">2034</span> <span class="nl">bad_packet</span><span class="p">:</span>
</span><span class='line'><span class="mi">2035</span>                 <span class="n">TCP_INC_STATS_BH</span><span class="p">(</span><span class="n">net</span><span class="p">,</span> <span class="n">TCP_MIB_INERRS</span><span class="p">);</span>
</span><span class='line'><span class="mi">2036</span>         <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'><span class="mi">2037</span>                 <span class="n">tcp_v4_send_reset</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">skb</span><span class="p">);</span>
</span><span class='line'><span class="mi">2038</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">2039</span>
</span><span class='line'><span class="mi">2040</span> <span class="nl">discard_it</span><span class="p">:</span>
</span><span class='line'><span class="mi">2041</span>         <span class="cm">/* Discard frame. */</span>
</span><span class='line'><span class="mi">2042</span>         <span class="n">kfree_skb</span><span class="p">(</span><span class="n">skb</span><span class="p">);</span>
</span><span class='line'><span class="mi">2043</span>         <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="mi">2044</span>
</span><span class='line'><span class="mi">2045</span> <span class="nl">discard_and_relse</span><span class="p">:</span>
</span><span class='line'><span class="mi">2046</span>         <span class="n">sock_put</span><span class="p">(</span><span class="n">sk</span><span class="p">);</span>
</span><span class='line'><span class="mi">2047</span>         <span class="k">goto</span> <span class="n">discard_it</span><span class="p">;</span>
</span><span class='line'><span class="mi">2048</span>
</span><span class='line'><span class="mi">2049</span> <span class="nl">do_time_wait</span><span class="p">:</span>
</span><span class='line'><span class="mi">2050</span>         <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">xfrm4_policy_check</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">XFRM_POLICY_IN</span><span class="p">,</span> <span class="n">skb</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'><span class="mi">2051</span>                 <span class="n">inet_twsk_put</span><span class="p">(</span><span class="n">inet_twsk</span><span class="p">(</span><span class="n">sk</span><span class="p">));</span>
</span><span class='line'><span class="mi">2052</span>                 <span class="k">goto</span> <span class="n">discard_it</span><span class="p">;</span>
</span><span class='line'><span class="mi">2053</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">2054</span>
</span><span class='line'><span class="mi">2055</span>         <span class="k">if</span> <span class="p">(</span><span class="n">skb</span><span class="o">-&gt;</span><span class="n">len</span> <span class="o">&lt;</span> <span class="p">(</span><span class="n">th</span><span class="o">-&gt;</span><span class="n">doff</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'><span class="mi">2056</span>                 <span class="n">inet_twsk_put</span><span class="p">(</span><span class="n">inet_twsk</span><span class="p">(</span><span class="n">sk</span><span class="p">));</span>
</span><span class='line'><span class="mi">2057</span>                 <span class="k">goto</span> <span class="n">bad_packet</span><span class="p">;</span>
</span><span class='line'><span class="mi">2058</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">2059</span>         <span class="k">if</span> <span class="p">(</span><span class="n">tcp_checksum_complete</span><span class="p">(</span><span class="n">skb</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'><span class="mi">2060</span>                 <span class="n">inet_twsk_put</span><span class="p">(</span><span class="n">inet_twsk</span><span class="p">(</span><span class="n">sk</span><span class="p">));</span>
</span><span class='line'><span class="mi">2061</span>                 <span class="k">goto</span> <span class="n">csum_error</span><span class="p">;</span>
</span><span class='line'><span class="mi">2062</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">2063</span>         <span class="k">switch</span> <span class="p">(</span><span class="n">tcp_timewait_state_process</span><span class="p">(</span><span class="n">inet_twsk</span><span class="p">(</span><span class="n">sk</span><span class="p">),</span> <span class="n">skb</span><span class="p">,</span> <span class="n">th</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'><span class="mi">2064</span>         <span class="k">case</span> <span class="nl">TCP_TW_SYN</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'><span class="mi">2065</span>                 <span class="k">struct</span> <span class="n">sock</span> <span class="o">*</span><span class="n">sk2</span> <span class="o">=</span> <span class="n">inet_lookup_listener</span><span class="p">(</span><span class="n">dev_net</span><span class="p">(</span><span class="n">skb</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">),</span>
</span><span class='line'><span class="mi">2066</span>                                                         <span class="o">&amp;</span><span class="n">tcp_hashinfo</span><span class="p">,</span>
</span><span class='line'><span class="mi">2067</span>                                                         <span class="n">iph</span><span class="o">-&gt;</span><span class="n">saddr</span><span class="p">,</span> <span class="n">th</span><span class="o">-&gt;</span><span class="n">source</span><span class="p">,</span>
</span><span class='line'><span class="mi">2068</span>                                                         <span class="n">iph</span><span class="o">-&gt;</span><span class="n">daddr</span><span class="p">,</span> <span class="n">th</span><span class="o">-&gt;</span><span class="n">dest</span><span class="p">,</span>
</span><span class='line'><span class="mi">2069</span>                                                         <span class="n">inet_iif</span><span class="p">(</span><span class="n">skb</span><span class="p">));</span>
</span><span class='line'><span class="mi">2070</span>                 <span class="nf">if</span> <span class="p">(</span><span class="n">sk2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="mi">2071</span>                         <span class="n">inet_twsk_deschedule</span><span class="p">(</span><span class="n">inet_twsk</span><span class="p">(</span><span class="n">sk</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">tcp_death_row</span><span class="p">);</span>
</span><span class='line'><span class="mi">2072</span>                         <span class="n">inet_twsk_put</span><span class="p">(</span><span class="n">inet_twsk</span><span class="p">(</span><span class="n">sk</span><span class="p">));</span>
</span><span class='line'><span class="mi">2073</span>                         <span class="n">sk</span> <span class="o">=</span> <span class="n">sk2</span><span class="p">;</span>
</span><span class='line'><span class="mi">2074</span>                         <span class="k">goto</span> <span class="n">process</span><span class="p">;</span>
</span><span class='line'><span class="mi">2075</span>                 <span class="p">}</span>
</span><span class='line'><span class="mi">2076</span>                 <span class="cm">/* Fall through to ACK */</span>
</span><span class='line'><span class="mi">2077</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">2078</span>         <span class="k">case</span> <span class="nl">TCP_TW_ACK</span><span class="p">:</span>
</span><span class='line'><span class="mi">2079</span>                 <span class="n">tcp_v4_timewait_ack</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="n">skb</span><span class="p">);</span>
</span><span class='line'><span class="mi">2080</span>                 <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="mi">2081</span>         <span class="k">case</span> <span class="nl">TCP_TW_RST</span><span class="p">:</span>
</span><span class='line'><span class="mi">2082</span>                 <span class="k">goto</span> <span class="n">no_tcp_socket</span><span class="p">;</span>
</span><span class='line'><span class="mi">2083</span>         <span class="k">case</span> <span class="nl">TCP_TW_SUCCESS</span><span class="p">:;</span>
</span><span class='line'><span class="mi">2084</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">2085</span>         <span class="k">goto</span> <span class="n">discard_it</span><span class="p">;</span>
</span><span class='line'><span class="mi">2086</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>tcp_v4_do_rcv</code></h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">1778</span> <span class="kt">int</span> <span class="n">tcp_v4_do_rcv</span><span class="p">(</span><span class="k">struct</span> <span class="n">sock</span> <span class="o">*</span><span class="n">sk</span><span class="p">,</span> <span class="k">struct</span> <span class="n">sk_buff</span> <span class="o">*</span><span class="n">skb</span><span class="p">)</span>
</span><span class='line'><span class="mi">1779</span> <span class="p">{</span>
</span><span class='line'><span class="mi">1780</span>         <span class="k">struct</span> <span class="n">sock</span> <span class="o">*</span><span class="n">rsk</span><span class="p">;</span>
</span><span class='line'><span class="mi">1781</span> <span class="err">#</span><span class="n">ifdef</span> <span class="n">CONFIG_TCP_MD5SIG</span>
</span><span class='line'><span class="mi">1782</span>         <span class="cm">/*</span>
</span><span class='line'><span class="cm">1783          * We really want to reject the packet as early as possible</span>
</span><span class='line'><span class="cm">1784          * if:</span>
</span><span class='line'><span class="cm">1785          *  o We&#39;re expecting an MD5&#39;d packet and this is no MD5 tcp option</span>
</span><span class='line'><span class="cm">1786          *  o There is an MD5 option and we&#39;re not expecting one</span>
</span><span class='line'><span class="cm">1787          */</span>
</span><span class='line'><span class="mi">1788</span>         <span class="k">if</span> <span class="p">(</span><span class="n">tcp_v4_inbound_md5_hash</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="n">skb</span><span class="p">))</span>
</span><span class='line'><span class="mi">1789</span>                 <span class="k">goto</span> <span class="n">discard</span><span class="p">;</span>
</span><span class='line'><span class="mi">1790</span> <span class="err">#</span><span class="n">endif</span>
</span><span class='line'><span class="mi">1791</span>
</span><span class='line'><span class="mi">1792</span>         <span class="k">if</span> <span class="p">(</span><span class="n">sk</span><span class="o">-&gt;</span><span class="n">sk_state</span> <span class="o">==</span> <span class="n">TCP_ESTABLISHED</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* Fast path */</span>
</span><span class='line'><span class="mi">1793</span>                 <span class="k">struct</span> <span class="n">dst_entry</span> <span class="o">*</span><span class="n">dst</span> <span class="o">=</span> <span class="n">sk</span><span class="o">-&gt;</span><span class="n">sk_rx_dst</span><span class="p">;</span>
</span><span class='line'><span class="mi">1794</span>
</span><span class='line'><span class="mi">1795</span>                 <span class="nf">sock_rps_save_rxhash</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="n">skb</span><span class="p">);</span>
</span><span class='line'><span class="mi">1796</span>                 <span class="nf">if</span> <span class="p">(</span><span class="n">dst</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="mi">1797</span>                         <span class="k">if</span> <span class="p">(</span><span class="n">inet_sk</span><span class="p">(</span><span class="n">sk</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">rx_dst_ifindex</span> <span class="o">!=</span> <span class="n">skb</span><span class="o">-&gt;</span><span class="n">skb_iif</span> <span class="o">||</span>
</span><span class='line'><span class="mi">1798</span>                             <span class="n">dst</span><span class="o">-&gt;</span><span class="n">ops</span><span class="o">-&gt;</span><span class="n">check</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="mi">1799</span>                                 <span class="n">dst_release</span><span class="p">(</span><span class="n">dst</span><span class="p">);</span>
</span><span class='line'><span class="mi">1800</span>                                 <span class="n">sk</span><span class="o">-&gt;</span><span class="n">sk_rx_dst</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="mi">1801</span>                         <span class="p">}</span>
</span><span class='line'><span class="mi">1802</span>                 <span class="p">}</span>
</span><span class='line'><span class="mi">1803</span>                 <span class="nf">tcp_rcv_established</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="n">skb</span><span class="p">,</span> <span class="n">tcp_hdr</span><span class="p">(</span><span class="n">skb</span><span class="p">),</span> <span class="n">skb</span><span class="o">-&gt;</span><span class="n">len</span><span class="p">);</span>
</span><span class='line'><span class="mi">1804</span>                 <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="mi">1805</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">1806</span>
</span><span class='line'><span class="mi">1807</span>         <span class="k">if</span> <span class="p">(</span><span class="n">skb</span><span class="o">-&gt;</span><span class="n">len</span> <span class="o">&lt;</span> <span class="n">tcp_hdrlen</span><span class="p">(</span><span class="n">skb</span><span class="p">)</span> <span class="o">||</span> <span class="n">tcp_checksum_complete</span><span class="p">(</span><span class="n">skb</span><span class="p">))</span>
</span><span class='line'><span class="mi">1808</span>                 <span class="k">goto</span> <span class="n">csum_err</span><span class="p">;</span>
</span><span class='line'><span class="mi">1809</span>
</span><span class='line'><span class="mi">1810</span>         <span class="nf">if</span> <span class="p">(</span><span class="n">sk</span><span class="o">-&gt;</span><span class="n">sk_state</span> <span class="o">==</span> <span class="n">TCP_LISTEN</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="mi">1809</span>
</span><span class='line'><span class="mi">1810</span>         <span class="k">if</span> <span class="p">(</span><span class="n">sk</span><span class="o">-&gt;</span><span class="n">sk_state</span> <span class="o">==</span> <span class="n">TCP_LISTEN</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="mi">1811</span>                 <span class="k">struct</span> <span class="n">sock</span> <span class="o">*</span><span class="n">nsk</span> <span class="o">=</span> <span class="n">tcp_v4_hnd_req</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="n">skb</span><span class="p">);</span>
</span><span class='line'><span class="mi">1812</span>                 <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">nsk</span><span class="p">)</span>
</span><span class='line'><span class="mi">1813</span>                         <span class="k">goto</span> <span class="n">discard</span><span class="p">;</span>
</span><span class='line'><span class="mi">1814</span>
</span><span class='line'><span class="mi">1815</span>                 <span class="k">if</span> <span class="p">(</span><span class="n">nsk</span> <span class="o">!=</span> <span class="n">sk</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="mi">1816</span>                         <span class="n">sock_rps_save_rxhash</span><span class="p">(</span><span class="n">nsk</span><span class="p">,</span> <span class="n">skb</span><span class="p">);</span>
</span><span class='line'><span class="mi">1817</span>                         <span class="k">if</span> <span class="p">(</span><span class="n">tcp_child_process</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="n">nsk</span><span class="p">,</span> <span class="n">skb</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'><span class="mi">1818</span>                                 <span class="n">rsk</span> <span class="o">=</span> <span class="n">nsk</span><span class="p">;</span>
</span><span class='line'><span class="mi">1819</span>                                 <span class="k">goto</span> <span class="n">reset</span><span class="p">;</span>
</span><span class='line'><span class="mi">1820</span>                         <span class="p">}</span>
</span><span class='line'><span class="mi">1821</span>                         <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="mi">1822</span>                 <span class="p">}</span>
</span><span class='line'><span class="mi">1823</span>         <span class="p">}</span> <span class="k">else</span>
</span><span class='line'><span class="mi">1824</span>                 <span class="n">sock_rps_save_rxhash</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="n">skb</span><span class="p">);</span>
</span><span class='line'><span class="mi">1825</span>
</span><span class='line'><span class="mi">1826</span>         <span class="k">if</span> <span class="p">(</span><span class="n">tcp_rcv_state_process</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span> <span class="n">skb</span><span class="p">,</span> <span class="n">tcp_hdr</span><span class="p">(</span><span class="n">skb</span><span class="p">),</span> <span class="n">skb</span><span class="o">-&gt;</span><span class="n">len</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'><span class="mi">1827</span>                 <span class="n">rsk</span> <span class="o">=</span> <span class="n">sk</span><span class="p">;</span>
</span><span class='line'><span class="mi">1828</span>                 <span class="k">goto</span> <span class="n">reset</span><span class="p">;</span>
</span><span class='line'><span class="mi">1829</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">1830</span>         <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="mi">1831</span>
</span><span class='line'><span class="mi">1832</span> <span class="nl">reset</span><span class="p">:</span>
</span><span class='line'><span class="mi">1833</span>         <span class="n">tcp_v4_send_reset</span><span class="p">(</span><span class="n">rsk</span><span class="p">,</span> <span class="n">skb</span><span class="p">);</span>
</span><span class='line'><span class="mi">1834</span> <span class="nl">discard</span><span class="p">:</span>
</span><span class='line'><span class="mi">1835</span>         <span class="n">kfree_skb</span><span class="p">(</span><span class="n">skb</span><span class="p">);</span>
</span><span class='line'><span class="mi">1836</span>         <span class="cm">/* Be careful here. If this function gets more complicated and</span>
</span><span class='line'><span class="cm">1837          * gcc suffers from register pressure on the x86, sk (in %ebx)</span>
</span><span class='line'><span class="cm">1838          * might be destroyed here. This current version compiles correctly,</span>
</span><span class='line'><span class="cm">1839          * but you have been warned.</span>
</span><span class='line'><span class="cm">1840          */</span>
</span><span class='line'><span class="mi">1841</span>         <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="mi">1842</span>
</span><span class='line'><span class="mi">1843</span> <span class="nl">csum_err</span><span class="p">:</span>
</span><span class='line'><span class="mi">1844</span>         <span class="n">TCP_INC_STATS_BH</span><span class="p">(</span><span class="n">sock_net</span><span class="p">(</span><span class="n">sk</span><span class="p">),</span> <span class="n">TCP_MIB_CSUMERRORS</span><span class="p">);</span>
</span><span class='line'><span class="mi">1845</span>         <span class="n">TCP_INC_STATS_BH</span><span class="p">(</span><span class="n">sock_net</span><span class="p">(</span><span class="n">sk</span><span class="p">),</span> <span class="n">TCP_MIB_INERRS</span><span class="p">);</span>
</span><span class='line'><span class="mi">1846</span>         <span class="k">goto</span> <span class="n">discard</span><span class="p">;</span>
</span><span class='line'><span class="mi">1847</span> <span class="p">}</span>
</span><span class='line'><span class="mi">1848</span> <span class="nf">EXPORT_SYMBOL</span><span class="p">(</span><span class="n">tcp_v4_do_rcv</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>

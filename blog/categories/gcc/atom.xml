<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gcc | My Octopress Blog]]></title>
  <link href="http://martinbj2008.github.io/blog/categories/gcc/atom.xml" rel="self"/>
  <link href="http://martinbj2008.github.io/"/>
  <updated>2015-05-21T16:26:25+08:00</updated>
  <id>http://martinbj2008.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LFS中Binutils,GCC,Glibc三者之间的关系]]></title>
    <link href="http://martinbj2008.github.io/blog/2012/06/01/lfs-binutils-gcc-glibc/"/>
    <updated>2012-06-01T00:00:00+08:00</updated>
    <id>http://martinbj2008.github.io/blog/2012/06/01/lfs-binutils-gcc-glibc</id>
    <content type="html"><![CDATA[<p>原文地址：LFS中Binutils,GCC,Glibc三者之间的关系
[<a href="http://blog.chinaunix.net/uid-20431728-id-2752867.html">http://blog.chinaunix.net/uid-20431728-id-2752867.html</a>]</p>

<!-- more -->


<ol>
<li>binutils有一个很重要的目的是为了生成LD，标准连接器。以及as汇编器，还有readelf等等。</li>
<li>gcc，生成gcc编译器</li>
<li>head头文件，必要的头文件支持，变量和函数的申明.</li>
<li>glibc，利用新的头文件以及新的binutils程序，生成glibc，其中有大名顶顶的ld-linux.so动态加载器。其中/etc/ld.so.conf文件的作用是库文件的搜索路径，默认情况下，编译器只会查询/lib和/usr/lib这两个目录下的库文件。</li>
<li>在上述编译过程中，常出现—libexecdir的参数，表示将程序在编译过程中将生成的.so和.a文件放到该目录内</li>
<li>调整工具链，即启用新工具链，新的/bin/ld，以及新的/lib/ld-linux.so.2。其中ld-linux.so.2连接的重新定位依靠修改gcc &ndash;print-file specs文件来实现。</li>
<li>利用新的库文件和工具链，重新安装GCC和binutils，以彻底摆脱宿主系统的控制。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fix Bug: Timezone of Toolchain]]></title>
    <link href="http://martinbj2008.github.io/blog/2011/01/22/fix-bug-timezone-of-toolchain/"/>
    <updated>2011-01-22T00:00:00+08:00</updated>
    <id>http://martinbj2008.github.io/blog/2011/01/22/fix-bug-timezone-of-toolchain</id>
    <content type="html"><![CDATA[<p>When we compile a glibc(or eglibc), we need generated the timezone data file with it. although, it is stable and no change almost in every version update.</p>

<p>Today a problem is met about it.</p>

<p>We use the old glibc’s timezone file, which is used by many different toolchain for several paltforms.</p>

<p>unfortunately.the data file has been change after 2007 year by GNU official. but I did not found the exact version(date) of glibc, which change the timezone data file.</p>

<p>btw: toolchain = binutils + gcc + glibc(eglic) + kernel(header)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#在C中用法]]></title>
    <link href="http://martinbj2008.github.io/blog/2007/11/30/pound-in-c/"/>
    <updated>2007-11-30T00:00:00+08:00</updated>
    <id>http://martinbj2008.github.io/blog/2007/11/30/pound-in-c</id>
    <content type="html"><![CDATA[<h3>示例</h3>

<pre><code class="c">#include &lt;stdio.h&gt;

#define printTypeSize(x) {printf("sizeof("#x")\t = %d\n", sizeof(x));}
int main()
{
        printTypeSize(char);
            return 0;
}
</code></pre>

<h3>输出</h3>

<p>sizeof(char)     = 1</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Subst: Replace String in Makefile]]></title>
    <link href="http://martinbj2008.github.io/blog/2007/06/22/subst/"/>
    <updated>2007-06-22T00:00:00+08:00</updated>
    <id>http://martinbj2008.github.io/blog/2007/06/22/subst</id>
    <content type="html"><![CDATA[<pre><code>TARGETS =    111.cpp 222.cpp 333.cpp
OTARGETS= $(subst cpp,o,$(TARGETS))
LTARGETS= $(subst cpp,lo,$(TARGETS))
%.o: %.cpp
    g++ -c -o $@ $&lt;
all: objs libs
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gcc参数可变的宏定义]]></title>
    <link href="http://martinbj2008.github.io/blog/2007/06/12/marco-with-variant-arg/"/>
    <updated>2007-06-12T09:06:00+08:00</updated>
    <id>http://martinbj2008.github.io/blog/2007/06/12/marco-with-variant-arg</id>
    <content type="html"><![CDATA[<p><code>#define LOGSTRINGS(fm, ...) printf(fm,__VA_ARGS__)</code></p>

<p>使用方法
<code>LOGSTRINGS("hello, %d ", 10);</code></p>

<p>但是必须有第二个参数！否则编译无法通过。</p>

<p>改进
<code>#define LOGSTRINGS(fm, ...) printf(fm, ##__VA_ARGS__)</code>
<code>LOGSTRINGS("hello, world\n");</code></p>

<p>最简单的方法<br/>
<code>#define LOGSTRINGS(...) printf（__VA_ARGS__)</code></p>
]]></content>
  </entry>
  
</feed>

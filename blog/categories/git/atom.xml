<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | My Octopress Blog]]></title>
  <link href="http://martinbj2008.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://martinbj2008.github.io/"/>
  <updated>2015-05-21T16:26:25+08:00</updated>
  <id>http://martinbj2008.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Update Github Page in Multi Pos]]></title>
    <link href="http://martinbj2008.github.io/blog/2013/11/20/how-to-update-github-page-in-multi-pos/"/>
    <updated>2013-11-20T22:42:00+08:00</updated>
    <id>http://martinbj2008.github.io/blog/2013/11/20/how-to-update-github-page-in-multi-pos</id>
    <content type="html"><![CDATA[<h3>Requirement</h3>

<p>I want to write blog with github page and octopress in the office
and in the home.</p>

<h3>Steps</h3>

<p>The github page has work well done with pc in the home.
Now setup the environment in office to write github page.
The github page repo:
    <a href="https://github.com/martinbj2008/martinbj2008.github.io">https://github.com/martinbj2008/martinbj2008.github.io</a></p>

<p>the octopress is pushed to git repo as branch &ldquo;source&rdquo;</p>

<p>How to write blog and sync them to github while avoid conflict with home?</p>

<!-- more -->


<h4>1. clone the &lsquo;source&rsquo; branch of github page repo.</h4>

<pre><code>The branch includes markdown files and config files.
</code></pre>

<pre><code>    git clone https://github.com/martinbj2008/martinbj2008.github.io blog
    cd blog
    git checkout -b source origin/source
</code></pre>

<h4>2. fake <code>_deploy</code> directory to avoid <code>rake deloy</code> failure.</h4>

<pre><code>clone the github page repo and checkout branch `master`
</code></pre>

<pre><code>    git clone git@github.com:martinbj2008/martinbj2008.github.io.git _deploy
</code></pre>

<h4>3. setup octopress</h4>

<pre><code>install dependencies.
</code></pre>

<pre><code>    sudo apt-get install rbenv
    sudo apt-get install ruby
    sudo bundle update rake
</code></pre>

<pre><code>    gem install bundler
    rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command
    bundle install
</code></pre>

<pre><code>Install the default Octopress theme.
</code></pre>

<pre><code>    rake install
</code></pre>

<h4>4. enjoy it.</h4>

<pre><code>    rake generate
    rake preview
    rake deploy
</code></pre>

<h3>Solved Problem</h3>

<h4>1. rake could not work.</h4>

<pre><code>    sudo bundle update rake
</code></pre>

<h4>2. rake version does not match, need edit <code>Gemfile</code>.</h4>

<p>This work has been done in the home.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>martin@ubuntu:~/git/octopress$ rake &ndash;version
</span><span class='line'>rake, version 10.1.0
</span><span class='line'>martin@ubuntu:~/git/octopress$ git diff Gemfile
</span><span class='line'>diff &ndash;git a/Gemfile b/Gemfile
</span><span class='line'>index cd8ce57..e7cd276 100644
</span><span class='line'>&mdash; a/Gemfile
</span><span class='line'>+++ b/Gemfile
</span><span class='line'>@@ -1,7 +1,7 @@
</span><span class='line'> source &ldquo;&lt;a href="https://rubygems.org"&gt;https://rubygems.org&lt;/a&gt;&rdquo;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt; group :development do
</span><span class='line'>-  gem &lsquo;rake&rsquo;, &lsquo;~&gt; 0.9&rsquo;
</span><span class='line'>+  gem &lsquo;rake&rsquo;, &lsquo;~&gt; 10.1&rsquo;
</span><span class='line'>   gem &lsquo;jekyll&rsquo;, &lsquo;~&gt; 0.12&rsquo;
</span><span class='line'>   gem &lsquo;rdiscount&rsquo;, &lsquo;~&gt; 2.0.7&rsquo;
</span><span class='line'>   gem &lsquo;pygments.rb&rsquo;, &lsquo;~&gt; 0.3.4&rsquo;
</span><span class='line'>martin@ubuntu:~/git/octopress$</span></code></pre></td></tr></table></div></figure></p>

<h4>3. &ldquo;cannot load such file &ndash; mkmf&rdquo;</h4>

<p>sudo aptitude install ruby1.9.1-dev</p>

<pre><code>junwei@localhost:~/git/blog$ sudo bundle update rake
[sudo] password for junwei:
Fetching gem metadata from https://rubygems.org/........
Fetching gem metadata from https://rubygems.org/..
Resolving dependencies...
Installing rake (10.1.1)
Installing RedCloth (4.2.9)
Gem::Installer::ExtensionBuildError: ERROR: Failed to build gem native extension.

        /usr/bin/ruby1.9.1 extconf.rb
/usr/lib/ruby/1.9.1/rubygems/custom_require.rb:36:in `require': cannot load such file -- mkmf (LoadError)
        from /usr/lib/ruby/1.9.1/rubygems/custom_require.rb:36:in `require'
        from extconf.rb:1:in `&lt;main&gt;'


Gem files will remain installed in /var/lib/gems/1.9.1/gems/RedCloth-4.2.9 for inspection.
Results logged to /var/lib/gems/1.9.1/gems/RedCloth-4.2.9/ext/redcloth_scan/gem_make.out

An error occurred while installing RedCloth (4.2.9), and Bundler cannot continue.
Make sure that `gem install RedCloth -v '4.2.9'` succeeds before bundling.
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Submit Kernel Patch by Git-mail]]></title>
    <link href="http://martinbj2008.github.io/blog/2013/06/26/submit-kernel-patch-by-git-mail/"/>
    <updated>2013-06-26T00:00:00+08:00</updated>
    <id>http://martinbj2008.github.io/blog/2013/06/26/submit-kernel-patch-by-git-mail</id>
    <content type="html"><![CDATA[<pre><code>git send-email --annotate  --subject-prefix="PATCH v2 net-next" \
  --in-reply-to=The_previous_email_message_id_to_be_replied \
  --smtp-debug --to MAINTENACE_person_email --cc CCLIST HEAD^^
</code></pre>

<!-- more -->


<ol>
<li><code>—annotate</code>: 临时增加一些注释到邮件里。添加方法跟git commit &ndash;amend 类似, 但是这些注释不会作为标准patch的一部分（即不会被包含到将来的commit message里）。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Adding Extra Notes to Patch Mails&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Sometimes it&rsquo;s convenient to annotate patches with some notes that are not meant
</span><span class='line'>to be included in the commit message. For example, one might want to write
</span><span class='line'>&ldquo;I&rsquo;m not sure if this should be committed yet, because&hellip;&rdquo; in a patch, but the
</span><span class='line'>text doesn&rsquo;t make sense in the commit message. Such messages can be written
</span><span class='line'>below the three dashes &ldquo;&mdash;&rdquo; that are in every patch after the commit message.
</span><span class='line'>Use the &ndash;annotate option with git send-email to be able to edit the mails
</span><span class='line'>before they are sent.
</span><span class='line'>&lt;code&gt;
</span><span class='line'>这些注释要添加在---的后面。
</span><span class='line'>例如:
</span><span class='line'>这样的注释不会被保留到最终的git 仓库里。所以我把它们成为临时注释。
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>37 &mdash;
</span><span class='line'>&lt;=== 使用annotate，在这里添加临时注释。
</span><span class='line'>38  arch/x86/kernel/cpu/mtrr/cleanup.c | 8 ++++&mdash;-
</span><span class='line'>39  1 file changed, 4 insertions(+), 4 deletions(-)</span></code></pre></td></tr></table></div></figure></p>

<ol>
<li>Cc: &hellip;..</li>
<li><p>Signed-off-by: &hellip;.</p></li>
<li><p><code>—subject-prefix</code>: 邮件标题前面中括号里的内容。 要是邮件不小心发错了，需要重发时。要带有”RESEND”字样。 “PATCH vX YYYY”, X标识版本号。第一个版本时可以省略x及前面的v. YYYY 标识具体的那个模块。对网络模块来说，重要的问题发送net， 不重要的发送到net-next。</p></li>
<li><p><code>—in-reply-to</code> 主要用在邮件讨论上。 使邮件保持在一个thread里。
<code>
Message-ID to be used as In-Reply-To for the first email?
This can usually be left empty, in which case the patch or patches will appear
as a new thread. When sending updated patches, in my opinion it's nice to set
this to the "Message-Id" header of the previous version of the patch
(for multi-patch series, use the cover letter's Message-Id), so that the full
patch history can be easily accessed. This is the only valid use case for
setting the "In-Reply-To" header (again, in my opinion). In other words, please
do NOT send patches as replies to regular discussion.
</code></p></li>
<li><code>HEAD^^</code>: means two patch to be sent. 当发送一系列的patch时有用。</li>
</ol>


<p>关于维护人。 有两种方式可以得到， kerel源文件根目录下的MAINTAINERS 或者./scripts/get_maintainer.pl</p>

<pre><code>$ cat ~/.gitconfig
[user]
  name = XXXX
  email = martinbj2008@xxxx.com
[sendemail]
  smtpencryption = tls
  smtpserver = smtp.gmail.com
  smtpuser = martinbj2008@xxxx.com
  smtpserverport = 587
  confirm = always
  smtppass=XXXXXXXXXXXX
  from=martinbj2008@xxxx.com
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[通过git Reflog 找回的commit]]></title>
    <link href="http://martinbj2008.github.io/blog/2012/07/29/git-reflog/"/>
    <updated>2012-07-29T00:00:00+08:00</updated>
    <id>http://martinbj2008.github.io/blog/2012/07/29/git-reflog</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>Prepare</h2>

<pre><code>[martin@fc17 git_study]$ git log --oneline 
83e7d89 add lineb in readme &lt;== this commit will be reset hardly
4fd6367 add line1 in readme
bfd590e touch readme
</code></pre>

<pre><code>[martin@fc17 git_study]$ git reset HEAD^ --hard 
HEAD is now at 4fd6367 add line1 in readme
[martin@fc17 git_study]$ git log --oneline 
4fd6367 add line1 in readme
bfd590e touch readme
</code></pre>

<pre><code>[martin@fc17 git_study]$  cat readme 
line a
通过git reflog 我们可以得到误删除的commit对应的ID
</code></pre>

<h3>git reflog</h3>

<pre><code>[martin@fc17 git_study]$ git reflog 
4fd6367 HEAD@{0}: reset: moving to HEAD^
83e7d89 HEAD@{1}: commit: add lineb in readme
4fd6367 HEAD@{2}: commit: add line1 in readme
bfd590e HEAD@{3}: commit (initial): touch readme
</code></pre>

<p>有了commit ID, 一切就OK了。想干啥都行了 cherry-pick, checkout …</p>

<pre><code> [martin@fc17 git_study]$ git checkout -b try_recover 83e7d89 
 Switched to a new branch ‘try_recover’ 
 [martin@fc17 git_study]$ git log —oneline
  83e7d89 add lineb in readme 
  4fd6367 add line1 in readme 
  bfd590e touch readm
 [martin@fc17 git_study]$ cat readme 
 line a 
 line b
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Study Summary]]></title>
    <link href="http://martinbj2008.github.io/blog/2012/05/12/git-summary/"/>
    <updated>2012-05-12T00:00:00+08:00</updated>
    <id>http://martinbj2008.github.io/blog/2012/05/12/git-summary</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>create repo</h2>

<pre><code>1087 git init —bare study.git &lt;=== crate study.git 
1088 ls study.git/ 1089 cat study.git/config 
1090 ls 1091 git clone study.git/ 
1092 ls 
1093 cd study 
1094 ls 
1095 touch study.readme 
1096 echo “This is readme for study(master)” 
1097 echo “This is readme for study(master)” &gt;&gt;study.readme 
1098 git add study.readme 
1099 git commit -s study.readme &lt;===== commit a file for test. 
1100 git push origin master &lt;===== push them to the server(locally). 
1101 cd .. 1102 ls
</code></pre>

<h2>create a remote branch.</h2>

<pre><code>1103 git clone study.git/ tmp1 
1104 cd tmp1/ 
1105 ls 
1106 git log 
1107 cd .. 
1108 ls 
1109 cd study 
1110 ls 
1111 git checkout -b dev_junwei &lt;======== create a locally branch. 
1112 ls 
1113 vim study.readme 
1114 ls 
1115 git commit study.readme 
1116 git mv study.readme study.dev.junwei.readme 
1117 git push origin dev_junwei &lt;======== create a remote branch. and remote branch has same name with the local one.
1118 git branch
</code></pre>

<h2>create a mirror for the study.git</h2>

<pre><code>git clone —bare study.git/ mirror.git
</code></pre>

<h2>Add a new remote git resp.</h2>

<pre><code class="`"> 1134  git remote add mirror /home/junwei/git_study/mirror.git/  &lt;=== add a new remote and name it as mirror.
 1136  git remote show
 1137  git remote show origin 
 1138  git remote show mirror 
 1139  git status
 1140  git fetch mirror  &lt;===== !!!! important, Only thus following checkout could be sucess

 1141  git checkout  -b m_master mirror/master  &lt;=== create local branch according remote branch.
 1142  git checkout  -b m_dev mirror/dev_junwei 

 1164  git commit -sa &lt;=== commit a change to local branch.

 1168  git push mirror  m_dev:dev_junwei &lt;=== push the local change to remote branch. "m_dev" is created in 1142.

 1174  git push mirror m_dev:dev_junwei  &lt;=== do some change/commit and push again to remote mirror.
             FU CK( NOT m_dev/dev_junwei)!!!!!!!

 1176  git status
</code></pre>

<p>git config push.default tracking 来让git push命令默认push当前的分支到对应的remote tracking分支上</p>

<pre><code>[junwei@junwei study]$ git config push.default tracking
[junwei@junwei study]$ cat .git/config 
....
[push]
 default = tracking
[junwei@junwei study]$ 

git push origin :remote_branch_name
</code></pre>

<pre><code>[martin@fc16 example]$ git log --oneline  
7f9df38 This file should only be seen on branch 'dev'.
5679bd2 fill a line in readme file on branch 'dev'.
3d83de1 Add an empty readme
[martin@fc16 example]$ 
[martin@fc16 example]$ git tag init 3d83de1
[martin@fc16 example]$ git tag v1.0 
[martin@fc16 example]$  
[martin@fc16 example]$ git tag
init
v1.0
[martin@fc16 example]$ git push
Everything up-to-date
[martin@fc16 example]$ git push --tags
Total 0 (delta 0), reused 0 (delta 0)
To /var/lib/git/test/example.git/
 * [new tag]         init -&gt; init
 * [new tag]         v1.0 -&gt; v1.0
[martin@fc16 example]$ 
</code></pre>

<h2>delete remote tags.</h2>

<pre><code>[martin@fc16 example]$ git push  origin  :v1.a0
To /var/lib/git/test/example.git/
 - [deleted]         v1.a0
[martin@fc16 example]$ 
</code></pre>
]]></content>
  </entry>
  
</feed>
